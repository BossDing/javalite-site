INSERT INTO `pages` VALUES (7,'ActiveJDBC','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">ActiveJDBC</li>\r\n</ul>\r\n<h1>ActiveJDBC</h1>\r\n\r\n<div id=\"generated-toc\"></div>\r\n\r\n<h2>Design principles</h2>\r\n\r\n<ul>\r\n    <li>Should infer metadata from DB (like ActiveRecord)</li>\r\n    <li>Should be very easy to work with</li>\r\n    <li>Should reduce amount of code to a minimum</li>\r\n    <li>No configuration, just conventions</li>\r\n    <li>Some conventions are overridable in code</li>\r\n    <li>No need to learn another QL - SQL is sufficient</li>\r\n    <li>Code must be lightweight and intuitive, sholid read like English</li>\r\n    <li>No sessions, no \"attaching, re-attaching\"</li>\r\n    <li>No persistence managers.</li>\r\n    <li>No classes outside your own models.</li>\r\n    <li>Models are lightweight, no transient fields</li>\r\n    <li>No proxy-ing. What you write is what you get (WYWIWYG :))</li>\r\n    <li>No getters and setters. You can still write them if you like.</li>\r\n    <li>No DAOs and DTOs - this is mostly junk code anyway</li>\r\n</ul>\r\n\r\n\r\n<h2>Documentation</h2>\r\n\r\n\r\n<a id=\"expand\" href=\"javascript:void(0);\"\r\n   onclick=\"$(\'#documentation\').show(\'slow\'); $(\'#expand\').hide(); $(\'#collapse\').show();\" style=\"display:none\">Expand\r\n    table of contents</a>\r\n<a id=\"collapse\" href=\"javascript:void(0);\"\r\n   onclick=\"$(\'#documentation\').hide(\'slow\'); $(\'#collapse\').hide(); $(\'#expand\').show();\">Collapse table of\r\n    contents</a>\r\n\r\n<div id=\"documentation\">\r\n\r\n    <ul>\r\n        <li><a href=\"setters_and_getters\">Setters and getters</a></li>\r\n        <li><a href=\"record_selection\">Record selection</a></li>\r\n        <li><a href=\"surrogate_primary_keys\">Surrogate primary keys</a></li>\r\n        <li><a href=\"limit_and_sort\">Limit and Sort</a></li>\r\n        <li><a href=\"record_creation\">Record creation</a></li>\r\n        <li><a href=\"batch_operations\">Batch operations</a></li>\r\n        <li><a href=\"activejdbc_validations\">Validations</a></li>\r\n        <li><a href=\"activejdbc_converters\">Converters</a></li>\r\n        <li><a href=\"optimistic_locking\">Optimistic locking</a></li>\r\n        <li><a href=\"transactions\">Transactions</a></li>\r\n        <li><a href=\"one_to_many_associations\">One-To-Many Associations</a></li>\r\n        <li><a href=\"many_to_many_associations\">Many-To-Many Associations</a></li>\r\n        <li><a href=\"polymorphic_associations\">Polymorphic associations</a></li>\r\n        <li><a href=\"autogenerated_fields\">Autogenerated Fields</a></li>\r\n\r\n\r\n        <li><a href=\"caching\">Caching</a></li>\r\n        <li><a href=\"clob_support_and_caching\">Clob Support and caching</a></li>\r\n\r\n        <li><a href=\"generation_of_xml\">Generation of Xml</a></li>\r\n        <li><a href=\"generation_of_json\">Generation of Json</a></li>\r\n        <li><a href=\"lifecycle_callbacks\">Lifecycle Callbacks</a></li>\r\n        <li><a href=\"statistics_reporting\">Statistical reporting</a></li>\r\n        <li><a href=\"lazy_and_eager\">Lazy and eager</a></li>\r\n        <li><a href=\"logging\">Logging</a></li>\r\n        <li><a href=\"instrumentation\">Instrumentation</a></li>\r\n        <li><a href=\"jspec\">JSpec</a></li>\r\n        <li><a href=\"dbmigrations\">DB migrations</a></li>\r\n        <li><a href=\"data_conversions\">Data conversions</a></li>\r\n        <li><a href=\"writing_tests\">Writing tests</a></li>\r\n        <li><a href=\"database_connection_management\">Database connection management</a></li>\r\n        <li><a href=\"delete_cascade\">Delete cascade</a></li>\r\n        <li><a href=\"inheritance\">Inheritance</a></li>\r\n\r\n        <li><a href=\"netbeansIntegration\">Netbeans Integration</a></li>\r\n        <li><a href=\"eclipseIntegration\">Eclipse Integration</a></li>\r\n        <li><a href=\"ide_integrations\">IDE Integrations</a></li>\r\n        <li><a href=\"faq\">FAQ</a></li>\r\n        <li><a href=\"getting_started\">Getting Started</a></li>\r\n        <li><a href=\"record_creation\">Record Creation</a></li>\r\n\r\n    </ul>\r\n</div>\r\n\r\n<h2>Programming model</h2>\r\nFor a simple example we will use a table called PEOPLE created with this MySQL DDL:\r\n\r\n<pre name=\"code\" class=\"brush:sql;\">\r\n    CREATE TABLE people (\r\n      id  int(11) NOT NULL auto_increment PRIMARY KEY,\r\n      name VARCHAR(56) NOT NULL,\r\n      last_name VARCHAR(56),\r\n      dob DATE,\r\n      graduation_date DATE,\r\n      created_at DATETIME,\r\n      updated_at DATETIME\r\n      );\r\n</pre>\r\nActiveJDBC infers DB schema parameters from a database. This means you do not have to provide it in code,\r\nthe simplest example model looks like this:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Person extends Model {}\r\n</pre>\r\n\r\nDespite the fact that there is no code in it, it is fully functional and will map to a table called PEOPLE automatically.\r\n\r\nHere is how to use it:\r\n\r\n<h3>How to query</h3>\r\nQuerying is easy:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nList&lt;Person&gt; people = Person.where(\"name = \'John\'\");\r\n    Person aJohn = people.get(0);\r\n    String johnsLastName = aJohn.get(\"last_name\");\r\n</pre>\r\nAs you can see, the amount of code is reduced to a level when it is actually readable. Finder methods can also be parametrized like this:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nList&lt;Person&gt; people = Person.where(\"name = ?\", \"John\");\r\n    Person aJohn = people.get(0);\r\n    String johnsLastName = aJohn.get(\"last_name\");\r\n    Paging through data\r\n    List\r\n    &lt;Employee&gt; people = Employee.where(\"department = ? and hire_date > ? \", \"IT\", hireDate)\r\n        .offset(21)\r\n        .limit(10)\r\n        .orderBy(\"hire_date asc\");\r\n\r\n</pre>\r\nThis query will ensure that the returned result set will start at the 21st record and will return only 10 records,\r\naccording to the \"orderBy\". The ActiveJDBC has a built in facility for various database flavors and it will generate\r\nappropriate SQL statement that is specific for a DB (Oracle, MySQL, etc) and is efficient. It will not fetch all records, starting with 1.\r\n\r\n<h3>Creating new records</h3>\r\nThere are several ways to do this, and the simplest is:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson p = new Person();\r\np.set(\"name\", \"Marilyn\");\r\np.set(\"last_name\", \"Monroe\");\r\np.set(\"dob\", \"1935-12-06\");\r\np.saveIt();\r\n</pre>\r\nThere is also a shorthand version of doing the same:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nnew Person().set(\"name\", \"Marilyn\").set(\"last_name\", \"Monroe\").set(\"dob\", \"1935-12-06\").saveIt();\r\n</pre>\r\nand yet another one :\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson.createIt(\"name\", \"Marilyn\", \"last_name\", \"Monroe\", \"dob\", \"1935-12-06\");\r\n    </pre>\r\n\r\n<h3>Updating a record</h3>\r\n<pre name=\"code\" class=\"brush:java;\">\r\nEmployee e = Employee.findFirst(\"first_name = ?\", \"John\");\r\ne.set(\"last_name\", \"Steinbeck\").saveIt();\r\n</pre>\r\n\r\n<h3>Deleting a record</h3>\r\n<pre name=\"code\" class=\"brush:java;\">\r\nEmployee e = Employee.findFirst(\"first_name = ?\", \"John\");\r\ne.delete();\r\n</pre>\r\n\r\n\r\n<h2>Getting the latest version</h2>\r\nLatest version is 1.4.1 and it is deployed to Maven sentral repository. If you use Maven add this to your pom:\r\n\r\n<pre name=\"code\" class=\"brush:xml;\">\r\n    <dependency>\r\n        <groupId>org.javalite</groupId>\r\n        <artifactId>activejdbc</artifactId>\r\n        <version>1.4.1</version>\r\n    </dependency>\r\n</pre>\r\n\r\n\r\nFor other technologies, or if you want to simply download it, use instructions provided here:\r\n\r\n<a href=\"http://search.maven.org/#search%7Cga%7C1%7Cactivejdbc\"> ActiveJDBC on Maven Central </a>\r\n\r\n<p>\r\n    Conversely, configure Instrumentation plugin:\r\n\r\n</p>\r\n<pre name=\"code\" class=\"brush:xml;\">\r\n    <plugin>\r\n        <groupId>org.javalite</groupId>\r\n        <artifactId>activejdbc-instrumentation</artifactId>\r\n        <version>1.4.1</version>\r\n        <executions>\r\n            <execution>\r\n                <phase>process-classes</phase>\r\n                <goals>\r\n                    <goal>instrument</goal>\r\n                </goals>\r\n            </execution>\r\n        </executions>\r\n    </plugin>\r\n</pre>\r\n\r\nOr download from: <a href=\"http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22activejdbc-instrumentation%22\">\r\n    ActiveJDBC Instrumentation plugin on Maven Central\r\n</a>\r\n\r\n<h2>Getting latest snapshot versions</h2>\r\n\r\nIf you are using Maven, add these repositories to your pom:\r\n\r\n<pre name=\"code\" class=\"brush:xml;\">\r\n    <repositories>\r\n        <repository>\r\n            <id>sonatype-nexus-snapshots</id>\r\n            <name>Sonatype Nexus Plugin Snapshots</name>\r\n            <url>https://oss.sonatype.org/content/repositories/snapshots</url>\r\n            <releases>\r\n                <enabled>false</enabled>\r\n            </releases>\r\n            <snapshots>\r\n                <enabled>true</enabled>\r\n            </snapshots>\r\n        </repository>\r\n    </repositories>\r\n\r\n    <pluginRepositories>\r\n        <pluginRepository>\r\n            <id>sonatype-nexus-plugin-snapshots</id>\r\n            <name>Sonatype Nexus Plugin Snapshots</name>\r\n            <url>https://oss.sonatype.org/content/repositories/snapshots</url>\r\n            <releases>\r\n                <enabled>false</enabled>\r\n            </releases>\r\n            <snapshots>\r\n                <enabled>true</enabled>\r\n            </snapshots>\r\n        </pluginRepository>\r\n    </pluginRepositories>\r\n</pre>\r\n\r\nIf you are not using Maven, you can pull down the latest from here:\r\n<a href=\"https://oss.sonatype.org/content/repositories/snapshots/org/javalite/\">Sonatype Snapshots</a>','2012-05-06 19:34:51','2013-12-05 09:03:31','activejdbc'),(10,'ActiveJDBC & ActiveWeb - Java, light as a feather','<span class=\"jumbotron subhead\">\r\n  <h1>JavaLite</h1>\r\n  <p class=\"lead\">Java, light as a feather...</p>\r\n</span>\r\n\r\n\r\n<!-- Headings & Paragraph Copy -->\r\n<div class=\"row\">\r\n    <div class=\"span5\">\r\n        <div class=\"well\">\r\n            <h1><a  href=\"/p/activejdbc\">ActiveJDBC</a></h1>\r\n\r\n            <h3>ActiveJDBC is a lightweight and fast Java ORM</h3>\r\n\r\n            <p></p>\r\n            <h5>If you:</h5>\r\n\r\n            <ul>\r\n                <li>are tired of configuring ORMs</li>\r\n                <li>do not like to write a ton of persistent code</li>\r\n                <li>like conventions over configuration</li>\r\n                <li>do not want to learn another query language</li>\r\n                <li>want your persistent code to run fast</li>\r\n                <li>are tired of DAOs and DTOs</li>\r\n                <li>want to simply understand your code better...</li>\r\n            </ul>\r\n\r\n            <h5>... then ActiveJDBC is your ORM!</h5>\r\n            <h5 style=\"float: right\"><a href=\"/p/activejdbc\">find out more...</@link_to></h5>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"span5\">\r\n\r\n        <div class=\"well\">\r\n            <h1><a href=\"/p/activeweb\">ActiveWeb</a></h1>\r\n\r\n            <h3>Full stack Java web framework for agile development</h3>\r\n\r\n\r\n            <p></p>\r\n            <h5>If you:</h5>\r\n\r\n            <ul>\r\n                <li>do not like piece-mealing solutions for days</li>\r\n                <li>like conventions over configuration</li>\r\n                <li>want to be productive the first minute</li>\r\n                <li>want to see your code changes reflected immediately</li>\r\n                <li>want beautiful REST-like URLs</li>\r\n                <li>want to use the same standard Java project structure</li>\r\n                <li>want to easily write high quality tests</li>\r\n            </ul>\r\n            <h5>... then ActiveWeb is your Web framework!</h5>\r\n            <h5 style=\"float: right;\" ><a href=\"/p/activeweb\">find out more...</a></h5>\r\n        </div>\r\n    </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n','2012-05-06 20:09:44','2013-12-22 20:18:38','home'),(12,'Working with setters and getters','<ul class=\"breadcrumb\">\r\n        <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n\r\n         <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n\r\n        <li class=\"active\">Setters and getters</li>\r\n</ul>\r\n\r\n\r\n\r\n\r\n<h1>Setters and getters</h1>\r\n\r\n<div id=\"generated-toc\"></div>\r\n\r\nJava development is all about getters and setters. Ever since the Java Beans framework introduced in 1997, this has become a blessing (and a plague some argue) in modern Java applications. ActiveJDBC does not require getters and setters for models. Since models already know all the allowable metadata from database at startup, they will perform validations of names of attributes.\r\n\r\n<h2>Built in getters and setters</h2>\r\nActiveJDBC provides two base methods for getting information from DB and putting it in:\r\n\r\n<pre name=\"code\" class=\"brush : java;\">\r\n  Person p = Person.findById();\r\n  name = p.get(\"name\");\r\n</pre>\r\n\r\nThe `name` is a name of a column from a table PEOPLE. Same goes for a setter:\r\n<pre name=\"code\" class=\"brush : java;\">\r\nPerson p = new Person();\r\np.set(\"name\", \"John\");\r\np.save();\r\n</pre>\r\n\r\n\r\n<h2>No \"standard\" setters/getters???</h2>\r\n\r\nWell, no. ActiveJDBC will not provide these, and it will not generate them either. However, you can have them if you like:\r\n<pre name=\"code\" class=\"brush : java;\">\r\npublic class Person extends Model{\r\n   public void setFirstName(String firstName){\r\n      set(\"first_name\", firstName);\r\n   }\r\n}\r\n</pre>\r\nThis will provide a safety net to those wishing some compiler static checking.\r\nSame goes for getters. If you are starting out with ActiveJDBC, I suggest you do not write setters and getters, but rather use the provided methods. After a day or two you will be surprised you ever wrote them before.\r\n\r\nCorrection: I started adding getters and setters in order to achieve a few things:\r\n  * IDE help - this actually improves productivity, since IDE helps typing and I do not have to remember the schema by heart\r\n  * Self - documenting the schema\r\n  * no need to use conversion methods like `getFloat(\"name\")`\r\n\r\nWith ActiveJDBC you can use any style you like.\r\n\r\n<h2>Type conversion getters</h2>\r\nActiveJDBC provides a number of type conversion getters:\r\n<pre name=\"code\" class=\"brush : java;\">\r\n\r\nPerson p = Person.findById();\r\nString  name = p.getString(\"name\");\r\nTimestamp dob = p.getTimestamp(\"dob\");\r\n...\r\n</pre>\r\nActiveJDBC will do all possible to convert your data into the type. This also goes for CLOBs:\r\n<pre name=\"code\" class=\"brush : java;\">\r\nString body = article.get(\"body\");\r\n</pre>\r\n\r\nIf the \"BODY\" column in your table is CLOB, ActiveJDBC will automatically convert it to Java String.\r\n\r\n<h2>Recommendation: Use TDD, not static setter/getter wrappers</h2>\r\n\r\nIn my work, I start writing a test before writing much code. I create a one line model code, then start writing a test. Inside the test, I write a piece of code I know will fail:\r\n<pre name=\"code\" class=\"brush : java;\">\r\nPage p  = new Page();\r\np.set(\"blah\", 1);\r\n</pre>\r\nThe table PEOPLE does not have a column \"BLAH\", and ActiveJDBC is conveniently telling me this:\r\n<pre name=\"code\" class=\"brush : java;\">\r\njava.lang.IllegalArgumentException: Attribute: \'blah\' is not defined in model: \'class activejdbc.test_models.Person and also, did not find an association by the same name,\r\navailable attributes: [id, updated_at, graduation_date, dob, name, last_name, created_at]\r\n</pre>\r\n\r\nFrom this message, I see that the allowed attributes are:\r\n<pre >\r\nid, updated_at, graduation_date, dob, name, last_name, created_at\r\n</pre>\r\nwhich gives me all the information I need to start writing a real test.\r\n\r\nSince I know from [AutogeneratedFields] that id, updated_at and created_at are auto-generated columns and I need not touch them, I\'m left with these to work:\r\n<pre>\r\ngraduation_date, dob, name, last_name\r\n</pre>\r\n\r\nWhen I\'m done with the test, I have a piece of durable code which has captured required model behaviour. I then proceed to implement the rest of the model code - necessary validations, other code, until the test starts to pass.\r\n','2012-05-06 20:32:31','2012-05-10 15:45:15','setters_and_getters'),(13,'How to select records','<ul class=\"breadcrumb\">\r\n        <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n\r\n         <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n\r\n        <li class=\"active\">Record selection</li>\r\n</ul>\r\n\r\n\r\n<h1>Record selection</h1>\r\n\r\n<div id=\"generated-toc\"></div>\r\n\r\n\r\n<h2>Create table</h2>\r\n\r\nThis is SQL for the DB table (for MySQL)\r\n\r\n<pre>\r\nCREATE TABLE people (\r\n   id  int(11) DEFAULT NULL auto_increment PRIMARY KEY,\r\n   name VARCHAR(56),\r\n   last_name VARCHAR(56),\r\n   dob DATE,\r\n   graduation_date DATE,\r\n   created_at DATETIME,\r\n   updated_at DATETIME\r\n   );\r\n</pre>\r\n\r\n<h2>Writing a Model</h2>\r\nSimple models are written in one line of code. No need for setters or getters.\r\n<pre name=\"code\" class=\"brush : java;\">\r\npublic class Person extends Model {}\r\n</pre>\r\nActiveJDBC models feel similar to Map interface (although they do not implement it). In order to access a model attributes, you usually use built-in setters and getters:\r\n<pre name=\"code\" class=\"brush : java;\">\r\nperson.get(\"first_name\");\r\n...\r\nperson.set(\"first_name\", \"John\");\r\n</pre>\r\n\r\n<h2>Simple Search</h2>\r\n<pre name=\"code\" class=\"brush : java;\">\r\nList<Person> list = Person.where(\"name = \'John\'\");\r\n</pre>\r\nThis will search a table PEOPLE. The framework will generate a SQL similar to this one:\r\n<pre>\r\nSELECT * FROM PEOPLE WHERE name = \'John\'\r\n</pre>\r\nAs you can see, the framework generates the query from SELECT to the WHERE. The only part that the developer is required to provide is the actual criteria. This is just plain SQL, albeit only a portion.\r\n\r\n<h2>Parametrized search</h2>\r\n<pre name=\"code\" class=\"brush : java;\">\r\nList<Person> list = Person.where(\"name = ?\", \"John\");\r\n</pre>\r\nIn this case, the value \"John\" will be substituted for a question mark. The number of question marks and substitute values is flexible, but must be the same.\r\n\r\n<h2>Processing large result sets</h2>\r\n\r\nIn all previous results, the entire result set was loaded into memory. This approach is fine in case of relatively small results, but might prove a performance bottleneck for very large data sets. The approach below is somewhat reminiscent of SAX approach, where a super large data set from a DB is read, and for every one record found, it produces a callback. Within that callback, you perform whatever operation that makes sense for the application. The advantage of this approach is not needing to allocate a ton of memory. This is usually a preferred method for batch processes.\r\n<pre name=\"code\" class=\"brush : java;\">\r\n        Person.find(\"name=\'John\'\", new ModelListener<Person>() {\r\n            public void onModel(Person person) {\r\n                System.out.println(\"Found person: \" + person);\r\n            }\r\n        });\r\n</pre>\r\n\r\n<h2>Finding one record</h2>\r\nFinding just one record can be achieved with `findFirst` method. As name suggests, even if the query can result in multiple records, only the first one is returned.\r\n<pre name=\"code\" class=\"brush : java;\">\r\nPerson person = Person.findFirst(\"id = 2\");\r\n//parametrized:\r\nperson = Person.findFirst(\"id = ?\", 2);\r\n...\r\n</pre>\r\n\r\n<h2>Finding all records</h2>\r\nThis is a method or returning all records from a table, use carefully as this will load them all into memory (when you start processing the result, not when this method is called)\r\n<pre name=\"code\" class=\"brush : java;\">\r\nList<Person> list = Person.findAll();\r\nfor(Person p: list){   //<==== this line of code will initiate the actual query to DB\r\n   System.out.println(p);\r\n}\r\n</pre>\r\n\r\n<h2>Create and save</h2>\r\nThere are many (more concise) methods of creation of models, this is being the most simple and self-explanatory:\r\n<pre name=\"code\" class=\"brush : java;\">\r\n        Person p = new Person();\r\n        p.set(\"name\", \"Marilyn\");\r\n        p.set(\"last_name\", \"Monroe\");\r\n        p.set(\"dob\", \"1935-12-06\");\r\n        p.saveIt();\r\n\r\n        System.out.println(p.getId());// <== this will print an ID assigned by DB.\r\n</pre>\r\n\r\n<h2>Metadata used to check valid attributes</h2>\r\nIf you look at the SQL at the top of this page, you will see that the table backing up the model doe snot have a column \"name1\". Since the framework will interrogate the DB at the startup and retrieve all metadata information for each table, it will know which model has which attributes. As such, setting a wrong attribute will generate a runtime exception.\r\n<pre name=\"code\" class=\"brush : java;\">\r\n        Person p = new Person();\r\n        p.set(\"name1\", \"Igor\"); //<=== this will throw exception\r\n</pre>\r\n\r\nHere is an example exception (generated from code snippet above):\r\n<pre name=\"code\" class=\"brush : java;\">\r\njava.lang.IllegalArgumentException: Attribute: \'name1\' is not defined in model: \'class activejdbc.test_models.Person\', available attributes: [id, updated_at, graduation_date, dob, name, last_name, created_at]\r\n...\r\n</pre>\r\nAs you can see, the message is very descriptive.\r\n\r\n<h2>Lookup and save</h2>\r\nPutting it together, it is trivial to look up data from DB, modify it, and then save.\r\n<pre name=\"code\" class=\"brush : java;\">\r\n        List&lt;Person&gt; list = Person.find(&quot;id = 1&quot;);\r\n        Person p = list.get(0);\r\n        p.set(\"name\", \"Igor\");\r\n        p.saveIt();\r\n</pre>\r\n\r\n<h2>Get by id</h2>\r\nThis is self-explanatory. If you know the ID, it is easy to get the model that represents this record.\r\n<pre name=\"code\" class=\"brush : java;\">\r\nPerson p = Person.findById(1);\r\n</pre>\r\n\r\n<h2>Count all records</h2>\r\nCounting all records is as simple as calling the \"count()\" method\r\n<pre name=\"code\" class=\"brush : java;\">\r\nlong personCount = Person.count();\r\n</pre>\r\n\r\n<h2>Conditional count</h2>\r\nCounting some records is equally easy, all you have to do is to provide criteria.\r\n<pre name=\"code\" class=\"brush : java;\">\r\nlong johnCount = Person.count(\"name = ? \", \"John\");\r\n</pre>\r\n\r\n<h2>Use raw SQL</h2>\r\nIn case, a query is really complicated, you can always resort to raw SQL like this:\r\n<pre name=\"code\" class=\"brush : java;\">\r\nList&lt;Book&gt; books = Book.findBySQL(&quot;select books.*, address from books, libraries where books.lib_id = libraries.id order by address&quot;);\r\n</pre>\r\nThe only requirement to this method is that your select statement should select all columns from a table that this model represents. Since model knows which attributes belong to it, it will pluck them from the result set, and you will have a normal list of models (Book in this case) that are initialized from your query.\r\n','2012-05-06 20:51:43','2012-05-06 20:55:08','record_selection'),(14,'ActiveJDBC - How to understand usage and generation of surrogate primary keys','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Surrogate primary keys</li>\r\n</ul>\r\n<h1>Surrogate primary keys</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\n\r\n\r\n\r\nActiveJDBC, like ActiveRecord relies on the surrogate primary keys. Description is found here: <a href=\"http://en.wikipedia.org/wiki/Surrogate_key\">http://en.wikipedia.org/wiki/Surrogate_key</a>.\r\nA surrogate key is not generated by ActiveJDBC. Unlike Hibernate, it does not (currently) have any generators for the keys and relies fully on DBMS solution to do this. Depending on a DB implementation, you can use various techniques to achieve this goal.\r\n\r\n<h2> Key name</h2>\r\nBy convention, the primary key name is <code>id</code>. If your table has a surrogate primary key column with a name <code>id</code>, you do not have to do anything.\r\n\r\n\r\n<h2>Key Value</h2>\r\nWhen a new object of a model is created, the value of the ID is obviously <code>null</code>.\r\nWhen an object is looked up from a database, the ID value is populated to appropriately as any other attributes.\r\n\r\nWhen a <code>save()</code> method is called, it will generate either an \"INSERT\" or \"UPDATE\" query, based on a value of the ID attribute. If the <code>ID == null</code>, it will assume that this model represents a new record and will generate an INSERT, if the ID is not null, then it will generate an UPDATE query.\r\n\r\nA developer could set an ID manually, but this is not its typical usage.\r\n\r\n\r\n\r\n<h2>Setting IDs</h2>\r\n\r\nUsually you do not set ID of a model. ActiveJDBC will manage that. If you find setting ID of a model, stop and question what you are doing. If you indeed decide to do this, keep in mind that ActiveJDBC uses ID presence to determine if it needs to generate INSERT or UPDATE statements. See \"Key value\" section above\r\n\r\n<h2>Override primary key</h2>\r\n\r\nIf your table cannot provide a primary key column named <code>id</code> (for instance due to corporate naming standards), you can override it with <code>@IdName</code> annotation.\r\n\r\nExample: let\'s say you have a table PEOPLE:\r\n<pre name=\"code\" class=\"brush:sql;\">\r\nCREATE TABLE people (\r\n  person_id int(11) NOT NULL AUTO_INCREMENT,\r\n  first_name              VARCHAR(124),\r\n  last_name               VARCHAR(124),\r\n)\r\n</pre>\r\n\r\nYou will then put annotation on the model:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n@IdName(\"person_id\")\r\npublic class Person extends Model{}\r\n</pre>\r\n\r\nThis way, the model will know to work with column <code>person_id</code> and not <code>id</code> as a primary key.\r\n\r\n<h2>MySQL usage</h2>\r\nMySQL probably has the best support for this feature, since it has a direct syntax for them:\r\n<pre name=\"code\" class=\"brush:sql;\">\r\nCREATE TABLE people (\r\n  id  INT(11) DEFAULT NULL AUTO_INCREMENT PRIMARY KEY,\r\n  first_name VARCHAR(56),\r\n  last_name VARCHAR(56),\r\n  dob DATE,\r\n  graduation_date DATE,\r\n  created_at DATETIME,\r\n  updated_at DATETIME);\r\n</pre>\r\n\r\nThis example is taken from ActiveJDBC tests. The surrogate PK <code>id</code> will be properly incremented by MySQL.\r\n\r\nExample:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson p = new Person();\r\np.getId(); //<<< ===== returns null\r\np.set(\"first_name\", \"Igor\").set(\"last_name\", \"Polevoy\").saveIt();\r\np.getId(); //<<< ===== returns non-null value, type depends on DBMS driver conversion\r\n</pre>\r\n\r\n\r\n<h2>Oracle usage with sequences and triggers</h2>\r\nIn Oracle things a bit more involved. The strategy is to create a sequence to generate numbers, and trigger to enter these numbers into the *id* column when inserting and not doing this when updating. In other words, if there an insert or update statement without this value, trigger provides one from a sequence, and if one is already provided by the SQL statement, trigger just ignores it.\r\n\r\n<pre name=\"code\" class=\"brush:sql;\">\r\nCREATE TABLE people (\r\n   id  NUMBER NOT NULL,\r\n   name VARCHAR(56),\r\n   last_name VARCHAR(56),\r\n   dob DATE,\r\n   graduation_date DATE,\r\n   created_at TIMESTAMP,\r\n   updated_at TIMESTAMP)\r\n\r\nALTER TABLE people ADD CONSTRAINT people_pk PRIMARY KEY ( id )\r\n\r\nCREATE SEQUENCE people_seq START WITH 1 INCREMENT BY 1\r\n\r\nCREATE OR REPLACE TRIGGER people_trigger\r\n    BEFORE INSERT ON people REFERENCING\r\n    NEW AS new\r\n    OLD AS old\r\n    FOR EACH ROW\r\n    begin\r\nselect coalesce(:new.id, people_seq.nextval) into :new.id from dual;\r\nend;\r\n</pre>\r\n\r\nThis SQL creates a DB structure that allows ActiveJDBC behave exactly the same as with MySQL:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson p = new Person();\r\np.getId(); //<<< ===== returns null\r\np.set(\"first_name\", \"Igor\").set(\"last_name\", \"Polevoy\").saveIt();\r\np.getId(); //<<< ===== returns non-null value, type depends on DBMS driver conversion\r\n</pre>\r\n\r\n<h2>Oracle usage with sequences and no triggers</h2>\r\nIn order to reduce amount of SQL to generate your schema, you can adapt a simpler strategy: create only one sequence and use it as a source of generated values for all tables:\r\n\r\n\r\n<pre name=\"code\" class=\"brush:sql;\">\r\nCREATE TABLE people (\r\n   id  NUMBER NOT NULL,\r\n   name VARCHAR(56),\r\n   last_name VARCHAR(56),\r\n   dob DATE,\r\n   graduation_date DATE,\r\n   created_at TIMESTAMP,\r\n   updated_at TIMESTAMP)\r\n\r\nALTER TABLE people ADD CONSTRAINT people_pk PRIMARY KEY ( id )\r\n\r\nCREATE SEQUENCE main_seq START WITH 1 INCREMENT BY 1\r\n</pre>\r\nWhen defining a model, however, you will need to provide this piece of information to all models where you intend to use this sequence:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n@IdGenerator(\"main_seq.nextVal\")\r\npublic class Person extends Model{}\r\n</pre>\r\n\r\nThe usage code, behavior and expectations will be exactly the same with this strategy. As you can see, this seems to be simpler than using triggers, but it has a drawback. Since the same sequence will be used across multiple tables, the number values in a single table could (will) be out of sequence. But.. since this is a surrogate key anyway, it does not matter.\r\n\r\n\r\n<h2>PostgreSQL usage</h2>\r\nPostgreSQL has a capability similar to that of MySQL, but different syntax - no sequences are required:\r\n\r\n<pre name=\"code\" class=\"brush:sql;\">\r\nCREATE TABLE people (\r\n   id SERIAL PRIMARY KEY,\r\n   name VARCHAR(56) NOT NULL,\r\n   last_name VARCHAR(56),\r\n   dob DATE, graduation_date DATE,\r\n   created_at TIMESTAMP,\r\n   updated_at TIMESTAMP);\r\n</pre>\r\n\r\nThe keyword \'SERIAL\' in PostgreSQL does the same as MySQL\'s AUTO_INCREMENT\r\n\r\n\r\n\r\n<h2>Composite Primary Keys</h2>\r\n\r\n\r\n<h2>What about composite PKs? </h2>\r\n\r\nYou can have a composite PK in your table, as long as there is also an \"ID\" column ActiveJDBC can watch for inserts and updates. If all yuu care about is SELECT, it will work the same way as regular tables. Composite keys are transparent to ActiveJDBC(in a sense it does not see or cares about them). This means that if you set  attribute values into your model that violate the integrity of your data, ActiveJDBC will not complain, but the DB will (by throwing an exception save). This follows the same philosophy: ActiveJDBC does not implement what is already implemented by a lower level technology on stack.\r\nLike ActibveRecord, ActiveJDBC does not support composite primary keys. However, this does not mean that you     cannot use ActiveJDBC on tables with declared composite PKs. All it means is that ActiveJDBC does not provide any constraint checks, and relies on the DB for that. It would still require to have a surrogate PK column in a table if you want to do inserts and updates, but will not require it if all you need is select.','2012-05-07 03:12:03','2012-05-07 14:48:43','surrogate_primary_keys'),(15,'ActiveJDBC - how to limit and sort (order) resultsets with ActiveJDBC','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Limit and sort</li>\r\n</ul>\r\n<h1>Limit and sort</h1>\r\n\r\n<div id=\"generated-toc\"></div>\r\n\r\n\r\n\r\n\r\nOften times you do not need an entire resultset from a table. Sometimes, you only need a few records, and sometimes you want to page through a resultset. This style of data usage is usually found in web applications. Examples could be paging through a catalog of products.\r\n\r\n<h2>Limiting Resultsets </h2>\r\nThe \"finder\" methods, such as <code>find()</code>, <code>findAll()</code> and <code>where()</code> return an instance of a <code>LazyList</code>. This class has a method called <code>limit(int)</code>. This methods will limit a number of results in the resultset when your programs starts to iterate through a list:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nList<Person> people = People.findAll().limit(20);\r\n</pre>\r\n\r\n\r\n<h2> Offsetting start of a page </h2>\r\nOnce you got a first page, you might want to get a next one. This is done with the offset method, found on the same <code>LazyList</code> class like so:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nList<Person> people = People.findAll().limit(40).offset(20);\r\n</pre>\r\n\r\nThe code snippet above will find all return 40 records, starting with the 41st record, inclusive.\r\n\r\n<h2> Ordering results (putting all together Fluent Interfaces - style ) </h2>\r\n\r\nUsually, you would limit, offset and order results in one query:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nList<Person> people = People.findAll().limit(40).offset(20).orderBy(\"age asc\");\r\n</pre>\r\nSometimes this style of programming is called\r\n<a href=\"http://martinfowler.com/bliki/FluentInterface.html\">Fluent Interfaces</a> and is credited to Martin Fowler. This style of API is concise, readable and self explanatory.\r\n\r\n\r\n<h2> Paginating for the web </h2>\r\n\r\nAlthough `limit`, `offset` and `orderBy` themselves are quite simple and powerful methods, ActiveJDBC also provides a convenience class called <code>Paginator</code> especially designed for web applications:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPaginator p = new Paginator(Page.class, 10, \"description like ?\", \"%Java%\").orderBy(\"created_at desc\");\r\nList<Page> items = p.getPage(1);\r\nList<Page> items = p.getPage(2);\r\n</pre>\r\nThe instances of this class are super lightweight and usually attached to a session. An instance of this class can be queried for a current page displayed:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nint currentPage = paginator.getCurrentPage();\r\n</pre>\r\n\r\nand for page count like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nint pageCount = paginator.getPageCount();\r\n</pre>\r\nUsing this class in a context of a web application makes it trivial to build paging through resultsets on web pages.','2012-05-07 14:55:17','2012-05-07 14:57:18','limit_and_sort'),(16,' ActiveJDBC: How to create new records','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">REPLACE</li>\r\n</ul>\r\n<h1>Record creation</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\nThere are many ways to create new records with ActiveJDBC. Let\'s explore them\r\n\r\n<h2>Use setter method</h2>\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson p = new Person();\r\np.set(\"first_name\", \"John\");\r\np.set(\"last_name\", \"Doe\");\r\np.set(\"dob\", \"1935-12-06\");\r\np.saveIt();\r\n</pre>\r\n\r\nThis code should be self explanatory. As you can see, ActiveJDBC does not require to have getters and setters. You can write them, if you like though.\r\n\r\n<h2>save() and saveIt() methods</h2>\r\nActiveJDBC class Model provides two methods for saving an entity: <code>save()</code> and <code>saveIt()</code>. Both methods will involve validations during saving, but in the case of the method save() will silently exit without throwing exceptions. In case validations failed, the instance will have an errors collection attached to it. This is very useful in the context of a web application. Here is an example:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson person = new Person();\r\nperson.fromMap(requestParams);\r\nif(person.save()) //<<<===  will not throw exception and will not save in case there are validation errors.\r\n    //show page success\r\nelse{\r\n     request.setAttribute(\"errors\", person.errors());\r\n     //show errors page, or same page so that user can correct errors.\r\n}\r\n</pre>\r\nMore on validations , see this page: [Validations]\r\n\r\nThe <code>saveIt()</code> method will throw an exception in case there was a validation problem. The <code>save()</code> method makes more sense in the context of a web application, \r\nwhereas <code>saveIt()</code>  is more useful in a non-web app situations - batch inserts, tests, etc.\r\n\r\n<h2>Method chaining</h2>\r\n\r\nThe <code>set(name, value)</code> method returns reference to the same model object, which makes it possible to string method calls like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson p = new Person();\r\np.set(\"name\", \"John\").set(\"last_name\", \"Doe\").set(\"dob\", \"1935-12-06\").saveIt();\r\n</pre>\r\n\r\n..or make it shorter:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nnew Person().set(\"first_name\", \"Marilyn\").set(\"last_name\", \"Monroe\").set(\"dob\", \"1935-12-06\").saveIt();\r\n</pre>\r\n\r\n<h2>Batching names an values</h2>\r\nThere is a way to batch names and values into arrays:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nString[] names = {\"first_name\", \"last_name\", \"dob\"};\r\nObject[] values = {\"John\", \"Doe\", dob}\r\nnew Person().set(names, values).saveIt();\r\n</pre>\r\n\r\nOf course, the names is a String array and the two arrays need to be the same size.\r\n\r\n<h2>Initialize from Map</h2>\r\nThis method of creation is useful for web applications if request parameters are posted from a form an available in a Map instance:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nMap values = ... initialize map\r\nPerson p = new Person();\r\np.fromMap(values);\r\np.saveIt();\r\n</pre>\r\n\r\n\r\n<h2>Initialize from varargs</h2>\r\nModel also provides another convenience method for entity initialization, the set methods that accepts a varargs:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson p = new Person();\r\np.set(\"first_name\", \"Sam\", \"last_name\", \"Margulis\", \"dob\", \"2001-01-07\");\r\np.saveIt();\r\n</pre>\r\nThe argument list is a string of names and corresponding values where names are interleaved with values. This makes it easy to write allows for easy reading (if you just read it aloud, it will sound as an English sentence).\r\n\r\n<h2>Convenience create() and createIt() methods</h2>\r\nThe class Model also provides two convenience methods for creation of records: <code>create()</code> and <code>createIt()</code>. There is a semantic difference between these two methods, and it is the same as between <code>save()</code> and <code>saveIt()</code> methods, except in this case, ActiveJDBC creates and attempts to save an object in one step.\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson p = Person.create(\"first_name\", \"Sam\", \"last_name\", \"Margulis\", \"dob\", \"2001-01-07\");\r\np.saveIt();\r\n</pre>\r\n\r\nor:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson p = Person.createIt(\"first_name\", \"Sam\", \"last_name\", \"Margulis\", \"dob\", \"2001-01-07\");\r\n</pre>\r\n\r\nThe <code>create()</code> and <code>createIt()</code> method accepts a list of arguments, where names are interleaved with values. This is similar to the varargs setter described above, but also includes semantics of the <code>save()</code> and <code>saveIt()</code> methods.\r\n\r\n<h2>No setters/getters???</h2>\r\n\r\nWell, no. ActiveJDBC will not provide these, and it will not generate them either. However, you can have them if you like:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n\r\npublic class Person extends Model{\r\n   public void setFirstName(String firstName){\r\n      set(\"first_name\", firstName);\r\n   }\r\n}\r\n</pre>\r\n\r\nSame goes for getters. If you are starting out with ActiveJDBC, I suggest you do not write setters and getters, but rather use the provided methods.\r\n    After a day or two you will be surprised you ever wrote them before.','2012-05-07 15:03:59','2012-05-07 15:05:24','record_creation'),(17,'ActiveJDBC - what batch operations are available and how to use them','\r\n<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Batch operations</li>\r\n</ul>\r\n<h1>Batch operations</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\nIn some cases, you will need to make changes or delete to all or some records in a tables. ActiveJDBC provides a couple of convenience methods for this.\r\n\r\n\r\n<h2> Updating all records in table </h2>\r\n\r\nThe static method<code>Model.updateAll()</code> provides a way to update all records in a corresponding table:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson.updateAll(\"last_name = ?\", \"Smith\");\r\n</pre>\r\n\r\nIn the example above, all records in a table PEOPLE will be updates such, that the<code>last_name</code>column will be set to value \"Smith\".\r\n\r\n<h2>Updating selected records in table</h2>\r\nThe static method<code>Model.update()</code>will do the job:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson.update(\"name = ?, last_name = ?\", \"name like ?\", \"Steve\", \"Johnson\", \"%J%\");\r\n</pre>\r\nIn the example above, all records<code>where name like \'%J%\'</code>will be updated to have name = Steve and last name = \"Johnson\". In other words, the first argument to the method is what to update to, the second is conditions for selection, followed by a list of replacement arguments for both.\r\n\r\n\r\n<h2>Updating of updated_at</h2>\r\nBoth batch methods described above will respect ActiveJDBC conventions and will also update the<code>updated_at</code>column to the current system time for all updated records.\r\n\r\n\r\n<h2>Deleting records</h2>\r\nFollowing the same pattern,<code>Model.delete()</code>is a convenient way to delete selected records:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson.delete(\"age > ?\", \"10\");\r\n</pre>\r\n\r\nHere, all records will be deleted where column<code>age</code>has a value greater than 10. This is self-explanatory\r\n\r\n<h2>Deleting all records</h2>\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson.deleteAll();\r\n</pre>\r\nThis does not require explanation.','2012-05-07 15:11:21','2012-05-07 15:12:03','batch_operations'),(18,' ActiveJDBC Validation framework','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Validations</li>\r\n</ul>\r\n<h1>ActiveJDBC Validations</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\n\r\nActiveJDBC has a validation framework that is somewhat reminiscent of !ActiveRecord validation. The validation rules in ActiveJDBC are described in a model definition in a declarative way:\r\n\r\n<h2>Validation of attribute presence</h2>\r\nIn order to add any validation, a model will declare  a static bloc at the top of a class definition, and invoke all validation declaration inside this block:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Person extends Model {\r\n    static{\r\n        validatePresenceOf(\"first_name\", \"last_name\");\r\n    }    \r\n}\r\n</pre>\r\nThe method<code>Model.validatePresenceOf()</code>takes a vararg of strings, which allows to specify a list of attribute names (column names) in one line of code. \r\n\r\n\r\n<h2>Triggering of validation</h2>\r\ntriggering of validations happens under these conditions:\r\n  * Call<code>Model.validate()</code>method (will not throw exception)\r\n  * Call<code>Model.save()</code>method (will not throw exception)\r\n  * Call<code>Model.saveIt()</code>method (will throw exception)\r\n  * Call<code>Model.createIt()</code>method (will throw exception)\r\n\r\nThe semantic difference of<code>save()</code>and<code>saveIt()</code>methods is described on the [RecordCreation] page.\r\n\r\n\r\n<h2>Consuming validation messages</h2>\r\n\r\nAfter the validation triggered, you can retrieve all messages from a model as a collection:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n//...trigger validation\r\n\r\nMap<String, String> errors = myPerson.errors();\r\nString firstNameError = errors.get(\"first_name\");\r\n</pre>\r\n\r\nAs you can imagine, it is very easy to write web applications with form validation using this ActiveJDBC validations.\r\n\r\n<h2>Usage in a web application</h2>\r\nThis is a pseudo-code of a web application controller where a form was submitted:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n\r\npublic void doPost(...){\r\n   Map params = ... // this is a map of HTML form submitted from a web page\r\n   Person p = Person();\r\n   p.fromMap(params); //The model will only pluck values that correspond to it\'s attribute names\r\n   \r\n   if(p.save()){\r\n      //render success page\r\n   }else{\r\n      request.setAttribute(\"errors\", p.errors());\r\n      getServletContext().getRequestDispatcher(\"/results.jsp\").forward(request,response);\r\n   }\r\n}\r\n</pre>\r\n\r\nIn a JSP:\r\n\r\n<pre name=\"code\" class=\"brush:html;\">\r\n\r\n<span style=\"error\">${errors.first_name}</span>\r\n...\r\n<span style=\"error\">${errors.last_name}</span>\r\n...\r\n</pre>\r\nAs you can see, it is trivial to integrate ActiveJDBC into a web application.\r\n\r\n<h2>Customized messages for different attributes</h2>\r\n\r\nYou can call method<code>validatePresenceOf().message()</code>multiple times, providing different attribute names as well as different messages:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Person extends Model {\r\n    static{\r\n        validatePresenceOf(\"first_name\").message(\"Please, provide your first name\");\r\n        validatePresenceOf(\"last_name\").message(\"Please, provide your last name\");\r\n    }    \r\n}\r\n</pre>\r\n\r\n<h2>Validation of numericality</h2>\r\nActiveJDBC like !ActiveRecord also provides other validators, for instance:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Account extends Model {\r\n    static{\r\n        validateNumericalityOf(\"amount\", \"account\", \"total\");\r\n    }\r\n}\r\n</pre>\r\n\r\nLike the<code>validatePresenseOf()</code>, this method also takes in a vararg of strings, which allows to specify a list of attribute names that should have a numeric format.\r\n\r\n<h2>Validation of numericality with additional properties</h2>\r\n\r\nWhen checking numericality of an attribute, you can have a finer control, including specifying that it could be<code>null</code>, providing a range and a custom  message. In fact, all validators allow for custom message.\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Account extends Model {\r\n    static{\r\n        validateNumericalityOf(\"total\")\r\n                .allowNull(true).greaterThan(0)\r\n                .lessThan(100).onlyInteger()\r\n                .message(\"incorrect \'total\'\");\r\n    }\r\n}\r\n</pre>\r\nAgain, ActiveJDBC is using [http://martinfowler.com/bliki/FluentInterface.html Fluent Interfaces] technique, as in many other places. \r\n\r\n<h2>Range validator</h2>\r\nBesides numeric validation, there is also a specific range validator:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Temperature extends Model {\r\n    static{\r\n        int min = 0, max = 100;\r\n        validateRange(\"temp\", min, max).message(\"temperature cannot be less than \" + min + \" or more than \" + max);\r\n    }\r\n}\r\n</pre>\r\nAlthough you can use either numeric or range validators for range, in some cases range validator will have a more concise syntax than numeric one.\r\n\r\n\r\n<h2>Email validator</h2>\r\nThe email validator exists to check a proper format of email (it does not check if email actually exists!)\r\n<pre name=\"code\" class=\"brush:java;\">\r\n\r\npublic class User extends Model {\r\n    static{\r\n        validateEmailOf(\"email\");\r\n    }\r\n}\r\n</pre>\r\n\r\n<h2>Regular expressions validator</h2>\r\nYou can probably guess, that the email validator is a special case of a regular expression validator:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class User extends Model {\r\n    static{\r\n        validateRegexpOf(\"email\", \"\\\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,4}\\\\b\");\r\n    }\r\n}\r\n</pre>\r\nThis validator provides enough freedom to developers who know regular expressions well :)\r\n\r\n<h2>Custom validators</h2>\r\nIf all else fails, and ActiveJDBC does not provide a validator you want, you can extend a ValidatorAdapter class:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic interface Validator {\r\n    void validate(Model m);\r\n    void setMessage(String message);\r\n    String formatMessage(Locale locale, Object ... params);\r\n}\r\n</pre>\r\nor better yet, ValidatorAdapter:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n\r\npublic class CustomValidator extends ValidatorAdapter{\r\n   void validate(Model m){\r\n       boolean valid = true;\r\n      //perform whatever validation logic, then add errors to model if validation did not pass:\r\n\r\n      if(!valid)\r\n         m.addValidator(this, \"custom_error\");\r\n    }\r\n}\r\n</pre>\r\n\r\nOnce you have a custom validation, you can register it with a model like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Person extends Model{\r\n   static{\r\n      validateWith(new CustomValidator()).message(\"custom.message\");\r\n   }\r\n}\r\n\r\n</pre>\r\n\r\n\r\nAnother way to register is outside your model class:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nCustomValidator cv = new CustomValidator();\r\nPerson.addValidator(cv).message(\"blah.blah\");\r\n</pre>\r\n\r\n\r\nafter a validation, you can retrieve an error like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson p = ...\r\np.save();\r\nString errorMessage = p.errors().get(\"custom_error\");\r\n</pre>\r\n\r\nValidators are executed during validation in the order they were added to the model. The<code>validate()</code>method is called from<code>save()</code>and<code>saveIt()</code>\r\n\r\n\r\n<h2>Customization of messages</h2>\r\nActiveJDBC provides stock messages (one for each validator), which may not be appropriate for all projects. For instance,<code>validatePresenseOf()</code>provides a simple message \"value is missing\". In order to customize these messages, ActiveJDBC provides a DSL-ish like facility:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Person extends Model {\r\n    static{\r\n        validatePresenceOf(\"first_name\", \"last_name\").message(\"name.missing\");\r\n    }    \r\n}\r\n</pre>\r\nwhere<code>name.missing</code>is a key from a resource bundle<code>activejdbc_messages</code>.\r\n\r\nAfter a validation process, if there are errors, they are accessible via the<code>p.errors()</code>method, and a specific validation error message is accessed using an attribute name as a message key:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nString firstNameMissingErrorMessage = p.errors().get(\"first_name\");\r\n</pre>\r\n\r\n..or you can use the<code>Errors</code>object returned from<code>errors()</code>method as a<code>Map</code>and process it generically (as is usually the case for web applications).\r\n\r\n\r\n<h2>Parametric validation messages</h2>\r\nIn some cases, you will need to parametrize messages coming from a resource bundle. For instance, in a file<code>activejdbc_messages.properties</code>you would have an entry:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n#activejdbc_messages.properties:\r\ntemperature.outside.limits = Temperature is outside acceptable limits, while it needs to be between {0} and {1}\r\n</pre>\r\n\r\nYou might have a model defined like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Temperature extends Model{\r\n   static{\r\n      validateRange(\"temp\", 10, 2000).message(\"temperature.outside.limits\");\r\n   }\r\n}\r\n</pre>\r\nYou will then create an instance of Temperature, set the values and validate in a code pattern similar to this;\r\n<pre name=\"code\" class=\"brush:java;\">\r\nTemperature temp = new Temperature();\r\ntemp.set(\"temp\", 5000);\r\n\r\nif(!temp.save()){\r\n   String message = temp.errors().get(\"temp\");\r\n   System.out.println(message);// prints: Temperature is outside acceptable limits, while it needs to be between 10 and 2000\r\n}\r\n</pre>\r\n\r\n<h2>Split parameters for validation messages</h2>\r\nIn some cases you know parameter values when declaring a model, but some other parameters are only known in the context where validation is actually used. In this case, you can split parameters between the declaration (static context) and calling for messages (dynamic context);\r\n\r\n\r\nResource bundle:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n#activejdbc_messages.properties:\r\ntemperature.outside.limits = Temperature is outside acceptable limits, while it needs to be between {0} and {1} for user: {2}\r\n</pre>\r\n\r\nModel definition:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Temperature extends Model{\r\n   static{\r\n      validateRange(\"temp\", 10, 2000).message(\"temperature.outside.limits\");\r\n   }\r\n}\r\n</pre>\r\nAs you can see, the message calls for three parameters, but the validator can only set two. At the time of Model definition, the user is not known. However, the user can be provided when the validation fails, and an application calls for an error message:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nTemperature temp = new Temperature();\r\ntemp.set(\"temp\", 5000);\r\n\r\nif(!temp.save()){\r\n   String message = temp.errors().get(\"temp\", user.getName());\r\n   System.out.println(message);// prints: Temperature is outside acceptable limits, while it needs to be between 10 and 2000 for user: Tom\r\n}\r\n</pre>\r\n\r\nThe getter method for Errors class has this signature:<code>get(String attributeName, Object ... params)</code>, which allows to supply more than one parameter.\r\n\r\nThe one rule you have to keep in mind, is that static parameters will be indexed from zero, and dynamic parameters will be appended to static. As in this case, the user name is placed in the message at index {2}.\r\n\r\n\r\n<h2>Internationalization of validation messages (I18N)</h2>\r\nIn cases where there is a need for internationalization of messages, this is easy to accomplish by providing a locale instance to the<code>errors()</code>method.\r\nBut first, you will need to create these messages. ActiveJDBC uses a resource bundle<code>activejdbc_messages</code>. This means:\r\n  *<code>activejdbc_messages.properties</code>- default locale bundle\r\n  *<code>activejdbc_messages_de_DE.properties</code>- German/Germany bundle\r\n  * etc.\r\nAs usual in Java you will need to create a bundle for each locale. \r\nIf you need a localized message during runtime, all you need it to provide a locale to the<code>errors()</code>method of a model. \r\nBuilding on the example above with temperature:\r\n\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n#activejdbc_messages_de_DE.properties:\r\ntemperature.outside.limits = Die Temperatur liegt au?rhalb akzeptabler Grenzen, w?rend es sein muss zwischen {0} und {1}\r\n</pre>\r\n\r\nAt run time, the message will be printed in German if a locale provided is German:\r\n\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nTemperature temp = new Temperature();\r\ntemp.set(\"temp\", 5000);\r\n\r\nif(!temp.save()){\r\n   String message = temp.errors(new Locale(\"de\", \"DE\")).get(temp); //<<<=== provide locale\r\n   System.out.println(message);// prints: Die Temperatur liegt au?rhalb akzeptabler Grenzen, w?rend es sein muss zwischen 10 und 2000\r\n}\r\n</pre>','2012-05-07 15:22:41','2012-12-18 17:22:07','activejdbc_validations'),(19,' ActiveJDBC converters','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Converters</li>\r\n</ul>\r\n<h1>ActiveJDBC Converters</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\nConverters can convert an attribute from one type to another. They are very similar to <a href=\"activejdbc_validations\">Validations</a> \r\nin logic and are declared the same way inside a static block of a class.\r\n\r\nCurrently there are two converters available: date converter and time stamp converter. Both allow setting an attribute value in a form of a string with appropriate format.\r\n\r\n\r\nConverters trigger like validators, during validate(), save() and saveIt() methods, and are in fact validators. If a converter cannot convert from one type to another, it will add an appropriate message to the `model.errors()` collection.\r\n\r\n<h2>Date converter </h2>\r\n\r\nDate converter can convert value for an attribute from formatted string to `java.sql.Date`. Here is an example of a date converter declaration:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Person extends Model {\r\n    static{\r\n        convertDate(\"dob\", \"yyyy-MM-dd\");\r\n    }\r\n}\r\n</pre>\r\nand here how to use it:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson p = new Person();\r\np.set(\"first_name\", \"Marilyn\",\"last_name\", \"Monroe\");\r\np.set(\"dob\", \"1926/6/1\");                     //wrong format\r\np.validate();\r\nSystem.out.println(p.errors().get(\"dob\"));    //prints out: attribute dob does not conform to format: yyyy-MM-dd\r\n\r\np.set(\"dob\", \"1926-06-01\");                   //right format\r\np.validate();\r\nSystem.out.println(p.get(\"dob\").getClass()); //prints out: class java.sql.Date\r\nSystem.out.println(p.get(\"dob\"));            //prints out: 1926-06-01\r\n</pre>\r\n\r\n\r\n<div class=\"row\">\r\n	  <div class=\"span12\">\r\n	      <div class=\"alert alert-info\">	        \r\n	        <strong>Info</strong>\r\n	        <p>\r\n                      In both cases, the text format for date and timestamp needs to conform to \r\n                    <a     href=\"http://download.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html\">java.text.SimpleDateFormat</a>\r\n                </p>\r\n	      </div>\r\n	  </div>\r\n  </div>\r\n\r\n<h2>Timestamp converter</h2>\r\n\r\nTimestamp converter is identical to date converter, but converts to `java.sql.Timestamp`. Here is example of declaration:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Message extends Model {\r\n    static{\r\n        convertTimestamp(\"send_time\", \"yyyy.MM.dd G \'at\' HH:mm:ss z\");\r\n    }\r\n}\r\n</pre>','2012-05-07 15:27:55','2012-05-10 15:38:59','activejdbc_converters'),(20,'ActiveJDBC: Optimistic locking','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Optimistic locking</li>\r\n</ul>\r\n<h1>ActiveJDBC</h1>\r\n<div id=\"generated-toc\"></div>\r\n<h2>Optimistic locking</h2>\r\n\r\n\r\nThe idea of optimistic locking is described here: <a href=\"http://en.wikipedia.org/wiki/Optimistic_concurrency_control\">http://en.wikipedia.org/wiki/Optimistic_concurrency_control</a>\r\n<p>\r\nActiveJDBC provides support for optimistic concurrency via a simple convention: A database table needs to provide a column named `record_version` with a type that is capable to store non-decimal types, such as LONG for MySQL, NUMBER for Oracle, etc.\r\n\r\n\r\n<h2> Creation of a new record </h2>\r\n\r\nLet\'s say you have a model:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Profile extends Model{}\r\n</pre>\r\n\r\nwhich backs a table PROFILES:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n+----+--------------+------------------+\r\n| id | profile_type | record_version   |\r\n+----+--------------+------------------+\r\n</pre>\r\n\r\n\r\nWhen you create a new record:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nProfile.createIt(\"profile_type\", \"home\");\r\n</pre>\r\na new record is inserted into the table:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n+----+--------------+------------------+\r\n| id | profile_type | record_version   |\r\n+----+--------------+------------------+\r\n| 1  |   home       |     1            |\r\n+----+--------------+------------------+\r\n</pre>\r\nThe value 1 in the `record_version` column signifies that this record has not been updated yet.\r\n\r\n<h2> Updating a record </h2>\r\nWhen a record is updated, the value of column `record_version` is incremented by one:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nProfile p = Profile.findById(1);\r\np.set(\"profile_type\", \"work\");\r\np.saveIt();\r\n</pre>\r\n\r\nThe resulting record in the database will look like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n+----+--------------+------------------+\r\n| id | profile_type | record_version   |\r\n+----+--------------+------------------+\r\n| 1  |   work       |     2            |\r\n+----+--------------+------------------+\r\n</pre>\r\nAs you can see, ActiveJDBC tracks versions of the same record.\r\n\r\n<h2> When collisions happen </h2>\r\n\r\nSometimes you might have code that reads the same record from a table in order to be updated. In those cases, the first update succeeds, but the second does not. Let\'s examine this situation:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n1: Profile p1 = Profile.findById(1);\r\n2: Profile p2 = Profile.findById(1);\r\n3:\r\n4: p1.set(\"profile_type\", \"hotel\");\r\n5: p1.saveIt();\r\n6:\r\n7: p2.set(\"profile_type\", \"vacation\");\r\n8: p2.saveIt(); //<<<========= This will throw a StaleModelException\r\n</pre>\r\nIn the code snippet above, at lines 1 and 2, the same record is loaded into models. Then, at line 5, the first one is updated. This will increment the version of the record to 3, and make the model p2 stale.\r\nHenceforth, when you try to save the model p2, you will get an exception. The content of a record in the table at this point will be:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n+----+--------------+------------------+\r\n| id | profile_type | record_version   |\r\n+----+--------------+------------------+\r\n| 1  |   hotel      |     3            |\r\n+----+--------------+------------------+\r\n</pre>\r\n\r\nHere is the output of the !StaleModelException:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nactivejdbc.StaleModelException: Failed to update record for model \'class com.acme.Profile\', with id = 1 and record_version = 2. \r\nEither this record does not exist anymore, or has been updated to have another record_version.\r\n</pre>\r\nThis message provides enough detail to understand what happened.\r\n\r\n<h2>How optimistic locking is engaged</h2>\r\n\r\nThe rule is very simple, ActiveJDBC finds `record_version` column and dynamically configures itself to handle optimistic locking. This means that if this column is present, optimistic locking will be engaged, if not present, it will not be engaged. If you did not have this column, and later added it, you need to restart the system, because ActiveJDBC scans database schema at the start.\r\n\r\nConversely, if you want to turn it off, drop column `record_version` and restart, this will turn it off.\r\n\r\n<h2>Conclusion</h2>\r\nApplication developers using optimistic locking should be aware of this exception (even though it is a RuntimeException) and build controls into their code to intercept and handle them appropriately.\r\n','2012-05-15 11:36:41','2012-05-15 11:39:05','optimistic_locking'),(21,'One-To-Many Associations','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">One-to-many associations</li>\r\n</ul>\r\n<h1>One-to-many associations</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\n\r\n<h2>Introduction</h2>\r\nOne to many associations are pretty common in relational schemas. Examples are: university has students, library has books, etc. There are two sides to a one to many association, the \"parent\" *has a* \"child\" and a \"child\" *belongs to* \"parent\".\r\n\r\nActiveJDBC supports this type of a relationship  in two ways: 1. Inferred and 2. Overridden\r\n\r\n<h2>Database schema</h2>\r\nThis is a database schema (for MySQL):\r\n<pre name=\"code\" class=\"brush:java;\">\r\nCREATE TABLE users (\r\nid  int(11) DEFAULT NULL auto_increment PRIMARY KEY,\r\nfirst_name VARCHAR(56),\r\nlast_name VARCHAR(56),\r\nemail VARCHAR(56));\r\n\r\n\r\nCREATE TABLE addresses (\r\nid  int(11) DEFAULT NULL auto_increment PRIMARY KEY,\r\naddress1 VARCHAR(56),\r\naddress2 VARCHAR(56),\r\ncity VARCHAR(56),\r\nstate VARCHAR(56),\r\nzip VARCHAR(56),\r\nuser_id int(11));\r\n</pre>\r\n\r\n<h2>Models</h2>\r\n\r\nUser:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class User extends Model {}\r\n</pre>\r\n\r\nAddress:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Address extends Model {}\r\n</pre>\r\n\r\nAs you can see from the schema, the table ADDRESSES, has a column called <pre name=\"code\" class=\"brush:java;\">user_id</pre>. Just because table ADDRESSES has this column, ActiveJDBC assumes that there is a one to many relationship here, and makes special arrangements.\r\nBy doing so, the framework (internally) creates two associations (User has many Address(es) and Address belongs to User).\r\n\r\nThe design of ActiveJDBC tries to make usage of the APIs as clean and concise as possible.\r\n\r\n\r\n<h2>Adding children</h2>\r\nAdding children is the same as in any other association:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nuser.add(address);\r\n</pre>\r\n\r\nAs in other associations, the requirement is that the parent record in DB must exist already. This way, a child model is immediately saved to its appropriate table.\r\n\r\n<p>\r\n   <div class=\"row\">\r\n          <div class=\"span12\">\r\n              <div class=\"alert alert-info\">\r\n                <strong>Info</strong>\r\n                <p>\r\nActiveJDBC is a pass-through model. It does not retain references to child models.\r\n                    </p>\r\n              </div>\r\n          </div>\r\n      </div>\r\n\r\n\r\nIn case the \'user\' model is new (has not been save yet), the method `user.add(child)` will throw an exception.\r\n\r\n<h2>How to get children</h2>\r\nNothing can be simpler:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nList<Address> addresses = user.getAll(Address.class);\r\n</pre>\r\n\r\nHere the Address.class needs to be passed in because a model User might have many other relationships with models other than Address.class.\r\n\r\n\r\n<h2>Conditional selection of related objects</h2>\r\nSometimes you need to collect children of a model based on a selection criteria:\r\nIn such cases, use the `get(type)` method:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nList<Address> shippingAddresses = customer.get(Address.class, \"address_type = ?\", \"shipping\");\r\n</pre>\r\nOf course it is expected that the table ADDRESSES will have a column \"address_type\".\r\n\r\n\r\n<h2>How to get Parent</h2>\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nUser user = address.parent(User.class);\r\n</pre>\r\nHere, we have to pass a <pre name=\"code\" class=\"brush:java;\">User.class</pre> to indicate which parent type we want. This is because a model could have multiple parents (belong to more than one parent)\r\n\r\n<h2>Deleting Parent</h2>\r\nA simple way to delete a parent is:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nUser u = address.parent(User.class);\r\n\r\nu.delete();\r\n</pre>\r\n\r\nIf you have a referential integrity in your DB and table ADDRESSES has records associated with this user, then you will get an exception from DB. If you do not have child records, this user will be deleted. If you have records in the ADDRESSES table and no referential integrity constraint, the user will be deleted and you will have orphan records in the ADDRESSES table. In order to delete a user and all it\'s child records, execute this method:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nu.deleteCascade();\r\n</pre>\r\n\r\nThis method will walk over all parent/child relationships and delete the user and all child records associated with it.\r\n\r\nThere is also a convenience methods that will do the same:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nu.delete(true);//true for cascade.\r\n</pre>\r\n\r\n<h2>Override Conventions</h2>\r\nIn cases where a surrogate foreign key is already present and has a name that does not follow the ActiveJDBC conventions, you could easily override it like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n@BelongsTo(parent = User.class, foreignKeyName = \"usr_id\")\r\npublic class Address extends Model {}\r\n</pre>\r\nThe @!BelongsTo annotation will ensure that API on both ends will work. ActiveJDBC does not have annotation @!HasMany, since I believe this would be redundant.\r\n\r\nIn cases a model belongs to many parents, you can use this annotation:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n@BelongsToParents({\r\n@BelongsTo(foreignKeyName=\"key_id\",parent=Keyboard.class),\r\n@BelongsTo(foreignKeyName=\"mother_id\",parent=Motherboard.class)\r\n})\r\n</pre>\r\nAs usual though, you only need it if names of foreign keys do not conform to the conventions.\r\n\r\n<h2>Foreign Key</h2>\r\nThe Foreign Key in the ADDRESSES table does not have to be a real Foreign Key constraint. ActiveJDBC(much like ActiveRecord) does not check for it\'s presence. As long as there is a column named according to this convention, ActiveJDBC assumes that there is a relationship. It does not hurt to have the actual constraint in the DB if you are using other means of accessing data.\r\n\r\n\r\n<h2>Conclusion</h2>\r\nActibeJDBC makes it very easy to setup associations. If you work with a new schema, you just need to follow conventions (by including a logical foreign key into a child table).\r\nIn cases when you already have an existing schema, ActiveJDBC allows to override conventions with simple annotations','2012-05-25 14:08:19','2012-05-25 14:16:10','one_to_many_associations'),(22,'Many-to-many associations','#summary explanation on Many to Many associations in ActiveJDBC\r\n\r\n\r\n<h2>Introduction</h2>\r\nOften times the database-driven applications require many to many relationships. \r\nThese are the kind where an entity can have many other entities and also belong to the same type of entities.\r\nExamples in real life are: doctor treats many patients, and a patient sees many doctors. Another\r\nexamples is when a university course has many students and a student has registered for many courses.\r\nIn order to replicate this type of a relationship, usually three tables are created, one for the first type of entity, the other \r\nfor another type of entity and a middle table which binds entities from the first two tables. \r\n\r\n<h2>Example tables</h2>\r\n\r\nLet\'s see an example based on doctors and patients.\r\n\r\nTable DOCTORS:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n+----+------------+-----------+-----------------+\r\n| id | first_name | last_name | discipline      |\r\n+----+------------+-----------+-----------------+\r\n|  1 | John       | Doe       | otholaringology | \r\n|  2 | Hellen     | Hunt      | dentistry       | \r\n+----+------------+-----------+-----------------+\r\n</pre>\r\nTable PATIENTS:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n+----+------------+-----------+\r\n| id | first_name | last_name |\r\n+----+------------+-----------+\r\n|  1 | Jim        | Cary      | \r\n|  2 | John       | Carpenter | \r\n+----+------------+-----------+\r\n</pre>\r\nAs you can see, there is nothing in these to tables that tell us that doctors and patinets are somehow related.\r\nThe third table binds entities between the doctors and patients table:\r\n\r\nTable DOCTORS_PATIENTS:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n+----+-----------+------------+\r\n| id | doctor_id | patient_id |\r\n+----+-----------+------------+\r\n|  1 |         1 |          2 | \r\n|  2 |         1 |          1 | \r\n|  3 |         2 |          1 | \r\n+----+-----------+------------+\r\n</pre>\r\nLooking at this table, we can discern that a doctor with ID = 1 (John Doe) has two patients: Jim Cary and John Carpenter. \r\nHowever Jim Cary also sees doctor Hellent Hunt.\r\nLet\'s see what kind of a support ActiveJDBC provides when it comes to many to many relationship.\r\nWe will use the same table we outlined above.\r\n\r\n<h2>Models</h2>\r\n\r\nModel for table DOCTORS:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Doctor extends Model {}\r\n</pre>\r\n\r\nModel for table PATIENT:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Patient extends Model {}\r\n</pre>\r\n\r\nModel for table DOCTORS_PATIENTS:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class DoctorsPatients extends Model {}\r\n</pre>\r\n\r\n<p></p>\r\n\r\n  <div class=\"row\">\r\n          <div class=\"span12\">\r\n              <div class=\"alert alert-info\">\r\n                <strong>Info</strong>\r\n                <p>\r\nIn cases when you override conventions, creation of a model that represents a join table is optional\r\n                    </p>\r\n              </div>\r\n          </div>\r\n      </div>\r\n\r\nAs usual, ActiveJDBC will use inflections to map these models to the tables.\r\nIt also expects the DOCTORS_PATIENTS table to have <pre name=\"code\" class=\"brush:java;\">doctor_id</pre> and <pre name=\"code\" class=\"brush:java;\">patient_id</pre> columns. If everything is named appropriately\r\n(there are ways to override these conventions, see below), then the many to many relationships are configured across Doctor and Patient models. \r\nAll the usual CRUD operations are supported right out of the box:\r\n\r\n<h2>Many to many operations=\r\n\r\n<h3>Select all related objects</h3>\r\n\r\nThe select API for many to many is identical that of one to many, The framework is smart enough figure this out:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n//Let\'s lookup a doctor:\r\nDoctor doctor = Doctor.findById(1);\r\n//get all patients of this doctor\r\nList<Patient> patients = doctor.getAll(Patient.class);\r\nSystem.out.println(\"Doctor 1 has \" + patients.size() + \" patient(s)\");//prints \"Doctor 1 has 2 patient(s)\"\r\n\r\n//Lookup a second doctor:\r\ndoctor = Doctor.findById(2);\r\npatients = doctor.getAll(Patient.class);\r\nSystem.out.println(\"Doctor 2 has \" + patients.size() + \" patient(s)\");//prints \"Doctor 1 has 1 patient(s)\"\r\n</pre>\r\n\r\nThe framework will generate appropriate select statement and execute it across two tables.\r\nThis allows focusing on objects and abstract away from tabular nature of data in the DB.\r\n\r\n<h3>Conditional selection of related objects</h3>\r\n\r\nActiveJDBC provides a way to filter related objects. Let\'s say that there are tables PROGRAMMERS, PROJECTS and PROGRAMMERS_PROJECTS. In this case, we will create a model `Assignments` that will represent the join table:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n@Table(\"programmers_projects\")\r\npublic class Assignments extends Model{}\r\n</pre>\r\n\r\nas well as other models:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Project extends Model{}\r\n..\r\npublic class Programmer extends Model{}\r\n</pre>\r\n\r\n\r\nYou can treat a Many-to-many relationship as two one-to-many relationships. In this case, you could say that a project has many assignments and a programmer has many assignments. Armed with this knowledge, we can write some code:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nProgrammer programmer = Programmer.createIt(\"first_name\", \"Jim\", \"last_name\", \"Garnoe\");\r\n\r\nAssignment assignment = Assignment.createIt(\"duration_weeks\", 3);\r\n//use one to many notation here:\r\nprogrammer.add(assignment);\r\nProject project1 = Project.createIt(\"project_name\", \"Prove theory of everything\");\r\nproject1.add(assignment);\r\n\r\n//use many to many notation:\r\nProject project2 = Project.createIt(\"project_name\", \"Find meaning of life\");\r\nprogrammer.add(project2);\r\n</pre>\r\n\r\nat this point, the table PROGRAMMERS_PROJECTS will have this content:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n+----+----------------+------------+---------------+---------------------+---------------------+\r\n| id | duration_weeks | project_id | programmer_id | created_at          | updated_at          |\r\n+----+----------------+------------+---------------+---------------------+---------------------+\r\n|  1 |              3 |          1 |             1 | 2010-10-04 14:08:04 | 2010-10-04 14:08:04 |\r\n|  2 |           NULL |          2 |             1 | 2010-10-04 14:08:04 | 2010-10-04 14:08:04 |\r\n+----+----------------+------------+---------------+---------------------+---------------------+\r\n\r\n</pre>\r\nWhere the first assignment is set for 3 weeks, and a second has no duration_weeks value.\r\n\r\nHaving this data, we can query many to many relationship using a select filter on a join table:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nList<Project> projects = programmer.get(Project.class, \"duration_weeks = ?\", 3);\r\n</pre>\r\n\r\nThe result will be only one record.\r\n\r\n\r\n<h3>Checking for association</h3>\r\nThis is pretty simple:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nSystem.out.println(Patient.belongsTo(Doctor.class));//prints \"true\"\r\n</pre>\r\nBWT, the same API will also work for one to many relationship.\r\n\r\n<h3>Adding new entries</h3>\r\nIn many to many associations, there are no parents or children, as both sides of the association are equal. \r\n\r\nAdding new entries then is pretty easy:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nDoctor doctor = Doctor.findById(1);\r\nPatient patient = Patient.create(\"first_name\", \"Jim\", \"last_name\", \"Smith\");\r\ndoctor.add(patient);\r\n</pre>\r\nHere you see an example of a shortcut for creation of models with the <pre name=\"code\" class=\"brush:java;\">create()</pre> method.\r\nAgain, the method for adding a new entity is the same for one to many relationship, and the framework figures out what to do based on what it knows\r\nabout the models.\r\nHere, we are adding a newly created patient, which is does not exist in the database yet. In this case, the framework will create two new \r\nrecords in the DB: one for a new patient, and one in the DOCTORS_PATIENTS table that binds a current doctor and a new patient.\r\n\r\nIn the case where a patient exists already, it will only add a join record in the DOCTORS_PATIENTS table.\r\n\r\n<h3>Removing Entries</h3>\r\nRemoving is also easy:\r\n<pre name=\"code\" class=\"brush:java;\">\r\ndoctor.remove(patient);\r\n</pre>\r\nHere, only a join table record is being removed, the actual patient record stays unchanged. In this case, the API for removing a child is \r\nthe same for one to many an many to many relationships, but semantics are different. In one to many association the child record will be \r\nremoved from the DB.\r\n\r\n<h3>Deleting Entries</h3>\r\n\r\nDeleting entries is similar to deleting in One to Many associations:\r\n<pre name=\"code\" class=\"brush:java;\">\r\ndoctor.deleteCascade();\r\n</pre>\r\n\r\nHowever, semantics are different. In many to many relationships, the <pre name=\"code\" class=\"brush:java;\">model.deleteCascade()</pre> method will do more than just delete this record. It will also discover all associated join tables and will delete records from them that match this models\' ID value, effectively dis-associating it from all many to many relationships. This process is efficient because it will issue one DELETE statement per relationship.\r\n\r\n\r\n<h2>Overriding associations</h2>\r\nIn case the naming conventions cannot be used, you can override the convention to let the framework know which models are bound\r\nin many to many association:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n@Many2Many(other = Course.class, join = \"registrations\", sourceFKName = \"astudent_id\", targetFKName = \"acourse_id\")\r\npublic class Student extends Model {}\r\n</pre>\r\nHere, \"other\" is a model that represents the other end of the relationship, \"join\" is a name of a join table (table in the middle),\r\nsourceFKName is a source foreign key name. A source is this model, in this case it is Student. This means that the framework will \r\nexpect to find a column \"astudent_id\" in the table \"registrations\" and will assume that it contains keys of records in the \"student\" table.\r\ntargetFKName is similar to the sourceFKName, but stands for a column \"acourse_id\" in the table \"registrations\" that contains keys to the \r\nrecords in the \"courses\" table. \r\n\r\nThe annotation @Many2Many is one-sided. This means that it provides enough information to the framework, and there is no need \r\nto add another one to the model Course (it will not break if you do though). ActiveJDBC follows DRY principle as much as possible.\r\n\r\n<p>\r\n\r\n    <div class=\"row\">\r\n          <div class=\"span12\">\r\n              <div class=\"alert alert-info\">\r\n                <strong>Info</strong>\r\n                <p>\r\n\r\nNOTE: in case of using @Many2Many annotation, creation of a model that represent a join table is not optional.\r\n                    </p>\r\n              </div>\r\n          </div>\r\n      </div>\r\n\r\n<h2>Real models for join tables</h2>\r\nJoin tables are represented by real models, ActiveJDBC handles it transparently.\r\nTo illustrate the above examples, for doctor - patient example, you might want to indicate where a specific patient is treated and you would then add \r\na new column to the DOCTORS_PATIENTS table called LOCATION. Then you would define a model like so:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n@Table(\"DOCTORS_PATIENTS\")\r\nclass DocPat extends Model{}\r\n</pre>\r\n\r\nIn the case of the student/course, the join table already has a good name, so it is easy to define a new model:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nclass Registration extends Model{}\r\n</pre>\r\nThe table REGISTRATIONS might have additional data, such as registration type, etc.\r\n','2012-05-25 14:22:56','2012-05-25 14:34:55','many_to_many_associations'),(23,'Polymorphic associations','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Polymorphic associations</li>\r\n</ul>\r\n<h1>Polymorphic associations</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\n<h2> Introduction</h2>\r\nActiveJDBC polymorphic associations are similar to !ActiveRecord polymorphic associations. You can use PM in cases when you have several one to many relationships that you could aggregate because for all the parents, the children are similar.\r\n\r\nFor example, imagine that the entities in your system that will need to be tagged. For instance, you have products and you have reviews. Both will need to be tagged. A naive implementation would be to create two one to many relationships:\r\n\r\n  * Product has many ProductTag(s)\r\n  * Review has many ReviewTag(s)\r\n\r\nThis will work.. kind of, but this simplified approach will violate a DRY principle because the <code>PRODUCT_TAG</code> and <code>REVIEW_TAG</code> tables will be identical (except for names!).\r\n\r\nA better approach would be to use Polymorphic associations. In the PM, you would create one table called \'TAGS\', and add two columns to this table, besides the ones that you need:\r\n<p>\r\n<ul>\r\n<li><code>PARENT_ID</code></li>\r\n<li><code>PARENT_TYPE</code></li>\r\n</ul>\r\nAfter this, you will need to provide one last bit of information to the framework by specifying relationships:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n\r\npublic class Product extends Model{}\r\n\r\npublic class Review extends Model{}\r\n\r\n@BelongsToPolymorphic(parents = {Product.class, Review.class})\r\npublic class Tag extends Model{}\r\n</pre>\r\n\r\nThis annotation tells ActiveJDBC that Product has many Tags and Review has many tags. The annotation itself is easy to understand if you read it aloud.\r\n\r\nOnce the setup is done, you can proceed to use the models as normal one to many associations:\r\n\r\n<h2>Operations on polymorphic associations</h2>\r\n\r\nOperations themselves are no different from regular ActiveJDBC one to many operations:\r\n\r\n<h3>Adding and searching for polymorphic children</h3>\r\n<pre name=\"code\" class=\"brush:java;\">\r\nProduct p =  Product.findById(100);\r\np.add(Tag.create(\"tag\", \"basket\"));\r\np.add(Tag.create(\"tag\", \"toy\"));\r\nList<Tag> tags = p.getAll(Tag.class);\r\n...iterate\r\n\r\nReview customerReview =  Review.findById(2024);\r\ncustomerReview.add(Tag.create(\"tag\", \"fun\"));\r\ncustomerReview.add(Tag.create(\"tag\", \"useful\"));\r\nList<Tag> tags = customerReview.getAll(Tag.class);\r\n... iterate\r\n</pre>\r\n\r\nThe table TAGS content might look like this after operations above:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n+----+---------+--------------------------------+\r\n| id | tag     | parent_id | parent_type        |\r\n+----+------------+-----------------------------+\r\n|  1 | toy     |       100 | com.acme.Product   |\r\n|  2 | basket  |       100 | com.acme.Product   |\r\n|  3 | fun     |      2024 | com.acme.Review    |\r\n|  4 | useful  |      2024 | com.acme.Review    |\r\n+----+---------+--------------------------------+\r\n</pre>\r\n\r\n<h3>Conditional search for polymorphic children</h3>\r\n\r\nWhile the <code>getAll(type)</code> method returns all relations, the <code>get(type)</code> method allows for a selection criteria on the child table:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nList<Tag> tags = product.get(Tag.class, \"tag = ?\", \"toy\");\r\n</pre>\r\n\r\n\r\n<h3>Removing polymorphic children</h3>\r\n\r\nRemoving children is as easy as expected;\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nProduct toyBasket =  Product.findById(100);\r\nTag t = Tag.findById(1);\r\ntoyBasket.remove(t);\r\n</pre>\r\n\r\n\r\n<h3>Deleting polymorphic parents</h3>\r\n\r\nWhen deleting a record that is a parent to polymorphic children, you have two options:\r\n  * Only delete the parent itself. This will leave orphan children:\r\n<pre name=\"code\" class=\"brush:java;\">\r\ntoyBasket.delete();\r\n</pre>\r\n\r\n  * Delete parent along with all the children:\r\n<pre name=\"code\" class=\"brush:java;\">\r\ntoyBasket.deleteCascade(); // or toyBasket.delete(true);\r\n</pre>\r\n\r\nThe latter will delete the parent along with all associated polymorphic children.\r\n\r\n<h3>Finding polymorphic parent</h3>\r\nActiveJDBC also provides a way to navigate from children to parents in relationships:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nTag t = Tag.findById(1);\r\nProduct p = t.parent(Product.class);\r\n...\r\n</pre>\r\n\r\n<h2>Override standard parent type values</h2>\r\nIn some cases, it is not possible to have a fully qualified class name in the \"parent_type\" column. This is usually a case when the same table backs a different ORM which also supports polymorphic associations (!ActiveRecord for example).\r\n\r\nWhen faced with this problem, you can use annotation to override default behavior:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n@BelongsToPolymorphic(\r\nparents     = { Vehicle.class, Mammal.class},\r\ntypeLabels  = {\"Vehicle\",     \"Mammal\"} )\r\npublic class Classification extends Model {}\r\n</pre>\r\n\r\nThis defines polymorphic associations between models Classification, Mammal and Vehicle, such that the \"parent_type\" column of CLASSIFICATIONS table will contain values \"Vehicle\" and \"Mammal\" for corresponding parent records from VEHICLE and MAMMAL tables.\r\nThe order of parent classes and type labels is important, they must correspond to one another.\r\n\r\nHere is an example of CLASSIFICATIONS table:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n+----+---------------+---------------------------+\r\n| id | name          | parent_id | parent_type   |\r\n+----+---------------+---------------------------+\r\n|  1 | four wheeled  |       100 | Vehicle       |\r\n|  2 | sedan         |        23 | Vehicle       |\r\n|  3 | four legged   |      2024 | Mammal        |\r\n|  4 | furry         |      2023 | Mammal        |\r\n+----+------=--------+-----------+---------------+\r\n</pre>\r\n','2012-05-25 14:36:30','2012-07-13 11:28:43','polymorphic_associations'),(24,'Auto-generated fields','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Auto-generated fields</li>\r\n</ul>\r\n<h1>Auto-generated fields</h1>\r\n<div id=\"generated-toc\"></div>\r\n<h2> Introduction </h2>\r\n\r\nLike ActiveRecord, ActiveJDBC will enter special values into  columns that are named according to conventions.\r\n\r\n<h2>created_at </h2>\r\nIf a table that a model represents has this column (and the column type is one that corresponds to <code>java.sql.Timestamp</code>), \r\nthen a model will enter value into this column only once when a new record is created. Successive updates of even new model \r\ninstances that represent this specific record will not touch data in this column, hence your application logic can rely in this value.\r\n\r\n<h2> updated_at </h2>\r\n\r\nThis column will be updated each time there an update to an existing record via ActiveJDBC Model API.\r\n\r\n<h2>Example: updated_at, created_at</h2>\r\nLet\'s say we have an empty table PEOPLE:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n+----+------------+-----------+-----------------+-----------------+\r\n| id | first_name | last_name | created_at      | updated_at      |\r\n+----+------------+-----------+-----------------+-----------------+\r\n</pre>\r\n\r\nA model will look like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Person{}\r\n</pre>\r\n\r\nLet\'s add some records:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson p = new Person();\r\np.set(\"first_name\", \"John\", \"last_name\", \"Smith\");\r\np.saveIt();\r\n</pre>\r\n\r\nAt this point, we will have the following record in the DB:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n+----+------------+-----------+---------------------+----------------------+\r\n| id | first_name | last_name | created_at          | updated_at           |\r\n+----+------------+-----------+---------------------+----------------------+\r\n| 1  | John       | Smith     | 2010-08-12 10:36:02 | 2010-08-12 10:36:02  |\r\n+----+------------+-----------+---------------------+----------------------+\r\n</pre>\r\n\r\nAs you can see, the dates are the same for <code>created_at</code> and <code>updated_at</code>.\r\n\r\nThen, within the same program or another, we will do the following:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson john = Person.findById(1);\r\np.set(\"first_name\", \"John\", \"last_name\", \"Smithe\");\r\np.saveIt();\r\n</pre>\r\n\r\nWe corrected the last name from \"Smith\" to \"Smithe\". After this operation, the same record will look like this:\r\n\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n+----+------------+-----------+---------------------+----------------------+\r\n| id | first_name | last_name | created_at          | updated_at           |\r\n+----+------------+-----------+---------------------+----------------------+\r\n| 1  | John       | Smith     | 2010-08-12 10:36:02 | 2010-08-13 12:45:22  |\r\n+----+------------+-----------+---------------------+----------------------+\r\n</pre>\r\n\r\nThe <code>updated_at</code> column reflects when this record was last updated.','2012-05-25 14:57:51','2012-05-25 15:03:05','autogenerated_fields'),(25,'Transactions','\r\n<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Transactions</li>\r\n</ul>\r\n<h1>Transactions</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\n<h2>Introduction</h2>\r\n\r\nThe goal of AciveJDBC from the ground up was to be a very thin veneer on top of JDBC. As such, the attention was given to simplify the DB access API, but at the same time not take control away from a developer.\r\n\r\n<h2>Basic flow of DB program </h2>\r\nIn any DB - backed program, you would:\r\n\r\n<ol>\r\n    <li>Open connection</li>\r\n    <li>Do stuff</li>\r\n    <li>Close connection</li>\r\n\r\n</ol>\r\n\r\nUsually in Java there is an explicit connection or a manager object (EntityManager in JPA, SessionManager in Hibernate, etc.). Such an object is absent in ActiveJDBC.\r\n\r\n<h2>Simple ActiveJDBC Example</h2>\r\nHere is an example of the most basic of the ActiveJDBC applicaitons:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic static void main(String[] args) {\r\nBase.open(\"com.mysql.jdbc.Driver\", \"jdbc:mysql://localhost/test\", \"the_user\", \"the_password\");\r\n\r\nEmployee e = new Employee();\r\ne.set(\"first_name\", \"John\");\r\ne.set(\"last_name\", \"Doe\");\r\ne.saveIt();\r\n\r\nBase.close();\r\n}\r\n</pre>\r\n\r\nThe call <code>Base.open()</code> opens a connection and attaches it to the current thread. All subsequent methods of all models reuse this connection. The call <code>Base.close()</code> closes connection and removes it from the current thread.\r\n\r\n<h2>Transaction related APIs</h2>\r\n...so far so good, but to transactions. ActiveJDBC does provide a couple of transaction related convenience calls:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nBase.commitTransaction();\r\n</pre>\r\n\r\nand\r\n<pre name=\"code\" class=\"brush:java;\">\r\nBase.rollbackTransaction();\r\n</pre>\r\n\r\nBoth of these methods call <code>java.sql.Connection.commit()</code> and  <code>java.sql.Connection.rollback()</code> appropriately, wrapping exceptions and logging events at INFO level.\r\n\r\n\r\nAs you can see, ActiveJDBC is not trying to do much here, just trying to not get in the way.\r\n\r\nIn cases where you need a finer control, you can get a current connection and perform pure JDBC operations on it:\r\n<pre name=\"code\" class=\"brush:java;\">\r\njava.sql.Connection con = Base.connection();\r\ncon.setAutocommit(false);\r\n...//or:\r\nBase.connection().setAutocommit(false);\r\n</pre>\r\n\r\n<h2>Transacted ActiveJDBC Example</h2>\r\nThis means that a simple program using transactions will look like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic static void main(String[] args) {\r\ntry{\r\nBase.open(\"com.mysql.jdbc.Driver\", \"jdbc:mysql://localhost/test\", \"the_user\", \"the_password\");\r\n\r\nBase.connection().setAutocommit(false);\r\nEmployee e = new Employee();\r\ne.set(\"first_name\", \"John\");\r\ne.set(\"last_name\", \"Doe\");\r\ne.saveIt();\r\nBase.commitTransaction();\r\ncatch(Exception e){\r\nBase.rollbackTransaction();\r\n}finally{\r\nBase.close();\r\n}\r\n}\r\n\r\n</pre>\r\n\r\n<h2>Transactions with JNDI </h2>\r\nUsually though, a connection is requested from a pool of a container, and transaction configuration is already provided by container configuration. In these cases, the usage is the same (almost), but you have to be aware that that some calls might not succeed, or you might have unexpected side effects by the driver. For example, if you request a connection from a pool, the transaction might start then, and when you call:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nBase.connection.setAutocommit(true/false);\r\n</pre>\r\n, you might accidentally commit a transaction in progress (...or driver will ignore your call and do nothing).\r\n\r\nActiveJDBC does not add anything special here to what J2EE and JDBC already provide.\r\n\r\nHere is an example of ActiveJDBC used in a MDB:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n\r\n\r\npublic void onMessage(Message m){\r\nBase.open(\"myConnectionJNDIName\");\r\nTextMessage tm = (TextMessage)m;\r\nString content = tm.getText();\r\nString name = tm.getStringProperty(\"name\");\r\ntry{\r\nArticle.create(\"name\", name, \"content\", content).saveIt();\r\n}\r\ncatch(Exception e){\r\nctx.setRollbackOnly(); // == this will send the message back into queue\r\n}\r\nfinally{\r\nBase.close();//always close connection\r\n}\r\n}\r\n\r\n</pre>\r\nIn the example above, the container will manage transactions. It will roll back both: the JDBC, as well as JMS transactions.','2012-07-12 14:54:32','2012-07-12 14:55:28','transactions'),(26,'caching','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Caching</li>\r\n</ul>\r\n<h1>Caching</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\n<h2> Introduction</h2>\r\n\r\nCaching is an integral part of every major system, It improves performance, reduces IO and makes overall user experience more pleasurable. Caching in ActiveJDBC works on the level of query and creation of model instances. For instance, the call:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nList<Library> illLibs = Library.where(\"state = ?\", \"IL\");\r\n</pre>\r\nmight call into DB, or a result can come from cache, depending how cache and specifically model `Library` was configured\r\n\r\n<h2>Cache annotation</h2>\r\nActiveJDBC provides annotation to specify queries against which tables will be cached:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n@Cached\r\npublic class Library extends Model {}\r\n</pre>\r\n\r\nAs in other cases, this is a declaration that marks a model as \"cachable\". If you enable logging (by providing a system property `activejdbc.log`), you will see extensive output from ActiveJDBC, similar to this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n3076 [main] INFO activejdbc.DB - Query: \"SELECT * FROM libraries WHERE id = ?\", with parameters: [1], took: 0 milliseconds\r\n3076 [main] INFO activejdbc.cache.QueryCache - HIT, \"SELECT * FROM libraries WHERE id = ?\", with parameters: [1]\r\n3077 [main] INFO activejdbc.DB - Query: \"INSERT INTO libraries (address, state, city) VALUES (?, ?, ?)\", with parameters: [123 Pirate Street, CA, Bloomington], took: 1 milliseconds\r\n3077 [main] INFO activejdbc.cache.QueryCache - table cache purged for: libraries\r\n3077 [main] INFO activejdbc.cache.QueryCache - table cache purged for: books\r\n3077 [main] INFO activejdbc.cache.QueryCache - MISS, \"SELECT * FROM libraries WHERE id = ?\", with parameters: [1]\r\n3078 [main] INFO activejdbc.DB - Query: \"SELECT * FROM libraries WHERE id = ?\", with parameters: [1], took: 0 milliseconds\r\n</pre>\r\n\r\n<h2>Cache Configuration (AJ Version 1.1 and above)</h2>\r\n\r\nThe new cache configuration includes providing a cache manager class name in the  file `activejdbc.properties`. This file will have to be on the root of classpath.\r\nHere is one example:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n#inside file: activejdbc.properties\r\n# use OSCache\r\ncache.manager=org.javalite.activejdbc.cache.OSCacheManager\r\n#or EHCache:\r\n#cache.manager=org.javalite.activejdbc.cache.EHCacheManager\r\n</pre>\r\n\r\nHere two things happen: 1. Cache in general is enabled (it is not enabled even if you have @Cached annotations on classes), and 2. AJ will be using OSCacheManager as implementation of cache.\r\n\r\n\r\n<h2>Cache Configuration (AJ Version 1.0 and below)</h2>\r\n\r\nIn order to enable caching (even if you have @Cache annotations!) you have to have a property file on the classpath called <code>activejdbc.properties</code>. This file needs to have one line of code:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n#inside file: activejdbc.properties\r\ncache.enabled=true\r\n</pre>\r\n\r\nWithout this file with one property no caching will be turned on.\r\n\r\n\r\n<h2>Automatic cache purging</h2>\r\n\r\nIf you examine the log from above, you will see that after an insert statement into the \"LIBRARIES\" table, the system is purging cache related to this table, as well as \"BOOKS\" table. ActiveJDBC does this since the cache in memory might be potentially of out sync with the data in the DB, and hence will be purged. Related tables\' caches are also purged. Since there exists relationship: library has many books,  the books cache could also be stale, and this is a reason why a table \"BOOKS\" purged as well.\r\n\r\n<h2>Manual cache purging</h2>\r\n\r\nIf you want to manually purge caches (in cases you make destructive data operations outside Model API), you can do so:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nactivejdbc.cache.QueryCache.instance().purgeTableCache(\"books\");\r\n</pre>\r\n\r\nor:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nBooks.purgeCache();\r\n</pre>\r\n\r\n\r\n<h2>What to cache</h2>\r\nWhile caching is a complex issue, I can suggest caching predominantly lookup data. Lookup data is something that does not change very frequently. If you start caching everything, you might run into a problem of cache thrashing where you fill cache with data, and purge it soon after, without having a benefit of caching. Instead of improving performance, you will degrade it with extra CPU, RAM and IO (is cluster is configured) used and little or no benefit of having a cache in the first place.\r\n\r\n<h2>Things to be careful about</h2>\r\nActiveJDBC manages caches for models and  their respective relationships (read above), but in some cases you will use a query that ties together unrelated models:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nList<User> users = User.where(\"id not in (select user_id from restricted_users)\");\r\n</pre>\r\n\r\nIf there exists a model User that is cached, and model RestrictedUser, and these tables/models have no relationship, then the line above could present a logical problem. If you execute the line above, and later change content of RESTRICTED_USERS table, then the query above will not see the change, and will return stale data. Developers need to be aware of this, and deal with  these issues carefully. Whenever you change data in RESTRICTED_USERS table, please purge User model:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nUser.purgeCache();\r\n</pre>\r\n\r\n\r\n<h2>Cache providers</h2>\r\n\r\n<div class=\"row\">\r\n          <div class=\"span12\">\r\n              <div class=\"alert alert-info\">\r\n                <strong>Info</strong>\r\n                <p>\r\n                          While ActiveJDBC works just fine with OSCache, the maintainers of OSCache retired this project in 2011. It is advised to switch to EHCache or another provider if you run into issues with OSCache.\r\n                    </p>\r\n              </div>\r\n          </div>\r\n      </div>\r\n\r\nActiveJDBC has a simple plugin framework for adding cache providers. Currently supports:\r\n\r\n<ul>\r\n\r\n<li><a href=\"http://www.opensymphony.com/oscache/ OSCache\">http://www.opensymphony.com/oscache/ OSCache</a>  OSCache is a known, well tested cache solution for Java, which supports many ways to cache data(memory, file system, clustering, etc.). For more information, see their documentation <a href=\"http://www.opensymphony.com/oscache/wiki/Documentation.html\">http://www.opensymphony.com/oscache/wiki/Documentation.html</a>\r\n</li>\r\n<li><a href=\"http://ehcache.org/ EHCache\">http://ehcache.org/ EHCache</a>, EHCache is high performance popular open source project. For documentation, please refer to: <a href=\"http://ehcache.org/documentation\">http://ehcache.org/documentation</a></li>\r\n</ul>\r\n\r\n<h2>EHCache configuration</h2>\r\nConfiguration needs to be provided in a file called `ehcache.xml` found at the root of a classpath. Example of a file content:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<ehcache xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:noNamespaceSchemaLocation=\"http://ehcache.org/ehcache.xsd\"\r\n         updateCheck=\"true\" monitoring=\"autodetect\">\r\n\r\n    <diskStore path=\"java.io.tmpdir\"/>\r\n    <defaultCache\r\n            maxElementsInMemory=\"1000\"\r\n            eternal=\"false\"\r\n            timeToIdleSeconds=\"120\"\r\n            timeToLiveSeconds=\"120\"\r\n            overflowToDisk=\"true\"\r\n            maxElementsOnDisk=\"10000\"\r\n            diskPersistent=\"false\"\r\n            diskExpiryThreadIntervalSeconds=\"120\"\r\n            memoryStoreEvictionPolicy=\"LRU\"\r\n            />\r\n</ehcache>\r\n</pre>\r\n\r\nPlease, note that ActiveJDBC does creates named caches in EHCache, but only uses default configuration specified by `defaultCache` element in this file.\r\n\r\n<h3>EHCache clustering with Terracotta</h3>\r\nThe EHCache project has excellent documentation found here: [http://ehcache.org/documentation/terracotta/configuration]. Adding clustering support to EHCache is somewhat simple, you have to add a `terracottaConfig` to the `ehcache.xml` file. For more information, please refer to the EHCache documentation.\r\n\r\n<h2>OSCache clustering</h2>\r\nIn case your application is deployed in a cluster, and you use caching in ActiveJDBC, you will need to configure clustering. This is necessary so that when your application invokes a destructive action, a proper purge events are distributed in a cluster. OSCache is very efficient, as it does not share the actual data across cluster. Each cluster will have its own caches based on a usage on that cluster. Whenever a purge event is generated on one node in the cluster, this event will be broadcast by OSCache to other nodes, effectively blowing the same caches across entire cluster. These events are lightweight and very fast (UDP, using JGroups).\r\nFor more information on configuration of OSCache clustering, look here:[http://www.opensymphony.com/oscache/wiki/Clustering.html]\r\n\r\n<h3>Example of clustering configuration for OSCache</h3>\r\nContents of file: *oscache.properties* (also found in root of classpath)\r\n<pre name=\"code\" class=\"brush:java;\">\r\ncache.cluster.properties =\r\nTCP(start_port=7800;loopback=true):\r\nTCPPING(initial_hosts=localhost[7800];\r\nport_range=5;timeout=3000;\r\nnum_initial_members=3;up_thread=true;down_thread=true):\r\nMERGE2(min_interval=5000;max_interval=10000):\r\nFD(shun=true;timeout=2500;max_tries=5;up_thread=true;down_thread=true):\r\nVERIFY_SUSPECT(timeout=1500;down_thread=false;up_thread=false):\r\npbcast.NAKACK (down_thread=true;up_thread=true;gc_lag=100;retransmit_timeout=3000):\r\npbcast.STABLE(desired_avg_gossip=20000;down_thread=false;up_thread=false):\r\npbcast.GMS(join_timeout=5000;join_retry_timeout=2000;shun=false;\r\nprint_local_addr=false;down_thread=true;up_thread=true)\r\n</pre>\r\n\r\nOn line 3, you see the parameter initial_hosts with only one value: `localhost[7800]`. This means that in this specific case, more than one node was running on the same \"localhost\" (and listened on port 7800). However, if you need to run nodes on different hosts, you configuration will look similar to this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nsomehost1[7800],somehost2[7800],somehost3[7800];\r\n</pre>\r\n','2012-07-12 15:08:34','2012-07-12 15:16:57','caching'),(27,'Clob support and caching','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Clob support and caching</li>\r\n</ul>\r\n<h1>Clob support and caching</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\n<h2> Introduction</h2>\r\nWhile ActiveJDBC supports Clobs, developers should be aware that even though the APIs are easy to use, they could stumble upon performance problems due to Clob sizes. \r\n\r\n<h2>Writing a Clob</h2>\r\n\r\nFor instance, if you have a table ARTICLES, which has a column CONTENT type of Clob, the writing into this column is not any different than writing into a VARCHAR or any other text field:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nArticle a = new Article():\r\na.set(\"content\", articleContent);\r\na.saveIt();\r\n</pre>\r\n\r\nHere, the string <code>articleContent</code> will be converted to a Clob by underlying JDBC driver. In other words, ActiveJDBC support here is minimal.\r\n\r\n<h2>Reading from a Clob directly</h2>\r\nActiveJDBC does not perform an implicut data conversion. This means that the <code>get(\"name\")</code> method will return exactly the type that is provided by the driver. Armed with this knowledge, we ca write code to fully read information from the Clob:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nArticle a = Article.findById(100);\r\nClob c = (Clob)a.get(\"content\");\r\n///read from Clob...\r\n</pre>\r\n\r\n<h2>Convenient method for reading from a Clob</h2>\r\nSince ActiveJDBC does not do implicit data conversions, it does provide explicit convenient methods for conversion. One such method is <code>getString()</code>:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nArticle a = Article.findById(100);\r\nString content = a.getString(\"content\");\r\n</pre>\r\nIn the example above, the Model will detect if this value is type Clob, and will read all content from it completely, converting it into a String. \r\n\r\n<h2>Clobs in cached models</h2>\r\n\r\nActiveJDBC provides a mechanism of [Caching]. This means that entire resultsets of models filled with data will be cached, and potentially survive in memory for some time. Clobs themselves would need an original JDBC <code>Connection</code> object to read the data from (that was not closed yet). Unfortunately, there is no guarantee, that the connection is still around if you are accessing a cached list of objects from a Cache Manager after the connection was closed. \r\n\r\nActiveJDBC then makes a distinction between cached models and the ones that are not cached. In cases of regular models, it does not do anything special because it assumes that the Clobs are read immediately after models are selected and hydrated. \r\n\r\nIn cases of Cached models, ActiveJDBC performs an exhaustive read of content from Clobs, and conversion of them into <code>java.lang.String</code>s. This allows to access the content of Clobs from cached models long after the connection that was used to acquire this data closed. \r\n\r\nGetting strings is the same as in the first case:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nString articleContent = a.getString(\"content\");\r\n</pre>\r\n\r\nATTENTION: if your model is cached, and uses Clobs that are large in size, you will (eventually) have huge RAM allocation problems. Try to keep Clob sizes small for cached models, or not cache them at all.','2012-07-12 15:20:29','2012-07-12 15:36:44','clob_support_and_caching'),(28,'Generation of XML','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Generation of XML</li>\r\n</ul>\r\n<h1>Generation of XML</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\n\r\n<h2>Introduction</h2>\r\nOften developers need to generate XML from models. In more complicated situation, they probably would write some XML generation code. However under simple condition, classes Model and LazyList already provide the basics.\r\n\r\n<h2>Generate simple XML from a model</h2>\r\n\r\nHere is code that will provide stock XML from a model:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson p  = (Person)Person.findById(1);\r\nString xml = p.toXml(2, true);\r\n</pre>\r\n\r\nThe XML produced will look something like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n  <person>\r\n    <updated_at>2010-11-09 19:02:11.0</updated_at>\r\n    <created_at>2010-11-09 19:02:11.0</created_at>\r\n    <dob>1934-12-01</dob>\r\n    <last_name>Smith</last_name>\r\n    <graduation_date>1954-12-01</graduation_date>\r\n    <name>John</name>\r\n    <id>1</id>\r\n  </person>\r\n</pre>\r\n\r\nthis of course depends on the table structure. The first parameter (2) is a number of spaces for indent, and second whether to add an XML declaration or not.\r\n\r\n<h2>Include attributes into generated XML</h2>\r\n\r\nA variation on the example above is to provide a list of attributes that you are interested in, so that only these attributes are included:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson p  = (Person)Person.findById(1);\r\nString xml = p.toXml(2, true, \"last_name\", \"dob\");\r\n</pre>\r\nThe resulting XML will have nothing but the attributes specified:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n  <person>\r\n    <dob>1934-12-01</dob>\r\n    <last_name>Smith</last_name>\r\n  </person>\r\n</pre>\r\n\r\n<h2>Inclusion of dependencies</h2>\r\nWhen a model is has relationships, the generated XML will loop through them to include their XML into the parent XML as well:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nList<User> personList = User.findAll().orderBy(\"id\").include(Address.class);\r\nUser u = personList.get(0);\r\nString xml = u.toXml(2, true);\r\n</pre>\r\n\r\nresult:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n  <user>\r\n    <addresses>\r\n      <address>\r\n        <user_id>1</user_id>\r\n        <address2>apt 31</address2>\r\n        <state>IL</state>\r\n        <zip>60606</zip>\r\n        <address1>123 Pine St.</address1>\r\n        <id>1</id>\r\n        <city>Springfield</city>\r\n      </address>\r\n      <address>\r\n        <user_id>1</user_id>\r\n   ...\r\n    truncated for brevity\r\n   ...\r\n    </addresses>\r\n    <email>mmonroe@yahoo.com</email>\r\n    <last_name>Monroe</last_name>\r\n    <id>1</id>\r\n    <first_name>Marilyn</first_name>\r\n  </user>\r\n</pre>\r\n\r\n<h2>Generate XML from a resultset</h2>\r\nGenerating XML from a LazyList is equally easy:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nLazyList&lt;User&gt;> personList = User.findAll().orderBy(\"id\").include(Address.class);\r\nString xml = personList.toXml(2, true);\r\n</pre>\r\n\r\nAn example of generated XML:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<users>\r\n  <user>\r\n    <addresses>\r\n      <address>\r\n        <user_id>1</user_id>\r\n        <address2>apt 31</address2>\r\n        <state>IL</state>\r\n        <zip>60606</zip>\r\n        <address1>123 Pine St.</address1>\r\n        <id>1</id>\r\n        <city>Springfield</city>\r\n      </address>\r\n      <address>\r\n        <user_id>1</user_id>\r\n        <address2>apt 21</address2>\r\n        <state>IL</state>\r\n        <zip>60606</zip>\r\n        <address1>456 Brook St.</address1>\r\n        <id>2</id>\r\n        <city>Springfield</city>\r\n      </address>\r\n      <address>\r\n        <user_id>1</user_id>\r\n        <address2>apt 32</address2>\r\n        <state>IL</state>\r\n        <zip>60606</zip>\r\n        <address1>23 Grove St.</address1>\r\n        <id>3</id>\r\n        <city>Springfield</city>\r\n      </address>\r\n    </addresses>\r\n    <email>mmonroe@yahoo.com</email>\r\n    <last_name>Monroe</last_name>\r\n    <id>1</id>\r\n    <first_name>Marilyn</first_name>\r\n  </user>\r\n  <user>\r\n    <addresses>\r\n      <address>\r\n        <user_id>2</user_id>\r\n        <address2>apt 34</address2>\r\n        <state>IL</state>\r\n        <zip>60606</zip>\r\n        <address1>143 Madison St.</address1>\r\n        <id>4</id>\r\n        <city>Springfield</city>\r\n      </address>\r\n      <address>\r\n        <user_id>2</user_id>\r\n        <address2>apt 35</address2>\r\n        <state>IL</state>\r\n        <zip>60606</zip>\r\n        <address1>153 Creek St.</address1>\r\n        <id>5</id>\r\n        <city>Springfield</city>\r\n      </address>\r\n      <address>\r\n        <user_id>2</user_id>\r\n        <address2>apt 36</address2>\r\n        <state>IL</state>\r\n        <zip>60606</zip>\r\n        <address1>163 Gorge St.</address1>\r\n        <id>6</id>\r\n        <city>Springfield</city>\r\n      </address>\r\n      <address>\r\n        <user_id>2</user_id>\r\n        <address2>apt 37</address2>\r\n        <state>IL</state>\r\n        <zip>60606</zip>\r\n        <address1>173 Far Side.</address1>\r\n        <id>7</id>\r\n        <city>Springfield</city>\r\n      </address>\r\n    </addresses>\r\n    <email>jdoe@gmail.com</email>\r\n    <last_name>Doe</last_name>\r\n    <id>2</id>\r\n    <first_name>John</first_name>\r\n  </user>\r\n</users>\r\n</pre>\r\n\r\nas you can see, the two users were generated. Since the include was used, the corresponding children from the ADDRESSES table were queried too for their XML.','2012-07-12 15:25:36','2012-07-12 15:36:33','generation_of_xml'),(29,'Generation of JSON','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Generation of JSON</li>\r\n</ul>\r\n<h1>Generation of JSON</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\n<h2>Introduction</h2>\r\nIn context of a web application, especially when dealing with Ajax, it is handy to have your classes  convert to to  JSON to send to a browser. If you have a complex model with custom classes to be sent over, you will most likely write your JSON generation code, if however all you need is to convert ActiveJDBC models to JSON, this functionality is already available from your models without extra effort. \r\n\r\nIn more complicated situation, they probably would write some JSON generation code. However under simple condition, classes Model and LazyList already provide the basics. \r\n\r\n<h2>Generate simple JSON from a model</h2>\r\n\r\nHere is code that will provide stock JSON from a model:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson p  = (Person)Person.findById(1);\r\nString json = p.toJson(true);\r\n</pre>\r\n\r\nThe JSON produced will look something like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n{\r\n  \"type\":\"activejdbc.test_models.Person\",\r\n  \"id\":\"1\",\r\n  \"updated_at\":\"2011-02-23 22:18:11.0\",\r\n  \"graduation_date\":\"1954-12-01\",\r\n  \"name\":\"John\",\r\n  \"dob\":\"1934-12-01\",\r\n  \"last_name\":\"Smith\",\r\n  \"created_at\":\"2011-02-23 22:18:11.0\"\r\n}\r\n</pre>\r\n\r\nthis of course depends on the table structure. The boolean parameter to the method `toJson()` is whether to generate human readable format or a single string. \r\n\r\n<h2>Specify output attributes for generated JSON </h2>\r\n\r\nA variation on the example above is to provide a list of attributes that you are interested in, so that only these attributes are included:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson p  = (Person)Person.findById(1);\r\nString json = p.toJson(true, \"last_name\", \"dob\");\r\n</pre>\r\nThe resulting JSON will only include the attributes specified:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n{\r\n  \"dob\":\"1934-12-01\",\r\n  \"last_name\":\"Smith\"\r\n}\r\n</pre>\r\n\r\n<h2>Inclusion of dependencies</h2>\r\nWhen a model is has relationships, the generated JSON will loop through them to include their JSON into the parent JSON as well:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nList<User> personList = User.findAll().orderBy(\"id\").include(Address.class);\r\nUser u = personList.get(0);\r\nString json = u.toJson(true);\r\n</pre>\r\n\r\nresult:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n{\r\n  \"type\":\"activejdbc.test_models.User\",\r\n  \"id\":\"1\",\r\n  \"first_name\":\"Marilyn\",\r\n  \"email\":\"mmonroe@yahoo.com\",\r\n  \"last_name\":\"Monroe\",\r\n  \"children\" : {\r\n    addresses : [\r\n    {\r\n      \"type\":\"activejdbc.test_models.Address\",\r\n      \"id\":\"1\",\r\n      \"zip\":\"60606\",\r\n      \"state\":\"IL\",\r\n      \"address1\":\"123 Pine St.\",\r\n      \"address2\":\"apt 31\",\r\n      \"user_id\":\"1\",\r\n      \"city\":\"Springfield\"\r\n    },\r\n    {\r\n      \"type\":\"activejdbc.test_models.Address\",\r\n      \"id\":\"2\",\r\n      \"zip\":\"60606\",\r\n      \"state\":\"IL\",\r\n      \"address1\":\"456 Brook St.\",\r\n      \"address2\":\"apt 21\",\r\n      \"user_id\":\"1\",\r\n      \"city\":\"Springfield\"\r\n    },\r\n    {\r\n      \"type\":\"activejdbc.test_models.Address\",\r\n      \"id\":\"3\",\r\n      \"zip\":\"60606\",\r\n      \"state\":\"IL\",\r\n      \"address1\":\"23 Grove St.\",\r\n      \"address2\":\"apt 32\",\r\n      \"user_id\":\"1\",\r\n      \"city\":\"Springfield\"\r\n    }\r\n    ]\r\n  }\r\n}\r\n\r\n</pre>\r\n\r\n<h2>Generate JSON from a resultset</h2>\r\nGenerating JSON from a LazyList is equally easy:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nLazyList<User> personList = User.findAll().orderBy(\"id\").include(Address.class);\r\nString json = personList.toJson(true);\r\n</pre>\r\n\r\nAn example of generated JSON:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n[\r\n  {\r\n    \"type\":\"activejdbc.test_models.User\",\r\n    \"id\":\"1\",\r\n    \"first_name\":\"Marilyn\",\r\n    \"email\":\"mmonroe@yahoo.com\",\r\n    \"last_name\":\"Monroe\",\r\n    \"children\" : {\r\n      addresses : [\r\n        {\r\n        \"type\":\"activejdbc.test_models.Address\",\r\n        \"id\":\"1\",\r\n        \"zip\":\"60606\",\r\n        \"state\":\"IL\",\r\n        \"address1\":\"123 Pine St.\",\r\n        \"address2\":\"apt 31\",\r\n        \"user_id\":\"1\",\r\n        \"city\":\"Springfield\"\r\n      },\r\n        {\r\n        \"type\":\"activejdbc.test_models.Address\",\r\n        \"id\":\"2\",\r\n        \"zip\":\"60606\",\r\n        \"state\":\"IL\",\r\n        \"address1\":\"456 Brook St.\",\r\n        \"address2\":\"apt 21\",\r\n        \"user_id\":\"1\",\r\n        \"city\":\"Springfield\"\r\n      },\r\n        {\r\n        \"type\":\"activejdbc.test_models.Address\",\r\n        \"id\":\"3\",\r\n        \"zip\":\"60606\",\r\n        \"state\":\"IL\",\r\n        \"address1\":\"23 Grove St.\",\r\n        \"address2\":\"apt 32\",\r\n        \"user_id\":\"1\",\r\n        \"city\":\"Springfield\"\r\n      }\r\n    ]\r\n    }\r\n  },\r\n  {\r\n    \"type\":\"activejdbc.test_models.User\",\r\n    \"id\":\"2\",\r\n    \"first_name\":\"John\",\r\n    \"email\":\"jdoe@gmail.com\",\r\n    \"last_name\":\"Doe\",\r\n    \"children\" : {\r\n      addresses : [\r\n        {\r\n        \"type\":\"activejdbc.test_models.Address\",\r\n        \"id\":\"4\",\r\n        \"zip\":\"60606\",\r\n        \"state\":\"IL\",\r\n        \"address1\":\"143 Madison St.\",\r\n        \"address2\":\"apt 34\",\r\n        \"user_id\":\"2\",\r\n        \"city\":\"Springfield\"\r\n      },\r\n        {\r\n        \"type\":\"activejdbc.test_models.Address\",\r\n        \"id\":\"5\",\r\n        \"zip\":\"60606\",\r\n        \"state\":\"IL\",\r\n        \"address1\":\"153 Creek St.\",\r\n        \"address2\":\"apt 35\",\r\n        \"user_id\":\"2\",\r\n        \"city\":\"Springfield\"\r\n      },\r\n        {\r\n        \"type\":\"activejdbc.test_models.Address\",\r\n        \"id\":\"6\",\r\n        \"zip\":\"60606\",\r\n        \"state\":\"IL\",\r\n        \"address1\":\"163 Gorge St.\",\r\n        \"address2\":\"apt 36\",\r\n        \"user_id\":\"2\",\r\n        \"city\":\"Springfield\"\r\n      },\r\n        {\r\n        \"type\":\"activejdbc.test_models.Address\",\r\n        \"id\":\"7\",\r\n        \"zip\":\"60606\",\r\n        \"state\":\"IL\",\r\n        \"address1\":\"173 Far Side.\",\r\n        \"address2\":\"apt 37\",\r\n        \"user_id\":\"2\",\r\n        \"city\":\"Springfield\"\r\n      }\r\n    ]\r\n    }\r\n  }\r\n]\r\n\r\n</pre>\r\n\r\nas you can see, the two users were generated. Since the `include()` was used, the corresponding children from the ADDRESSES table were queried too for their JSON. ','2012-07-12 15:30:13','2012-07-12 15:33:43','generation_of_json'),(30,'Lifecycle callbacks','\r\n<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Lifecycle callbacks</li>\r\n</ul>\r\n<h1>Lifecycle callbacks</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\n<h2> Introduction </h2>\r\n\r\nLike ActiveRecord, ActiveJDBC has lifecycle callbacks. These are methods that can be implemented on a Model subclass to get notified of a special life cycle event performed on a model. These callbacks are captured in an interface that is implemented by a `Model</code>class:\r\n\r\n<h2>Callback interface</h2>\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic interface  CallbackListener {\r\n    void beforeSave(Model m);\r\n    void afterSave(Model m);\r\n\r\n    void beforeCreate(Model m);\r\n    void afterCreate(Model m);\r\n\r\n    void beforeDelete(Model m);\r\n    void afterDelete(Model m);\r\n\r\n    void beforeValidation(Model m);\r\n    void afterValidation(Model m);\r\n}\r\n</pre>\r\n\r\nAs you can see, there are total of eight calls that a subclass can override to get notified of a specific event.\r\n\r\n<h2>Registration of external listeners</h2>\r\n\r\nYou can implement the<code>CallbackListener</code>interface external to any model and register it like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nRegistry.instance().addListener(Role.class, myListener);\r\n</pre>\r\n\r\nor like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nRole.addListener(myListener1, myListener2,...);\r\n</pre>\r\n\r\nthis assuming that Role is a model. You can implement either  the<code>CallbackListener</code> interface or extend<code>CallbackSupport</code>where all methods are implemented with blank bodies and only override the ones you need.\r\n\r\n<h2>Override Model callback methods</h2>\r\n\r\nThe Model class already extends a class<code>CallbackSupport</code>, which provides empty implementations of these eight methods. All a developer needs to do is to override one or more methods to perform a task at a certain time.\r\n\r\n\r\n<h2> Usage </h2>\r\n\r\nLet\'s say we have a model<code>User</code>:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class User extends Model{}\r\n</pre>\r\n\r\nand a user has a password that needs to be stored in a DB in encrypted form. Using callbacks is useful in this case, since all you have to do is to override a<code>beforeSave()</code>method and provide some encryption routine to make the password secure:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class User extends Model{\r\n   public void beforeSave(){\r\n      set(\"password\" encryptPassword());\r\n   }\r\n   private String encryptPassword(){\r\n      //do what it takes\r\n   }\r\n}\r\n</pre>\r\n\r\nThe framework will call<code>beforeSave()</code>within a context of<code>save()</code>or<code>saveIt()</code>when appropriate, and your code will encrypt the password for storage.','2012-07-12 15:47:30','2012-07-12 15:48:07','lifecycle_callbacks'),(31,'ActiveJDBC - Statistics Reporting','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Statistics Reporting</li>\r\n</ul>\r\n<h1>Statistics Reporting</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\n<h2>Introduction </h2>\r\n\r\nActiveJDBC can report on times queries are taking to execute. If statistics collection is enabled, then AJ will start accumulating\r\ntimes it takes to execute various queries. This information can help identify bottlenecks in application performance.\r\n\r\n\r\n<h2>Configuring ActiveJDBC </h2>\r\nIn order to configure ActiveJDBC to collect statistical data on queries, you need to add one property to <code></code>activejdbc.properties</code> file:\r\n<pre name=\"code\" class=\"brush:java;\">\r\ncollectStatistics = true\r\n</pre>\r\n\r\nOn the next start of the application, ActiveJDBC will collect statistical data on queries.\r\n\r\n<h2>How to get queries execution times</h2>\r\n\r\nThe API to get statistical data is:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nList&lt;QueryStats&gt;  statistics = Registry.instance().getStatisticsQueue().getReportSortedBy(&quot;avg&quot;);\r\n</pre>\r\nWhere argument to <code>getReportSortedBy(...)</code> methods can be one of: \"total\", \"avg\", \"min\", \"max\", \"count\" and this indicates how you want to\r\n    sort the results (the values are self-explanatory). The <code>QueryStats</code> object is a simple bean which contains the query text, as well as values: \"total\", \"avg\", \"min\", \"max\", \"count\".\r\n\r\n\r\n<h2>How to generate non - ActiveJDBC statistics report</h2>\r\nIn some cases, you might want to accumulate statistical information for actions in your application which have nothing to do with ActiveJDBC. You can then perform this operation:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nRegistry.instance().getStatisticsQueue().enqueue(new QueryExecutionEvent(query, System.currentTimeMillis() - start));\r\n</pre>\r\n\r\nWhere \"query\" is your custom operation, and \"start\" was a time before it started. The statistical information for your operation will then be accumulated and available\r\n    for reporting just as any other ActiveJDBC query.\r\n','2012-07-24 10:31:34','2012-07-24 10:33:43','statistics_reporting'),(32,'Lazy and Eager','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Lazy and Eager</li>\r\n</ul>\r\n<h1>ActiveJDBC</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\n<h2>How to use eager loading with ActiveJDBC</h2>\r\n<h2> Lazy by default </h2>\r\nActiveJDBC is lazy by default. In this sense, it has semantics closer to ActiveRecord than Hibernate. \r\n\r\nThis means that if you have a model User and a model Address, and they have a one to many relationship, when a user has many addresses, the code:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nUser u = User.findById(1);\r\n</pre>\r\n\r\ndoes not load the associated addresses. Only when you call the getter for addresses, a query is generated and executed against DB:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nList&lt;Address&gt; addresses = u.getAll(Address.class);\r\n</pre>\r\n\r\nIn the example above, the collection of addresses is not cached in the User model, and a query is executed against a DB as many times as this getter is called. \r\n\r\n<h2>Improve efficiency with eager loading </h2>\r\n\r\nLet\'s consider an example where an ORM could unexpectedly generate a huge number of inefficient queries:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n\r\n List&lt;Address&gt; addresses = Address.findAll();\r\n\r\n for(Address address: addresses){\r\n    User user = address.parent(User.class);\r\n    System.out.println(user);\r\n }\r\n</pre>\r\nIn the above example, the number of queries generated and executed is going to be N + 1, were N is a number of addresses. This is because the first query is to get all addresses, and then for each address, there is a new query to get a user parent (line 4).\r\n\r\nThis approach is going to kill performance in some applications. A better approach is to load all parents at once by a single query:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n List&lt;Address&gt; addresses = Address.findAll().include(User.class);\r\n for(Address address: addresses){\r\n    User user = address.parent(User.class);\r\n    System.out.println(user);\r\n }\r\n</pre>\r\n\r\nThe ActiveJDBC will then issue two queries: one to get all Address(es) and the other to get all corresponding User(s). \r\n\r\nThe same logic can be applied to all relationships going up and down: one to many, many to one and many to many. \r\n\r\n<p/>\r\n    <div class=\"row\">\r\n          <div class=\"span12\">\r\n              <div class=\"alert alert-info\">\r\n                <strong>Info</strong>\r\n                <p>\r\nNOTE: the relationships that were loaded by \"include\" are cached and will be returned each time (without further access to DB) when the same getter is used!                    </p>\r\n              </div>\r\n          </div>\r\n      </div>\r\n\r\n<h2>Eager simultaneous loading of parents and children</h2>\r\n\r\nSuppose we have two one to many relationships: Author has many Posts and a Post has many Comments. In cases like these, we can load a post and all corresponding Authors and Comments very efficiently:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nList&lt;Post&gt; todayPosts = Post.where(&quot;post_date = ?&quot;, today).include(Author.class, Comment.class);\r\n</pre>\r\nThe above code will generate only three queries to DB, one per each table. This of course will create an object graph in memory with certain implications. While it is going to be a more efficient approach from the point of DB IO view, it certainly will consume more RAM. Developers will need to understand the implications and perform test cases to see if eager loading is improving or degrading performance. \r\n\r\n<h2>Conversion to Maps</h2>\r\n\r\nWhen a model with included children is converted to a map, all the dependencies are converted to maps and inserted into a parent model map too.\r\nHere is an example:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n        LazyList&lt;User&gt; users = User.findAll().include(Address.class);\r\n        List&lt;Map&gt; maps = users.toMaps();\r\n        Map user = maps.get(0);\r\n        List&lt;Map&gt; addresses = (List&lt;Map&gt;)user.get(&quot;addresses&quot;);\r\n</pre>\r\nIn the example above, on line 1 a list of users is requested from a DB, and this list is to include corresponding addresses for each user. So far, this is the same as previous examples. However, on line 2 the users are converted to a list of maps. When this happens, each map that was generated from a user model also contains a list of maps each representing an address as a child of that user. What is more, is that the list of addresses is keyed from a user map by a string \"addresses\" as evident on line 6. The key in each case like this is an interpolation of a name of a child models to plural form according to the rules of the English language, which resulted in \"addresses\" in this case. \r\n\r\nThe same logic applies to many to one and many to many relationships.\r\n\r\n','2013-03-31 22:10:04','2013-03-31 22:25:15','lazy_and_eager'),(33,'Logging','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Logging</li>\r\n</ul>\r\n<h1>ActiveJDBC Logging</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\n<h2> Logging configuration </h2>\r\n\r\nActiveJDBC uses <a href=\"http://www.slf4j.org/\">SLF4J</a> logging facade.\r\nPlease, refer to SLF4J documentation to see how to configure it with Log4J, Java Logging, Apache logging, etc.\r\n\r\n\r\n<h2>ActiveJDBC logging configuration</h2>\r\n\r\nActiveJDBC uses a system property <code>activejdbc.log</code> for specifying logging. The value of this property can be:\r\n<ul>\r\n    <li>blank - in this case, ActiveJDBC will spit out all available information - every SQL statement, cache\r\n        hits/misses, cache purge events, etc.\r\n    </li>\r\n    <li>regular expression - in this case, ActiveJDBC will only log statements that match a regular expression</li>\r\n</ul>\r\n\r\nIf you just want to see all messages from ActiveJDBC, start your program like this:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\njava -Dactivejdbc.log com.acme.YourProgram\r\n</pre>\r\n\r\nIf you only want to see select messages, you can provide an expression:\r\n<pre name=\"code\" class=\"brush:java;\">\r\njava -Dactivejdbc.log=select.* com.acme.YourProgram\r\n</pre>\r\n\r\n<h2>Dynamically change log output</h2>\r\nUse this call:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nactivejdbc.LogFilter.setLogExpression(\"regular expression goes here\");\r\n</pre>\r\nto dynamically change ActiveJDBC log output at run time.\r\n\r\n','2013-03-31 22:30:15','2013-03-31 22:31:11','logging'),(34,'Instrumentation','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Instrumentation</li>\r\n</ul>\r\n<h1>ActiveJDBC</h1>\r\n<div id=\"generated-toc\"></div>\r\n<h2>Instrumentation</h2>\r\n\r\n\r\nActiveJDBC requires instrumentation of class files after they are compiled. This is accomplished with an Instrumentation package provided by the project. There are three ways to use it: with a Maven plugin, Ant, and as a standalone Java class (in case you have a non-Maven project)\r\n\r\n<h2>What is instrumentation? </h2>\r\nInstrumentation is byte code manipulation that happens after compile phase. It adds static methods from super class to a subclass. Instrumentation makes writing code like this possible:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n    List&lt;Person&gt; retirees = Person.where(\"age >= ?\", 65);\r\n</pre>\r\n\r\nWithout instrumentation, AJ would not be able to know what table to query. This is one reason why other Java ORM APIs are clunky and require a third party class, such as PersistentManager(JPA), Session (Hibernate), etc.\r\n\r\nWhile instrumentation introduces an additional step in the process, the benefit is a very intuitive and concise API.\r\n\r\n<h2>Maven instrumentation plugin</h2>\r\nThe simple usage of a Maven plugin is provided by a Maven ActiveJDBC Simple Example project:\r\n\r\n<a href=\"https://activejdbc.googlecode.com/svn/trunk/examples/simple-example/\" target=\"_blank\">https://activejdbc.googlecode.com/svn/trunk/examples/simple-example/</a>\r\nSpecifically, the plugin is added to a pom like this:\r\n\r\n<pre name=\"code\" class=\"brush:xml;\">\r\n    <plugin>\r\n        <groupId>activejdbc</groupId>\r\n        <artifactId>activejdbc-instrumentation</artifactId>\r\n        <version>1.4.1</version>\r\n        <executions>\r\n            <execution>\r\n                <phase>process-classes</phase>\r\n                <goals>\r\n                    <goal>instrument</goal>\r\n                </goals>\r\n            </execution>\r\n        </executions>\r\n    </plugin>\r\n </pre>\r\nand as you can see, binds to a\r\n<code>process-classes</code> phase. It will automatically instrument your classes during the build.\r\n\r\n\r\n<h2>Ant instrumentation</h2>\r\nInstrumenting models with Ant projects is easy too: <a\r\n        href=\"https://activejdbc.googlecode.com/svn/trunk/examples/ant-example\" target=\"_blank\">https://activejdbc.googlecode.com/svn/trunk/examples/ant-example/</a>\r\n\r\nThe class responsible for instrumentation is called\r\n<code>activejdbc.instrumentation.Main</code>, and here is an example of using it:\r\n<pre name=\"code\" class=\"brush:xml;\">\r\n    <target name=\"instrument\" depends=\"compile\">\r\n        <java classname=\"activejdbc.instrumentation.Main\">\r\n            &lt;sysproperty key=\"outputDirectory\" value=\"${classes}\"/&gt;\r\n            &lt;classpath refid=\"build_classpath\"/&gt;\r\n        </java>\r\n    </target>\r\n</pre>\r\n\r\nwhere <code>${classes}</code> represents a directory where class files were compiled.\r\n\r\n\r\n<h2>Standalone instrumentation </h2>\r\n\r\nIf you are not using Maven or Ant, you can run instrumentation with a command similar to this:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n        java  -cp=$CLASSPATH  -DoutputDirectory=build activejdbc.instrumentation.Main\r\n    </pre>\r\n\r\nwhere:\r\n<ul>\r\n    <li><code>$CLASSPATH</code> is your classpath (see the build.xml) in the Ant example above for things you will need\r\n        to have on the classspath.\r\n    </li>\r\n    <li> build - is a directory where you compiled all classes in a \"compile\" step before instrumentation</li>\r\n    </li>\r\n    There is an example of a standalone project which does not use any build tool, except Java itself. Please follow\r\n    this link for more information: <a href=\"https://activejdbc.googlecode.com/svn/trunk/examples/standalone-example/\"\r\n                                       target=\"_blank\">https://activejdbc.googlecode.com/svn/trunk/examples/standalone-example/</a>\r\n\r\n\r\n    <h2>Speed of instrumentation</h2>\r\n    ... is very fast - for large projects (50 - 60 models) it takes about 5 - 7 seconds, and for small projects (under\r\n    10 models) usually within a second or two.\r\n\r\n    <h2>Build time classpath</h2>\r\n    The Instrumentation package is required on the classpath only during instrumentation and not required during\r\n    runtime. For Maven projects, this is automatic. Even it finds its way to the runtime classpath, it will do no harm\r\n    except for increasing the size.\r\n\r\n    <h2>Bare bones Ant script</h2>\r\n\r\n    This Ant script can be used on any project in order to speed up development. The reason we use this script even on\r\n    Maven projects is speed. Maven takes time to startup, but this barebones script is almost immediate. You can hook it\r\n    into IDE to trigger before executing tests:\r\n    <pre name=\"code\" class=\"brush:xml;\">\r\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n        <project name=\"C3\" default=\"instrument\" basedir=\".\">\r\n\r\n            &lt;property name=\"out.dir\" value=\"target/classes\"/&gt;\r\n\r\n            <path id=\"instrument_classpath\">\r\n                &lt;pathelement location=\"${out.dir}\"/&gt;\r\n                &lt;path location=\"${user.home}/.m2/repository/org/javalite/activejdbc-instrumentation/1.2.2/activejdbc-instrumentation-1.2.2.jar\"/&gt;\r\n                &lt;path location=\"${user.home}/.m2/repository/javassist/javassist/3.8.0.GA/javassist-3.8.0.GA.jar\"/&gt;\r\n                &lt;path location=\"${user.home}/.m2/repository/org/javalite/activejdbc/1.2.2/activejdbc-1.2.2.jar\"/&gt;\r\n            </path>\r\n\r\n            <target name=\"instrument\">\r\n                <java classname=\"org.javalite.instrumentation.Main\">\r\n                    &lt;sysproperty key=\"outputDirectory\" value=\"${out.dir}\"/&gt;\r\n                    &lt;classpath refid=\"instrument_classpath\"/&gt;\r\n                </java>\r\n            </target>\r\n\r\n        </project>\r\n    </pre>\r\n\r\n    <h2>Eclipse integration</h2>\r\n\r\n    <a href=\"/p/eclipseIntegration\">EclipseIntegration</a>\r\n\r\n\r\n    <h2>Netbeans integration</h2>\r\n\r\n    Please, see <a href=\"/p/netbeansIntegration\">NetbeansIntegration</a>','2013-03-31 22:33:47','2013-11-14 09:41:54','instrumentation'),(35,'JSpec','<h2> Introduction </h2>\r\nThis page describes functionality and usage of a tiny testing library called JSpec. JSpec was originated from ActiveJDBC project and was inspired by RSpec from the Ruby world.\r\n\r\n\r\n<h2> The idea </h2>\r\n\r\nThe main idea is to replace \"assert\" language with \"should\" language and make it as close to English as possible. This forces the brain to work in a different mode, writing a \"specification of behavior\" for your program rather than \"assertion\" that  the program works. The difference might seem subtle, but requires a different style of thinking and promotes true TDD/BDD - when specifications are written before implementation, sometimes even by different people.\r\n\r\nJSpec uses <code>should</code> word instead of <code>assert</code>. Here is an example of an old style test:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n@Test\r\npublic void testCalculator(){\r\n    Calculator c = new Calculator();\r\n    c.add(2, 2);\r\n    assertEquals(c.result(), 4);\r\n}\r\n</pre>\r\n\r\nThe JSpec style of writing this test would be:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n@Test\r\npublic void shouldAddNumbersCorrectly(){\r\n    Calculator c = new Calculator();\r\n    c.add(2, 2);\r\n    a(c.result()).shouldBeEqual(4);\r\n}\r\n</pre>\r\n\r\nThe result of executing either test is the same, but the style is completely different:\r\n<ul>\r\n    <li> The method name starts with \"should\", which implies that the functionality is not developed yet! It is very\r\n        important to write tests with clear understanding of the requirements and describe a system \"behavior\" in code\r\n        before implementation is even developed.\r\n    </li>\r\n    <li> The expectation reads like an English sentence: \"calculation result should be equal 4\".</li>\r\n</ul>\r\n<h2>The \'the\', \'a\' and \'it\'</h2>\r\n\r\nIn the code above, you see the usage of\r\n<code>a()</code> method. This method returns an object \"Expectation\", which you really do not care about, because it is never used directly, but rather used as a form of a\r\n<a href=\"http://martinfowler.com/bliki/FluentInterface.html\" target=\"_blank\">fluent interface</a> that has all the\r\n<code>should*</code> methods for verification of expectations.\r\n\r\n<h3>The \'a\' and \'the\'</h3>\r\n\r\nAll the three methods <code>the</code>, <code>a</code> and <code>it</code> return the expectation object.  The\r\n<code>a</code> and the\r\n<code>the</code> methods are identical. One is a synonym of another. The reason for two methods doing the same is to provide both English words to make the expectation \"sentence\" sound better. Sometimes the\r\n<code>a</code> sounds better, sometimes the <code>the</code>.\r\n\r\n<h4>Numeric type indifference in \'a\' and \'the\'</h4>\r\n\r\nAdditionally, there is an interesting feature of the <code>a</code> and\r\n<code>the</code> methods: they are numeric type agnostic. In JUnit this will fail:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n    assertEqual(3, 3L); // will fail\r\n</pre>\r\nwhile the two numbers are identical in value for all practical purposes, the JUnit assertion will fail just because the types are different, one being an Integer, and another a Long.\r\nThe same test in JSpec using either <code>a</code> or <code>the</code> will succeed:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n    a(3).shouldBeEqual(3L); // will succeed\r\n</pre>\r\n\r\n<h3>The \'it\'</h3>\r\n\r\nThe only difference between the <code>it</code> method and <code>a</code> or <code>the</code> is that in the\r\n<code>it</code> method the tested object type and expected object type are parametrized with Java Generics. This means that they must be the same type:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n    it(3).shouldBeEqual(3L);// will not compile\r\n</pre>\r\n\r\n<h2>Expectation methods</h2>\r\n<h3>shouldEqual, shouldBeEqual and shouldNotBeEqual</h3>\r\nExpect that  the two objects are equal with the use of a standard <code>java.lang.Object.equals()</code> method:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n    a(obj1).shouldEqual(obj2);\r\n</pre>\r\n\r\nThe great thing about this method is that it will check  that the objects are the same type, has a protection for <code>null</code> and will produce a good quality message in case objects are not equal. This code:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n    String a = \"a\", b = \"b\";\r\n    a(a).shouldBeEqual(b);\r\n</pre>\r\nWill produce this message:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nTest object:\r\n    java.lang.String == &lt;a&gt;\r\n    and expected\r\n    java.lang.String == &lt;b&gt;\r\n</pre>\r\nwhile this code:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n    String a = \"a\", b = null;\r\n    a(a).shouldBeEqual(b);\r\n</pre>\r\n\r\nwill produce this message:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n    Test object:\r\n    java.lang.String == &lt;a&gt;\r\n    and expected\r\n    null == &lt;null&gt;\r\n</pre>\r\n\r\nAs you can see, the messages not only provide values of tested and expected objects, but also provide their types, which is often important.\r\n\r\n\r\n<h3>shouldHave, shouldBe, shouldNotBe </h3>\r\nThere are three dynamic boolean methods that are supported by JSpec:\r\n<ul>\r\n    <li> shouldHave(String)</li>\r\n    <li> shouldBe(String)</li>\r\n    <li> shouldNotBe(String)</li>\r\n</ul>\r\nFor all three methods, the argument is an abridged boolean method of a tested class. This means that if there is such a class Person:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n    class Person{\r\n        private String name;\r\n        ... setter/getter\r\n        public boolean isValid(return name != null; )\r\n    }\r\n    </pre>\r\nyou can write an expectation in this style:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n    Person person = new Person();\r\n    a(person).shouldBe(\"valid\");\r\n</pre>\r\n\r\nWhat happens here is that the JSpec will dynamically execute the method\r\n<code>person.isValid()</code> and will evaluate its return value. If the value returned is false, the expectation is not met, and test will fail with exception.\r\n\r\nExample for shouldHave:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n    class Validation{\r\n        public boolean hasErrors(){...};\r\n    }\r\n</pre>\r\nand the expectation is:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n    Validation validation = new Validation();\r\n    a(validation).shouldHave(\"errors\");\r\n</pre>\r\n\r\nThe goal of this style of expectations to make them as close as possible to sound like an English sentence.\r\n\r\n<h3>shouldBeNull and shouldNotBeNull</h3>\r\nExpects that the tested reference is not null (or is):\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n    a(x).shouldNotBeNull();\r\n</pre>\r\n\r\nIn case the x is actually <code>null</code>, the test will fail with:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n    javalite.test.jspec.TestException: Object is null, while it is not expected\r\n    </pre>\r\n\r\n\r\n<h3>shouldBeType and shouldBeA</h3>\r\n\r\nSets up expectation for a tested object\'s type:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n    a(a).shouldBeType(Long.class);\r\n    </pre>\r\n\r\nIf expectation not met, the error can be:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n    javalite.test.jspec.TestException: class java.lang.String is not class java.lang.Long\r\n</pre>\r\n\r\n<code>shouldBeA</code> is a synonym of <code>shouldBeType</code>, use either one for a better sounding sentence.\r\n\r\n\r\n<h3>shouldBeFalse and shouldBeTrue</h3>\r\n\r\nThese are self-explanatory:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n        a( 2 * 2 == 4).shouldBeTrue();\r\n</pre>\r\nand:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n    a( 2 * 2 == 5).shouldBeFalse();\r\n</pre>\r\n\r\n\r\n<h3>shouldBeTheSameAs and shouldNotBeTheSameAs</h3>\r\n\r\nThese methods are to check if the tested and expected references point to the same (or not) object.\r\n\r\n<h3>shouldContain/shouldNotContain</h3>\r\n\r\nTests that an expected value is contained in the tested object. The tested object can be of the following types:\r\n<ul>\r\n    <li> Any object - in this case, the string representation of this object is tested to contain a string\r\n        representation of expected value as a substring. For example, this will pass:\r\n        <pre name=\"code\" class=\"brush:java;\">\r\n            the(\"meaning of life is 42\").shouldContain(\"meaning\");\r\n        </pre>\r\n    </li>\r\n    <li><code>java.util.List</code> - in this case, the tested list is expected to contain an expected object. For\r\n        example, this will pass:\r\n        <pre name=\"code\" class=\"brush:java;\">\r\n            a(Arrays.asList(1, 2, 3)).shouldContain(3);\r\n        </pre>\r\n    </li>\r\n    <li><code>java.util.Map</code> - in this case, the tested map is expected to contain an object whose key is the\r\n        expected object. For example, this will pass:\r\n        <pre name=\"code\" class=\"brush:java;\">\r\n            Map map = new HashMap();\r\n            map.put(\"one\", 1);\r\n            map.put(\"two\", 2);\r\n            map.put(\"three\", 3);\r\n            a(map).shouldContain(\"two\");\r\n        </pre>\r\n\r\n        The method <code>shouldNotContain()</code> is exactly the opposite of shouldContain().\r\n    </li>\r\n</ul>\r\n\r\n<h3>Expecting difference</h3>\r\n\r\nOften times you need to ensure that some number before and after the operation is different. For instance, this could be a total count of specific records in a table, or a size of a list.\r\nHere is an example of using a difference expectation with JSpec:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n    expect(new DifferenceExpectation(Person.find(\"last_name like ?\", \"Smith\").size()) {\r\n        public Object exec() {\r\n        Person.updateAll(\"last_name = ?\", \"Smith\");\r\n        return Person.find(\"last_name like ?\", \"Smith\").size();\r\n        }\r\n    });\r\n    </pre>\r\n\r\nIn the code snippet above, the constructor of\r\n<code>DifferenceExpectation(..)</code> is passed an initial value, and the method\r\n<code>exec()</code> returns a final value. The initial and final are compared to be different at the end of a test. If they are the same, then the test fails.\r\nAn example message:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n    javalite.test.jspec.TestException: Objects: \'1\' and \'1\' are equal, but they should not be\r\n</pre>\r\n\r\n','2013-03-31 22:44:38','2013-11-15 04:40:10','jspec'),(36,'DB Migrations','#summary How to perform DB migrations\r\n\r\n\r\n= Introduction =\r\nA DB migration is a step for \"developing\" your database. This means every time you need a new table, column, or need to remove something from DB, you write a DB \"migration\". In the Rails world, the migrations are written in Ruby: [http://guides.rubyonrails.org/migrations.html], but I feel that migrations ought to be written in a native to the DB language. This will achieve two goals:\r\n\r\n  * developers do not need to learn yet another language and conventions\r\n  * DBAs can help tweak migration code. \r\n\r\nAfter surveying a number of Java projects for DB migrations, we decided to use Carbon 5 project [http://code.google.com/p/c5-db-migration/ c5-db-migration]. Carbon 5 is very close to the idea of migrations, has a good community and support, but most of all, on all of our MySQL and Oracle projects we never had issues with it and never needed support. \r\n\r\n\r\n= Configuration of Carbon 5 =\r\n\r\nThere is nothing special about configuring Carbon 5 Maven plugin that is specific to ActiveJDBC, and you can easily follow their guide: [http://code.google.com/p/c5-db-migration/wiki/MavenPlugin Carbon 5 Maven Plugin], however you can see how this is configured for a Kitchensink project for !ActiveWeb: [http://code.google.com/p/activeweb/source/browse/trunk/kitchensink/pom.xml]\r\n\r\nBasically the simplest-most configuration would be:\r\n{{{\r\n<plugin>\r\n    <groupId>com.carbonfive.db-support</groupId>\r\n    <artifactId>db-migration-maven-plugin</artifactId>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>mysql</groupId>\r\n            <artifactId>mysql-connector-java</artifactId>\r\n            <version>5.0.4</version>\r\n        </dependency>\r\n    </dependencies>\r\n    <configuration>\r\n        <url>your value here</url>\r\n        <username>your value here</username>\r\n        <password>your value here</password>\r\n        <driver>your value here</driver>\r\n    </configuration>\r\n    <executions>\r\n        <execution>\r\n            <id>dev_migrations</id>\r\n            <goals>\r\n                <goal>migrate</goal>\r\n            </goals>\r\n            <phase>validate</phase>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n}}}\r\n\r\n=Create migration=\r\n\r\nTo create a new migration, execute this command:\r\n{{{\r\nmvn db-migration:new -Dname=create_person_table\r\n}}}\r\n\r\nthis action would create an empty file:\r\n{{{\r\n./src/main/db/migrations/20101112230703_create_person_table.sql\r\n}}}\r\n\r\nAfter that, add this code to the file:\r\n{{{\r\nCREATE TABLE people (\r\n  id  int(11) DEFAULT NULL auto_increment PRIMARY KEY,\r\n  first_name VARCHAR(128),\r\n  last_name VARCHAR(128),\r\n  created_at DATETIME,\r\n  updated_at DATETIME\r\n)TYPE=InnoDB;;\r\n}}}\r\n\r\nand you have a migration. To push this migration to the DB, you can execute this command:\r\n{{{\r\nmvn validate\r\n}}}\r\nthis is because if you look at configuration of Maven plugin, you will see that it is bound to the \"verify\" life cycle. If you want, you can bind it to anther life cycle. \r\n\r\n\r\nCarbon 5 maintains acts of executing migrations in table SCHEMA_VERSION and will not execute the same migration twice:\r\n\r\n{{{\r\nmysql> select * from schema_version;\r\n+----------------+---------------------+----------+\r\n| version        | applied_on          | duration |\r\n+----------------+---------------------+----------+\r\n| 20100909211252 | 2011-03-01 20:18:22 |       38 |\r\n| 20100910235216 | 2011-03-01 20:18:22 |       30 |\r\n| 20100914234548 | 2011-03-01 20:18:22 |       19 |\r\n| 20100927225020 | 2011-03-01 20:18:22 |       17 |\r\n| 20101002065645 | 2011-03-01 20:18:22 |       23 |\r\n| 20101013000334 | 2011-03-01 20:18:22 |       89 |\r\n| 20101013102224 | 2011-03-01 20:18:22 |        9 |\r\n| 20101028000756 | 2011-03-01 20:18:22 |        5 |\r\n| 20101031010628 | 2011-03-01 20:18:22 |       16 |\r\n| 20110414035138 | 2011-04-13 23:03:42 |        8 |\r\n+----------------+---------------------+----------+\r\n}}}\r\n\r\n\r\n=Development process=\r\n\r\nSince all migrations are recorded as text (SQL) files, and contain a time stamp in the name, every time you update sources from source repository and execute a build, your database is upgraded to the latest migration automatically. In our experience, this reduced amount of attention we had to give a DB to a minimum. Basically a developer creates a new migration and checks it in, which makes it propagate to other developer machines automatically.\r\n\r\n=Maintaining multiple databases=\r\nYou can use Maven profiles to maintain multiple database. An example of such configuration is a Kitchensink project from !ActiveWeb: [http://code.google.com/p/activeweb/source/browse/trunk/kitchensink/pom.xml] this should be self-explanatory.','2013-04-24 14:41:44','2013-04-24 14:41:44','DB_Migrations'),(37,'DB Migrations','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">DB Migrations</li>\r\n</ul>\r\n<h1>DB Migrations</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\n<h2> Introduction </h2>\r\n\r\nA DB migration is a step for developing your database. This means every time you need a new table, column, or need to remove something from DB, you write a DB migration.  In the rails world, migrations are usually written using DSL but in ActiveWeb, we are writing migrations in native SQL. This will achieve two goals:\r\n<br /><br />\r\n<ul>\r\n    <li>developers do not need to learn yet another language and conventions</li>\r\n    <li>DBAs can help tweak migration code</li>\r\n</ul>\r\nAfter surveying a number of Java projects for DB migrations, we decided to use Carbon 5 project <a href=\"http://code.google.com/p/c5-db-migration/c5-db-migration\">c5-db-migration</a>. Carbon 5 is very close to the idea of migrations, has a good community and support, but most of all, on all of our MySQL and Oracle projects we never had issues with it and never needed support. \r\n\r\n<h2>Configuration of Carbon 5</h2>\r\n\r\nThere is nothing special about configuring Carbon 5 Maven plugin that is specific to ActiveJDBC, and you can easily follow their guide: <a href=\"http://code.google.com/p/c5-db-migration/wiki/MavenPlugin\">Carbon 5 Maven Plugin</a>, however you can see how this is configured for a Kitchensink project for ActiveWeb: <a href=\"http://code.google.com/p/activeweb/source/browse/trunk/kitchensink/pom.xml\">http://code.google.com/p/activeweb/source/browse/trunk/kitchensink/pom.xml</a>\r\n<br /><br />\r\nBasically the simplest-most configuration would be:\r\n<pre name=\"code\" class=\"brush:xml;\">\r\n<plugin>\r\n    <groupId>com.carbonfive.db-support</groupId>\r\n    <artifactId>db-migration-maven-plugin</artifactId>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>mysql</groupId>\r\n            <artifactId>mysql-connector-java</artifactId>\r\n            <version>5.0.4</version>\r\n        </dependency>\r\n    </dependencies>\r\n    <configuration>\r\n        <url>your value here</url>\r\n        <username>your value here</username>\r\n        <password>your value here</password>\r\n        <driver>your value here</driver>\r\n    </configuration>\r\n    <executions>\r\n        <execution>\r\n            <id>dev_migrations</id>\r\n            <goals>\r\n                <goal>migrate</goal>\r\n            </goals>\r\n            <phase>validate</phase>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n</pre>\r\n\r\n<h2>Create migration</h2>\r\n\r\nTo create a new migration, execute this command:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n    mvn db-migration:new -Dname=create_person_table\r\n</pre>\r\n\r\nthis action would create an empty file:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n    ./src/main/db/migrations/20101112230703_create_person_table.sql\r\n</pre>\r\n\r\n\r\nAfter that, add this code to the file:\r\n<pre name=\"code\" class=\"brush:sql;\">\r\nCREATE TABLE people (\r\n  id  int(11) DEFAULT NULL auto_increment PRIMARY KEY,\r\n  first_name VARCHAR(128),\r\n  last_name VARCHAR(128),\r\n  created_at DATETIME,\r\n  updated_at DATETIME\r\n)TYPE=InnoDB;;\r\n</pre>\r\nand you have a migration. To push this migration to the DB, you can execute this command:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nmvn validate\r\n</pre>\r\nthis is because if you look at configuration of Maven plugin, you will see that it is bound to the \"verify\" life cycle. If you want, you can bind it to anther life cycle. \r\n\r\nCarbon 5 maintains acts of executing migrations in table SCHEMA_VERSION and will not execute the same migration twice:\r\n\r\n<pre name=\"code\" class=\"brush:sql;\">\r\nmysql> select * from schema_version;\r\n+----------------+---------------------+----------+\r\n| version        | applied_on          | duration |\r\n+----------------+---------------------+----------+\r\n| 20100909211252 | 2011-03-01 20:18:22 |       38 |\r\n| 20100910235216 | 2011-03-01 20:18:22 |       30 |\r\n| 20100914234548 | 2011-03-01 20:18:22 |       19 |\r\n| 20100927225020 | 2011-03-01 20:18:22 |       17 |\r\n| 20101002065645 | 2011-03-01 20:18:22 |       23 |\r\n| 20101013000334 | 2011-03-01 20:18:22 |       89 |\r\n| 20101013102224 | 2011-03-01 20:18:22 |        9 |\r\n| 20101028000756 | 2011-03-01 20:18:22 |        5 |\r\n| 20101031010628 | 2011-03-01 20:18:22 |       16 |\r\n| 20110414035138 | 2011-04-13 23:03:42 |        8 |\r\n+----------------+---------------------+----------+\r\n</pre>\r\n\r\n<h2>Development process</h2>\r\n\r\nSince all migrations are recorded as text (SQL) files, and contain a time stamp in the name, every time you update sources from source repository and execute a build, your database is upgraded to the latest migration automatically. In our experience, this reduced amount of attention we had to give a DB to a minimum. Basically a developer creates a new migration and checks it in, which makes it propagate to other developer machines automatically.\r\n\r\n<h2>Maintaining multiple databases</h2>\r\nYou can use Maven profiles to maintain multiple database. An example of such configuration is a Kitchensink project from <a href=\"http://code.google.com/p/activeweb/source/browse/trunk/kitchensink/pom.xml\">http://code.google.com/p/activeweb/source/browse/trunk/kitchensink/pom.xml</a> this should be self-explanatory.','2013-04-24 14:43:18','2013-12-09 15:07:59','dbmigrations'),(38,'Data Conversions','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Data Conversions</li>\r\n</ul>\r\n<h1>Data Conversions</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\n<h2>Pass-through framework</h2>\r\n\r\nActiveJDBC is a <b>pass-through framework</b>. This means that for the most part, it does not attempt to convert data types and relies on the underlying driver for most data conversions during read and write operations. Most database drivers do a great deal of conversion\r\n<ul>\r\n    <li><b>select operations</b>: during select operations, the driver will populate your models with whatever types that are mapped from DB table columns to appropriate Java types.</li>\r\n    <li><b>insert/update operations</b>: during inserts or updates, the DBMS driver will perform conversions where necessary and possible. In cases a conversion is not possible, you are going to get a runtime exception from DBMS (see below)</li>\r\n</ul>\r\n\r\n<h2>How to see mapped type</h2>\r\nThis is pretty easy, insert a record into a table using standard DBMS tools, and then query it like this:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson p = Person.findAll().get(0);\r\nSystem.out.println(\"DOB type: \" + p.get(\"dob\").getClass());\r\n</pre>\r\n\r\n\r\n<h2>Convenience conversion methods</h2>\r\n\r\nActiveJDBC provides a number of getter and setter methods for conversion. Most conversions use the underlying <a href=\"http://code.google.com/p/activejdbc/source/browse/trunk/javalite-common/src/main/java/javalite/common/Convert.java\">Convert</a> class.\r\nHere are some examples:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nDate date = person.getDate(\"dob\");\r\nBoolean projectCompleted = project.getBoolean(\"completed\");\r\n...\r\n</pre>\r\n\r\nMost all types can be converted to String, including a CLOB. Consider this example, where column CONTENT is defined as CLOB:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nString text = article.getString(\"content\");\r\n</pre>\r\n\r\n<h2>Custom setters and getters</h2>\r\n\r\nIf you like more control over types, you can provide typed getters and setters:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Person extends Model{\r\n    ...\r\n    public void setName(String name){\r\n        set(\"name\", name);\r\n    }\r\n    ...\r\n}\r\n</pre>\r\nand then use it like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPerson p = new Person();\r\np.setName(\"John\");\r\np.setDob(new Date(12345L));\r\n</pre>\r\n\r\nFor more information on setters and getters, see <a href=\"/p/setters_and_getters\">Setters And Getters</a>\r\n\r\n<h2>What happens if I stick a wrong type?</h2>\r\n\r\nIf you do this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nStudent p = new Student();\r\np.set(\"first_name\", \"John\");\r\np.set(\"last_name\", \"Doe\");\r\np.set(\"dob\", 1); // ===>>  this is wrong type for DOB field\r\np.saveIt();\r\n</pre>\r\n\r\nyou are going to get an exception from the DBMS itself, if it cannot convert the type:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nactivejdbc.DBException: com.mysql.jdbc.MysqlDataTruncation: Data truncation: Incorrect date value: \'1\' for column \'dob\' at row 1, Query: INSERT INTO students (first_name, dob, last_name) VALUES (?, ?, ?), params: John,1,Doe\r\nat com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:2868)\r\nat com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:1573)\r\nat com.mysql.jdbc.ServerPreparedStatement.serverExecute(ServerPreparedStatement.java:1169)\r\nat com.mysql.jdbc.ServerPreparedStatement.executeInternal(ServerPreparedStatement.java:693)\r\n</pre>\r\n\r\n<h2>Different data types for the same attribute</h2>\r\n\r\nIs this possible? Yes, for instance, take this example:\r\n<pre name=\"code\" class=\"brush:java;\">\r\np.set(\"dob\", \"2011-12-3\");\r\np.saveIt();\r\n</pre>\r\nThis will work for MySQL, and the driver will convert the String \"2011-12-3\" during insert or update. However, if you retain a reference to this model, the internal value type is going to remain String.\r\n\r\n<h2>Should I care about types?</h2>\r\nNot so much. Just use the models with types you think are appropriate, and ActiveJDBC together with the driver will handle most of what you need. In case you get a conversion exception from the driver, do a due diligence then.\r\n','2013-05-06 12:34:39','2013-05-06 13:29:24','data_conversions'),(39,'Writing tests','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Writing tests</li>\r\n</ul>\r\n\r\n\r\n<h1>Writing tests</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\n<h2> Introduction</h2>\r\nWriting models\' tests is easy. While you can use any Java technology to do this, the AvtiveJDBC project internally as well as <a href = \"http://code.google.com/p/activeweb/\"> ActiveWeb</a> use a combination JUnit and [JSpec].\r\nTest methods are also written in a style where a name of a method is a phrase reflecting the expectation of the test.\r\n\r\n< h2> Call tests specifications </h2>\r\n\r\nUsually in the Java world, people call tests ... tests. In the Ruby world they are called \"specs\", or specifications. This name fits better if you practice a true TDD, because  you start thinking of them as specifications of behavior rather than testing of code after it is written. While the change is in the name, it might be enough to have a slight shift in mentality towards TDD.\r\n\r\n<h2>Example process of writing a specification</h2>\r\nLets write a simple model:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Person extends Model{}\r\n</pre>\r\n\r\nUsually, at this point  it is time to write a test:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class PersonSpec {\r\n    @Test\r\n    public void shouldValidatePresenceOfFirstNameAndLastName() {\r\n        Person p = new Person();\r\n        a(p).shouldNotBe(\"valid\");\r\n    }\r\n}\r\n</pre>\r\n\r\n\r\nWhen the code above runs, the spec is in red because the class Person does not specify any validations yet, and therefore it is valid. This test will fail on line 5.\r\nHowever, our goal  for this model is not be valid if it is missing first and last name attributes.<br />\r\nIn order to make it pass, you need to add validations to the model:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Person extends Model {\r\n   validatePresenceOf(\"first_name\", \"last_name\");\r\n}\r\n</pre>\r\nWhen you re-run test, it will pass.<br />\r\n\r\nAt this point, we need to add values for first and last name, as well as an expectation of a valid state of the model:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class PersonSpec {\r\n    @Test\r\n    public void shouldValidatePresenceOfFirstNameAndLastName() {\r\n       Person p = new Person();\r\n       a(p).shouldNotBe(\"valid\");\r\n       p.set(\"first_name\", \"Homer\");\r\n       p.set(\"last_name\", \"Simpson\");\r\n       a(p).shouldBe(\"valid\");\r\n    }\r\n}\r\n</pre>\r\n\r\nAt line 4, the test passes as before because the model still does not have the first and last names, but on lines 6 and 7, we add these, and on line 8 we expect the model to finally be valid.\r\n<br />\r\n\r\nWe now have a complete specification of behavior and at the same time we built an implementation. It is typical to switch from spec to a model and back a few times until all behavior is documented in the spec and implementation is complete to satisfy it. \r\n\r\n\r\n<h2>Example of writing a test </h2>\r\n\r\nIn a real scenario, you would also need to open a database connection before the test and close it after the test. This provides an example of a real working test from one of the example projects:\r\n<a href=\"http://code.google.com/p/activejdbc/source/browse/trunk/examples/simple-example/src/test/java/activejdbc/examples/simple/EmployeeSpec.java\"> EmployeeSpec</a>\r\n\r\n\r\n','2013-05-08 10:39:38','2013-05-09 15:36:33','writing_tests'),(40,'Database connection management','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Database connection management</li>\r\n</ul>\r\n\r\n<h1>Database connection management</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\n<h2>Introduction </h2>\r\n\r\nActiveJDBC provides two classes for connection management: <a href=\"http://code.google.com/p/activejdbc/source/browse/trunk/activejdbc/src/main/java/activejdbc/Base.java\">Base.java</a> and <a href=\"http://code.google.com/p/activejdbc/source/browse/trunk/activejdbc/src/main/java/activejdbc/DB.java\"> DB.java</a>. \r\n\r\n\r\n<h2>Thread connection propagation</h2>\r\n\r\nActiveJDBC models when operate, utilize a connection found on a current thread. This connection is put on the local thread by Base or DB class before any DB operation. approach allows for more concise API where there is no need for DB Session or persistent managers as in other Java ORMs. <br />\r\n\r\nHere is a simple program:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic static void main(String[] args) {\r\n    Base.open(\"com.mysql.jdbc.Driver\", \"jdbc:mysql://localhost/test\", \"the_user\", \"the_password\");\r\n    Employee.findAll().dump();\r\n    Base.close();\r\n }\r\n</pre>\r\n\r\nOn line 2, class Base will open a new connection and attach it to the current thread. This connection will also be marked with name \"default\".<br />\r\n\r\nOn line 3, connection is looked up from the thread and used by the model(and result dumped to STDIO)<br />\r\n\r\nOn line 4, connection is closed and cleared from thread.\r\n\r\n\r\n<h2>Database names</h2>\r\n\r\nActiveJDBC has a concept of a \"database\". A database is the same as a \"database\" in normal understanding. However, an application can be connected to multiple databases at the same time. In this case. ActiveJDBC allows for assigning different logical names to different databases. For example, one might have an Oracle database with accounting data, and a MySQL database with inventory control data. In this case, you might want to have an \"accounting\" database and an \"inventory\" database as logical names assigned to these databases. \r\n\r\n<h2>DB and Base</h2>\r\n\r\nOpening and closing connections is done with classes Base or DB. The DB class is used in cases where you have more than one database in the system, such as \"accounting\" and \"inventory\".<br />\r\n\r\nExample:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nnew DB(\"inventory\").open(\"com.mysql.jdbc.Driver\", \"jdbc:mysql://localhost/test\", \"root\", \"p@ssw0rd\");\r\n</pre>\r\nIn this code example, there is a database connection opened, and attached to a local thread under name \"inventory\". \r\n\r\n\r\nThe classes Base and DB mirror one another, having exactly the same APIs, except:\r\n<ul>\r\n  <li>All methods on DB are instance methods, while all methods on class Base are static ones. </li>\r\n  <li>class DB constructor accepts a DB name, while Base always operates with DB name: \"default\"</li>\r\n</ul>\r\nThis means that these lines are equivalent:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nnew DB(\"default\").open(\"com.mysql.jdbc.Driver\", \"jdbc:mysql://localhost/test\", \"root\", \"p@ssw0rd\");\r\n</pre>\r\nand:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nBase.open(\"com.mysql.jdbc.Driver\", \"jdbc:mysql://localhost/test\", \"root\", \"p@ssw0rd\");\r\n</pre>\r\n\r\n<b>Rule:</b><br />\r\n----\r\nUse Base if you have only one database in the system, otherwise, use DB.\r\n----\r\n\r\n\r\n<h2>Models associated with multiple databases</h2>\r\n\r\nActiveJDBC allows to have a mix of models in the application representing tables from different databases. By default a model belongs to a database \"default\", but an association of a model to a database can be overriden with annotation @DbName:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n@DbName(\"corporation\")\r\npublic class Employee extends Model {}\r\n</pre>\r\n\r\n<b>Recommendation:</b> put most models into \"default\" database, since this will require you to add this annotation to fewer models\r\n\r\n\r\n\r\n<h2>Multiple database example </h2>\r\nSee sources here: <a href=\"http://code.google.com/p/activejdbc/source/browse/#svn%2Ftrunk%2Fexamples%2Fmultimple-db-example\"> multimple-db-example.</a><br />\r\n\r\nFor this example, we will have two models, one representing a table in Oracle database, while the other in MySQL <br />\r\n\r\nThe two models are defined like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n@DbName(\"corporation\")\r\npublic class Employee extends Model {}\r\n</pre>\r\nand:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n@DbName(\"university\")\r\npublic class Student  extends Model {}\r\n</pre>\r\n\r\nand the main class looks like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        new DB(\"corporation\").open(\"com.mysql.jdbc.Driver\", \"jdbc:mysql://localhost/test\", \"root\", \"p@ssw0rd\");\r\n        new DB(\"university\").open(\"oracle.jdbc.driver.OracleDriver\", \"jdbc:oracle:thin:@localhost:1521:xe\", \"activejdbc\", \"activejdbc\");\r\n\r\n        Employee.deleteAll();\r\n        Student.deleteAll();\r\n\r\n        Employee.createIt(\"first_name\", \"John\", \"last_name\", \"Doe\");\r\n        Employee.createIt(\"first_name\", \"Jane\", \"last_name\", \"Smith\");\r\n\r\n        Student.createIt(\"first_name\", \"Mike\", \"last_name\", \"Myers\");\r\n        Student.createIt(\"first_name\", \"Steven\", \"last_name\", \"Spielberg\");\r\n\r\n        System.out.println(\"*** Employees ***\");\r\n        Employee.findAll().dump();\r\n        System.out.println(\"*** Students ***\");\r\n        Student.findAll().dump();\r\n\r\n        new DB(\"corporation\").close();\r\n        new DB(\"university\").close();\r\n    }\r\n}\r\n</pre>\r\n\r\nAt the beginning of the application, the two named connections are opened, then we proceed to use the models associated with these connections. At the end of the program, the two named connections are closed. The class DB is super lightweight, and it is OK not to retain a reference to it, but rather to create a new instance each time. If you do want to retain a reference, there is no harm done though.\r\n\r\n<h2>Database connection pools</h2>\r\n\r\nActiveJDBC does not maintain connection pools and does not integrate with any pools. Instead, it provides a few DB.open() and Base.open() methods to open connections. If a version of methods used that takes standard JDBC parameters, then no pool is used this is only a convenience method to open a brand new connection, such as:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nBase.open(\"com.mysql.jdbc.Driver\", \"jdbc:mysql://localhost/test\", \"root\", \"p@ssw0rd\");\r\n</pre>\r\n\r\nIf however, this call is used:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nBase.open(\"jdbc/test\");\r\n</pre>\r\nit will internally use JDNI to lookup a connection. The connection looked up will correspond to configuration of a JNDI resource. Usually if this is called from within a container, the name points to a pooled JNDI DataSource, and as a result represents a connection coming from a pool.<br />\r\n\r\nIf you want to work directly with some connection pool, you can do so by feeding a datasource to Base/DB class:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nnew DB(\"default\").open(datasourceInstance);\r\n</pre>\r\n\r\n\r\n<h2>Specifying DB Schema</h2>\r\n\r\nIn most cases you do not need to worry about this. However, for Oracle and PostgreSQL, some schema elements may leak into your account if a schema is not specified. If you find that your model for instance has an attribute(column) that is not part of this table description, it means that the DB mixed in this column from another table (public schema) that has the same name as your table. <br />\r\n\r\nIn a case like this, you need to specify a schema for a database. If you use a default database ( see \"Multiple database example\" above, and you do not use !DbName() annotation), simply add this system property:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n-Dactivejdbc.default.schema=myschema\r\n</pre>\r\nwhere \"default\" is a name of a database and \"myschema\" is a name of your schema in Oracle or PostgreSQL.<br />\r\n\r\nIn case you do use multiple connections to different databases and you use DbName annotation, replace \"default\" to your  DB name. For example:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n@DbName(\"university\")\r\npublic class Student extends Model{}\r\n\r\n</pre>\r\n\r\nthen you can add a property like this:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n-Dactivejdbc.university.schema=myschema\r\n</pre>\r\n<br />\r\n','2013-05-09 04:10:31','2013-05-09 15:46:37','database_connection_management'),(41,'Delete cascade','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Delete cascade</li>\r\n</ul>\r\n\r\n<h1>Delete cascade</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\n<h2> Introduction </h2>\r\nActiveJDBC provides two methods for deleting with cascade: `deleteCascade()` and `deleteCascadeShallow()`.<br />\r\n\r\nBasically `deleteCascade()` deep but not high performance, while `deleteCascadeShallow()`is fast, but not deep (hence the name).<br />\r\nPlease, see below for more information.\r\n\r\n\r\n<h2> deleteCascade() </h2>\r\n\r\nActiveJDBC class `Model` provides a method:\r\n<pre name=\"code\" class=\"brush:xml;\">\r\ndeleteCascade();\r\n</pre>\r\n\r\nIt deletes current record from associated table, as well as children. Deletes current model and all of its child and many to many associations. This is not a high performance method, as it will load every row into a model instance before deleting, effectively calling (N + 1) per table queries to the DB, one to select all the associated records (per table), and one delete statement per record. Use it for small data sets.\r\nIn cases of simple one to many and polymorphic associations, things are as expected, a parent is deleted an all children are deleted as well, but in more complicated cases, this method will walk entire three of associated tables, sometimes coming back to the same one where it all started. It will follow associations of children and their associations too; consider this a true cascade delete with all implications (circular dependencies, referential integrity constraints, potential performance bottlenecks, etc.)<br />\r\n\r\nImagine a situation where you have DOCTORS and PATIENTS in many to many relationship (with DOCTORS_PATIENTS table as a join table), and in addition PATIENTS and PRESCRIPTIONS in one to many relationship, where a patient might have many prescriptions:\r\n<pre name=\"code\" class=\"brush:xml;\">\r\n     DOCTORS\r\n        +----+------------+-----------+-----------------+\r\n        | id | first_name | last_name | discipline      |\r\n        +----+------------+-----------+-----------------+\r\n        |  1 | John       | Kentor    | otolaryngology  |\r\n        |  2 | Hellen     | Hunt      | dentistry       |\r\n        |  3 | John       | Druker    | oncology        |\r\n        +----+------------+-----------+-----------------+\r\n\r\n     PATIENTS\r\n        +----+------------+-----------+\r\n        | id | first_name | last_name |\r\n        +----+------------+-----------+\r\n        |  1 | Jim        | Cary      |\r\n        |  2 | John       | Carpenter |\r\n        |  3 | John       | Doe       |\r\n        +----+------------+-----------+\r\n\r\n     DOCTORS_PATIENTS\r\n        +----+-----------+------------+\r\n        | id | doctor_id | patient_id |\r\n        +----+-----------+------------+\r\n        |  1 |         1 |          2 |\r\n        |  2 |         1 |          1 |\r\n        |  3 |         2 |          1 |\r\n        |  4 |         3 |          3 |\r\n        +----+-----------+------------+\r\n\r\n     PRESCRIPTIONS\r\n        +----+------------------------+------------+\r\n        | id | name                   | patient_id |\r\n        +----+------------------------+------------+\r\n        |  1 | Viagra                 |          1 |\r\n        |  2 | Prozac                 |          1 |\r\n        |  3 | Valium                 |          2 |\r\n        |  4 | Marijuana (medicinal)  |          2 |\r\n        |  5 | CML treatment          |          3 |\r\n        +----+------------------------+------------+\r\n </pre>   \r\nLets start with a simple example, Doctor John Druker. This doctor has one patient John Doe, and the patient has one prescription. So, when an instance of this doctor model is issued statement:<br />\r\n           drDruker.deleteCascade();\r\n       <br />\r\n, the result is as expected: the DOCTORS:ID=3 is deleted, DOCTORS_PATIENTS:ID=4 is deleted, PATIENTS:ID=3 is deleted and PRESCRIPTIONS:ID=5 is deleted.\r\nHowever, when doctor Kentor(#1) is deleted, the following records are also deleted:\r\nDOCTORS_PATIENTS:ID=1, 2 - these are links to patients\r\nPATIENTS:ID=1,2 these are patients themselves\r\nPRESCRIPTIONS:ID=1,2,3,4 - these are prescriptions of patients 1 and 2\r\nBut, in addition, since this is a many to many relationship, deleting patients 1 and 2 results in also deleting doctor Hellen Hunt(#2), since she is a doctor of patient Jim Cary(#1), deleting all corresponding join links from table DOCTORS_PATIENTS. So, deleting doctor Kentor, deleted most all records from related tables, leaving only these records in place:\r\n<pre name=\"code\" class=\"brush:xml;\">\r\nDOCTORS:ID=3\r\nDOCTORS_PATIENTS:ID=4\r\nPATIENTS:ID=3\r\nPRESCRIPTIONS:ID=5\r\n</pre>\r\nHad doctor Hellen Hunt(#2) had more patients, it would delete them too, and so on. This goes a long way to say that it could be easy to be tangled up in web of associations, so be careful out there.\r\nAfter deletion, this instance becomes frozen() and cannot be used anymore until thaw() is called.\r\n\r\n<h2> deleteCascadeExcept() </h2>\r\n\r\nThe method `deleteCascade()` will navigate to all relationships of a model and their relationships, etc. This can lead to some unexpected results - you might find that it deleted some important records. If this is the case, use method `deleteCascadeExcept(Association ... associations)`. <br />\r\n\r\nLets say you have models: Article, Comment and Tag such that Article has many Comments, and Comment has many Tags. <br />\r\n\r\n\r\nThis method then allows to skip some associations of a model from following:\r\n\r\n<pre name=\"code\" class=\"brush:xml;\">\r\nComment comment = Comment.findFirst(...criteria ...);\r\ncomment.deleteCascadeExcept(Comment.getMetaModel().getAssociationForTarget(\"articles\"));\r\n</pre>\r\nIn the example above, the comment will be deleted along with its tags, but the article will stay intact.\r\n\r\n<h2>deleteCascadeShallow()</h2>\r\n\r\nDeletes current record from associated table, as well as its immediate children. This is a high performance method because it does not walk through a chain of child dependencies like `deleteCascade()` does, but rather issues one DELETE statement per child dependency table. Also, its semantics are a bit different between that `deleteCascade()`. It only deletes current record and immediate children, but not their children (no grand kinds are dead as a result :)).\r\n\r\n<h3>One to many and polymorphic associations</h3>\r\nThe current record is deleted, as well as immediate children.\r\n<h3>Many to many associations</h3>\r\n\r\nThe current record is deleted, as well as links in a join table. Nothing else is deleted.\r\nAfter deletion, this instance becomes frozen() and cannot be used anymore until thaw() is called.','2013-05-09 04:24:27','2013-05-09 07:08:48','delete_cascade'),(42,'Delete cascade','<h2> Introduction </h2>\r\nActiveJDBC provides two methods for deleting with cascade: `deleteCascade()` and `deleteCascadeShallow()`.<br />\r\n\r\nBasically `deleteCascade()` deep but not high performance, while `deleteCascadeShallow()`is fast, but not deep (hence the name).<br />\r\nPlease, see below for more information.\r\n\r\n\r\n<h2> deleteCascade() </h2>\r\n\r\nActiveJDBC class `Model` provides a method:\r\n<pre name=\"code\" class=\"brush:xml;\">\r\ndeleteCascade();\r\n</pre>\r\n\r\nIt deletes current record from associated table, as well as children. Deletes current model and all of its child and many to many associations. This is not a high performance method, as it will load every row into a model instance before deleting, effectively calling (N + 1) per table queries to the DB, one to select all the associated records (per table), and one delete statement per record. Use it for small data sets.\r\nIn cases of simple one to many and polymorphic associations, things are as expected, a parent is deleted an all children are deleted as well, but in more complicated cases, this method will walk entire three of associated tables, sometimes coming back to the same one where it all started. It will follow associations of children and their associations too; consider this a true cascade delete with all implications (circular dependencies, referential integrity constraints, potential performance bottlenecks, etc.)<br />\r\n\r\nImagine a situation where you have DOCTORS and PATIENTS in many to many relationship (with DOCTORS_PATIENTS table as a join table), and in addition PATIENTS and PRESCRIPTIONS in one to many relationship, where a patient might have many prescriptions:\r\n<pre name=\"code\" class=\"brush:xml;\">\r\n     DOCTORS\r\n        +----+------------+-----------+-----------------+\r\n        | id | first_name | last_name | discipline      |\r\n        +----+------------+-----------+-----------------+\r\n        |  1 | John       | Kentor    | otolaryngology  |\r\n        |  2 | Hellen     | Hunt      | dentistry       |\r\n        |  3 | John       | Druker    | oncology        |\r\n        +----+------------+-----------+-----------------+\r\n\r\n     PATIENTS\r\n        +----+------------+-----------+\r\n        | id | first_name | last_name |\r\n        +----+------------+-----------+\r\n        |  1 | Jim        | Cary      |\r\n        |  2 | John       | Carpenter |\r\n        |  3 | John       | Doe       |\r\n        +----+------------+-----------+\r\n\r\n     DOCTORS_PATIENTS\r\n        +----+-----------+------------+\r\n        | id | doctor_id | patient_id |\r\n        +----+-----------+------------+\r\n        |  1 |         1 |          2 |\r\n        |  2 |         1 |          1 |\r\n        |  3 |         2 |          1 |\r\n        |  4 |         3 |          3 |\r\n        +----+-----------+------------+\r\n\r\n     PRESCRIPTIONS\r\n        +----+------------------------+------------+\r\n        | id | name                   | patient_id |\r\n        +----+------------------------+------------+\r\n        |  1 | Viagra                 |          1 |\r\n        |  2 | Prozac                 |          1 |\r\n        |  3 | Valium                 |          2 |\r\n        |  4 | Marijuana (medicinal)  |          2 |\r\n        |  5 | CML treatment          |          3 |\r\n        +----+------------------------+------------+\r\n </pre>   \r\nLets start with a simple example, Doctor John Druker. This doctor has one patient John Doe, and the patient has one prescription. So, when an instance of this doctor model is issued statement:<br />\r\n           drDruker.deleteCascade();\r\n       <br />\r\n, the result is as expected: the DOCTORS:ID=3 is deleted, DOCTORS_PATIENTS:ID=4 is deleted, PATIENTS:ID=3 is deleted and PRESCRIPTIONS:ID=5 is deleted.\r\nHowever, when doctor Kentor(#1) is deleted, the following records are also deleted:\r\nDOCTORS_PATIENTS:ID=1, 2 - these are links to patients\r\nPATIENTS:ID=1,2 these are patients themselves\r\nPRESCRIPTIONS:ID=1,2,3,4 - these are prescriptions of patients 1 and 2\r\nBut, in addition, since this is a many to many relationship, deleting patients 1 and 2 results in also deleting doctor Hellen Hunt(#2), since she is a doctor of patient Jim Cary(#1), deleting all corresponding join links from table DOCTORS_PATIENTS. So, deleting doctor Kentor, deleted most all records from related tables, leaving only these records in place:\r\n<pre name=\"code\" class=\"brush:xml;\">\r\nDOCTORS:ID=3\r\nDOCTORS_PATIENTS:ID=4\r\nPATIENTS:ID=3\r\nPRESCRIPTIONS:ID=5\r\n</pre>\r\nHad doctor Hellen Hunt(#2) had more patients, it would delete them too, and so on. This goes a long way to say that it could be easy to be tangled up in web of associations, so be careful out there.\r\nAfter deletion, this instance becomes frozen() and cannot be used anymore until thaw() is called.\r\n\r\n<h2> deleteCascadeExcept() </h2>\r\n\r\nThe method `deleteCascade()` will navigate to all relationships of a model and their relationships, etc. This can lead to some unexpected results - you might find that it deleted some important records. If this is the case, use method `deleteCascadeExcept(Association ... associations)`. <br />\r\n\r\nLets say you have models: Article, Comment and Tag such that Article has many Comments, and Comment has many Tags. <br />\r\n\r\n\r\nThis method then allows to skip some associations of a model from following:\r\n\r\n<pre name=\"code\" class=\"brush:xml;\">\r\nComment comment = Comment.findFirst(...criteria ...);\r\ncomment.deleteCascadeExcept(Comment.getMetaModel().getAssociationForTarget(\"articles\"));\r\n</pre>\r\nIn the example above, the comment will be deleted along with its tags, but the article will stay intact.\r\n\r\n<h2>deleteCascadeShallow()</h2>\r\n\r\nDeletes current record from associated table, as well as its immediate children. This is a high performance method because it does not walk through a chain of child dependencies like `deleteCascade()` does, but rather issues one DELETE statement per child dependency table. Also, its semantics are a bit different between that `deleteCascade()`. It only deletes current record and immediate children, but not their children (no grand kinds are dead as a result :)).\r\n\r\n<h3>One to many and polymorphic associations</h3>\r\nThe current record is deleted, as well as immediate children.\r\n<h3>Many to many associations</h3>\r\n\r\nThe current record is deleted, as well as links in a join table. Nothing else is deleted.\r\nAfter deletion, this instance becomes frozen() and cannot be used anymore until thaw() is called.\r\n','2013-05-09 04:25:13','2013-05-09 04:25:13','delete_cascade'),(43,'Inheritance','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Inheritance</li>\r\n</ul>\r\n\r\n<h1>Inheritance</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\n<h2> Introduction </h2>\r\nCurrently ActiveJDBC does not support a feature called <a href=\"http://en.wikipedia.org/wiki/Single_Table_Inheritance\"> Single Table Inheritance.</a> However it does support just inheritance\r\n\r\n<h2> Inheritance diagram </h2>\r\n\r\nConsider this diagram:<br />\r\n\r\n\r\n<a href=\"https://activejdbc.googlecode.com/svn/trunk/doc/inheritance_umlet_class_diagram.png\">https://activejdbc.googlecode.com/svn/trunk/doc/inheritance_umlet_class_diagram.png\r\n</a>\r\n\r\n\r\n<h2>Inheritance usage</h2>\r\nWhile there are total of 7 classes, only those classes that have green background are associated with tables. At the same time, a common functionality can be inherited from one class to another. Abstract classes are marked with (A).<br />\r\n\r\nIn this diagram there are only three tables: MEALS, CAKES and SWORDS. This means that models that are not green are not backed by a table and therefore cannot be used directly.<br />\r\n\r\nAll functionality declared in models Dessert and Pastry can be used in a model Cake. Same goes for Weapon and Sword. However, Cheese, although can exist in code, is a dud.','2013-05-09 06:59:51','2013-05-09 07:07:44','inheritance'),(44,'ActiveWEB','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">ActiveWeb</li>\r\n</ul>\r\n<h1>ActiveWeb</h1>\r\n\r\n<div id=\"generated-toc\"></div>\r\n\r\n<h2>Design principles</h2>\r\n\r\n<ul>\r\n    <li>\r\n        <b>Convention over configuration</b> - zero configuration is required to develop ActiveWeb applications, and some conventions are overridable.\r\n    </li>\r\n    <li>\r\n        <b>Highest degree of developer productivity</b> - ActiveWeb allows developers to build real Java web projects without the need for the typical compile/package/deploy/start cycle. A container is started once, and development can continue. ActiveWeb will recompile controllers and reload them into a running container on the fly.\r\n    </li>\r\n    <li>\r\n        <b>Adherence to Java standards</b> - ActiveWeb binds to core Java standards: JDBC and Servlets.\r\n    </li>\r\n    <li>\r\n        <b>First-rate built-in testing capabilities</b> - ActiveWeb provides the ability to test every discrete business function, including data generated by business logic, the content and structure of generated HTML/JSON/XML/XYZ, and complex user scenarios, all without having to start a container. ActiveWeb is perfect for true TDD/BDD, and it promotes writing specifications (tests) before coding implementations.\r\n    </li>\r\n    <li>\r\n        <b>Full stack web development platform</b> - unlike many other Java frameworks, such as JSF, Struts, Wicket, etc., which usually solve only one problem, ActiveWeb is a full stack development framework for the Web. It provides all features that are integrated together. This allows to start Java web projects very fast.\r\n    </li>\r\n    <li>\r\n        <b>Integrated dependency injection</b> - ActiveWeb integrates Google Guice as a dependency injection container.\r\n    </li>\r\n    <li>\r\n        <b>ActiveWeb uses ActiveJDBC as ORM layer</b> - ActiveWeb uses ActiveJDBC as ORM layer. This is a lightweight integration, and both frameworks work very well together. However, developers still have the option of using a different ORM package if desired.\r\n    </li>\r\n    <li>\r\n        <b>Built-in support for Unobtrusive JavaScript</b> - this allows for the development of dynamic Ajax applications without having to write repetitive JavaScript code. Unobtrusive JavaScript does not clutter HTML pages as generated JavaScript would.\r\n    </li>\r\n</ul>\r\n\r\n<h2>Documentation</h2>\r\n\r\n<a id=\"expand\" href=\"javascript:void(0);\" onclick=\"$(\'#documentation\').show(\'slow\'); $(\'#expand\').hide(); $(\'#collapse\').show();\" style=\"display:none\">Expand table of contents</a>\r\n<a id=\"collapse\" href=\"javascript:void(0);\" onclick=\"$(\'#documentation\').hide(\'slow\'); $(\'#collapse\').hide(); $(\'#expand\').show();\" >Collapse table of contents</a>\r\n\r\n<div id=\"documentation\">\r\n    <ul>\r\n        <li><a href=\"/p/five_minutes_guide_to_activeweb\">Five Minute Guide To ActiveWeb</a></li>\r\n        <li><a href=\"/p/getting_started_with_hello_world_application\">GettingStarted - Hello world application</a></li>\r\n        <li><a href=\"/p/mvc_pattern\">MVC Pattern</a></li>\r\n        <li><a href=\"/p/activeweb_project_structure\">Structure of ActiveWeb project</a></li>\r\n        <li><a href=\"/p/controllers_explained\">Controllers Explained</a></li>\r\n        <li><a href=\"/p/dependency_injection\">Dependency Injection</a></li>\r\n        <li><a href=\"/p/database_configuration\">Database Configuration</a></li>\r\n        <li><a href=\"/p/database_migrations\">DB Migrations</a></li>\r\n        <li><a href=\"/p/controller_filters\">Controller Filters</a></li>\r\n        <li><a href=\"/p/testing\">Testing</a></li>\r\n        <li><a href=\"/p/views\">Views</a></li>\r\n        <li><a href=\"/p/running_in_development_mode\">Running in development mode</a></li>\r\n        <li><a href=\"/p/routing\">Routing</a></li>\r\n        <li><a href=\"/p/captcha\">Captcha</a></li>\r\n    </ul>\r\n</div>\r\n\r\n<h2>5 minute video to understand ActiveWeb</h2>\r\n<p>Watch a quick video on Youtube that demonstrates ActiveWeb\'s ability to add code to the application dynamically, at run time</p>\r\n<iframe width=\"425\" height=\"344\" frameborder=\"0\" src=\"http://www.youtube.com/embed/YX1TAtuSqQE\"></iframe>\r\n<p>Link to the same video on Youtube: <a href=\"http://www.youtube.com/watch?v=YX1TAtuSqQE\" rel=\"nofollow\">http://www.youtube.com/watch?v=YX1TAtuSqQE</a>\r\n\r\n<h2>Quick guide to ActiveWeb</h2>\r\n<p>To get a quick idea on what this is about, see <a href=\"/p/five_minutes_guide_to_activeweb\">Five Minute Guide To ActiveWeb</a></p>\r\n\r\n<h2>How to download</h2>\r\n<h3>Maven</h3>\r\n<pre name=\"code\" class=\"brush:xml;\">\r\n    <dependency>\r\n        <groupId>org.javalite</groupId>\r\n        <artifactId>activeweb</artifactId>\r\n        <version>1.6</version>\r\n    </dependency>\r\n</pre>\r\n<h3>Direct link</h3>\r\n<p>Or using direct link in <a href=\"http://search.maven.org/#search%7Cga%7C1%7Cjavalite\">Maven Central</a></p>\r\n\r\n<h2>Support</h2>\r\n<p>For support, please refer to <a href=\"https://groups.google.com/forum/?hl=en#!forum/activeweb\">ActiveWeb Google Groups</a></p>\r\n<p><a href=\"/p/activeweb_faq\">FAQ</a></p>\r\n','2013-05-09 15:14:20','2013-12-24 00:44:11','activeweb'),(45,'Five Minute Guide To ActiveWeb','<h2>Introduction</h2>\r\n\r\nAt the heart of an !ActiveWeb application is a controller. A controller is a component whose role is to accept and process an HTTP request. This is similar to a Servlet, or a controller class in SpringMVC, Action class in Struts 1 or a controller in Ruby on Rails or Grails\r\n\r\n\r\n<font color=\"navy\">!ActiveWeb is a convention-based framework</font>\r\n\r\n\r\n\r\nHere is an example of the simplest controller:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GreetingController extends AppController {\r\n    public void index() {}\r\n}\r\n</pre>\r\n\r\n<h2>URL mapping convention</h2>\r\nControllers are automatically mapped to a URL, such that a controller name is underscored (without the word Controller). Here is an example: \r\n<pre name=\"code\" class=\"brush:java;\">\r\n<a href=\"http://localhost:8080/testapp/greeting\">http://localhost:8080/testapp/greeting</a>\r\n</pre>\r\n\r\nWhen this URL is accessed, the `GreetingController` is executed. Since no further information is provided on the URL, the `index()` method will be processed. Controller methods processed as a result of an HTTP request are called <b>actions</b>.\r\n\r\n<h2>Action mapping convention</h2>\r\nIf the URL contained more information, let\'s say:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<a href=\"http://localhost:8080/testapp/greeting/hello\">http://localhost:8080/testapp/greeting/hello</a>\r\n</pre>\r\nthen the system would expect that the controller would have a \"hello\" action, as in:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GreetingController extends AppController {\r\n    public void hello() {}\r\n}\r\n</pre>\r\n\r\nHowever, as in the previous example, if the action is omitted, it causes the framework to fall back on a default action \"index\".\r\n\r\n\r\n<h2>View mapping convention</h2>\r\n\r\nIn this case, the action `index` does not have any code, the framework will pass control to a view. This view will be looked for under:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<a href=\"/WEB-INF/views/greeting/index.ftl\">/WEB-INF/views/greeting/index.ftl</a>\r\n</pre>\r\n\r\nWhere `/WEB-INF/views/` is a base location for all views, directory \"greeting\" is named after controller, and a view template \"index\" is called to render because action \"index\" of the controller was executed. The content of the `index.ftl` will be displayed in browser.\r\n\r\n\r\n<h2>Example passing data to view</h2>\r\nIn the graphic below, you see how !ActiveWeb routes the request to `GreetingController` and action \"hello\".\r\nThe complete sequence of operations: \r\n\r\n  # A URL <a href=\"http://localhost:8080/simple-example/greeting/hello?name=Bob\">http://localhost:8080/simple-example/greeting/hello?name=Bob</a> is entered into the browser. \r\n  # The Framework upon receiving the request, routes it to the controller !GreetingController, action \"hello\".  The controller passes some data to view - \"date\" as internally generated data, as well as \"name\" - HTTP request parameter, accessed with `param(\"name\")` method\r\n  # The Framework then passes the data to a view template `WEB-INF/views/greeting/hello.ftl` for rendering\r\n\r\n<a href=\"http://activeweb.googlecode.com/files/aw.png View image in full resolution\">http://activeweb.googlecode.com/files/aw.png View image in full resolution</a>\r\n\r\n<a href=\"http://activeweb.googlecode.com/files/aw.png\">http://activeweb.googlecode.com/files/aw.png</a>\r\n\r\n<font color=\'navy\'>In this example, the code you see on the image above is all that there is. There are no XML files, no property or any other configuration files. </font>\r\n\r\n','2013-05-12 11:05:32','2013-05-12 11:05:32','five_minute_guide_to_activeWeb'),(46,'Five Minute Guide To ActiveWeb','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activeweb\">ActiveWeb</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Five Minute Guide To ActiveWeb</li>\r\n</ul>\r\n\r\n<h1>Five Minute Guide To ActiveWeb</h1>\r\n<div id=\"generated-toc\"></div>\r\n<h2>Introduction</h2>\r\n\r\nAt the heart of an !ActiveWeb application is a controller. A controller is a component whose role is to accept and process an HTTP request. This is similar to a Servlet, or a controller class in SpringMVC, Action class in Struts 1 or a controller in Ruby on Rails or Grails<br />\r\n\r\n\r\n<hr style=\"#ccc;\">\r\n<font color=\"navy\">!ActiveWeb is a convention-based framework</font>\r\n<hr style=\"#ccc;\">\r\n\r\n\r\nHere is an example of the simplest controller:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GreetingController extends AppController {\r\n    public void index() {}\r\n}\r\n</pre>\r\n\r\n<h2>URL mapping convention</h2>\r\nControllers are automatically mapped to a URL, such that a controller name is underscored (without the word Controller). Here is an example: \r\n<pre name=\"code\" class=\"brush:java;\">\r\nhttp://localhost:8080/testapp/greeting\r\n</pre>\r\n\r\nWhen this URL is accessed, the `GreetingController` is executed. Since no further information is provided on the URL, the `index()` method will be processed. Controller methods processed as a result of an HTTP request are called <b>actions</b>.\r\n\r\n<h2>Action mapping convention</h2>\r\nIf the URL contained more information, let\'s say:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nhttp://localhost:8080/testapp/greeting/hello\r\n</pre>\r\nthen the system would expect that the controller would have a \"hello\" action, as in:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GreetingController extends AppController {\r\n    public void hello() {}\r\n}\r\n</pre>\r\n\r\nHowever, as in the previous example, if the action is omitted, it causes the framework to fall back on a default action \"index\".\r\n\r\n\r\n<h2>View mapping convention</h2>\r\n\r\nIn this case, the action `index` does not have any code, the framework will pass control to a view. This view will be looked for under:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n/WEB-INF/views/greeting/index.ftl\r\n</pre>\r\n\r\nWhere `/WEB-INF/views/` is a base location for all views, directory \"greeting\" is named after controller, and a view template \"index\" is called to render because action \"index\" of the controller was executed. The content of the `index.ftl` will be displayed in browser.\r\n\r\n\r\n<h2>Example passing data to view</h2>\r\nIn the graphic below, you see how !ActiveWeb routes the request to `GreetingController` and action \"hello\".<br />\r\nThe complete sequence of operations: <br />\r\n\r\n  # A URL <a href=\"http://localhost:8080/simple-example/greeting/hello?name=Bob\">http://localhost:8080/simple-example/greeting/hello?name=Bob</a> is entered into the browser. \r\n<br />\r\n  # The Framework upon receiving the request, routes it to the controller !GreetingController, action \"hello\".  The controller passes some data to view - \"date\" as internally generated data, as well as \"name\" - HTTP request parameter, accessed with `param(\"name\")` method<br />\r\n  # The Framework then passes the data to a view template `WEB-INF/views/greeting/hello.ftl` for rendering<br />\r\n\r\n<a href=\"http://activeweb.googlecode.com/files/aw.png View image in full resolution\">http://activeweb.googlecode.com/files/aw.png View image in full resolution</a><br />\r\n\r\n<a href=\"http://activeweb.googlecode.com/files/aw.png\">http://activeweb.googlecode.com/files/aw.png</a><br />\r\n\r\n<hr style=\"#ccc;\">\r\n<font color=\'navy\'>In this example, the code you see on the image above is all that there is. There are no XML files, no property or any other configuration files. </font>\r\n<hr style=\"#ccc;\">\r\n','2013-05-13 02:54:11','2013-05-14 04:53:48','five_minutes_guide_to_activeweb'),(47,'GettingStarted - Hello world application','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activeweb\">ActiveWeb</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Getting Started - Hello world application</li>\r\n</ul>\r\n\r\n<h1>GettingStarted - Hello world application</h1>\r\n<div id=\"generated-toc\"></div>\r\n<h2>Introduction</h2>\r\nThe simple !ActiveWeb project available for download here demonstrates some main principles of the framework. This is a CRUD application, which can list/add/view a book. It also shows how to write model and controller specs, and how to perform dependency injection.\r\n\r\n\r\n<h2>Pre-requisites</h2>\r\n<ul>\r\n  <li> Java :)</li>\r\n  <li> Maven 2/3 </li>\r\n  <li> MySQL (only required for this startup program, not a real dependency for ActiveWeb)</li>\r\n</ul>\r\nCreate two empty schemas in MySQL DB:\r\n<ul>\r\n  <li> simple_development</li>\r\n  <li> simple_test </li>\r\n</ul>\r\n<h2> Download example app </h2>\r\n\r\nGetting started is easy, download this simple application:\r\n<a href=\"https://activeweb.googlecode.com/svn/trunk/examples/activeweb-example-zip/\"> Simlpe ActiveWeb Project</a>\r\n\r\n<h2> Code modifications </h2>\r\n\r\nModify JDBC connection parameters in:\r\n<ul>\r\n  <li> class `app.config.DbConfig`</li>\r\n  <li> pom.xml </li>\r\n</ul>\r\n<h2>Run the application</h2>\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nmvn jetty:run\r\n</pre>\r\n\r\n<h2> Navigate with browser</h2>\r\n\r\nHit this URL: <a href=\"http://localhost:8080/activeweb-simple/\">http://localhost:8080/activeweb-simple/</a>\r\n','2013-05-13 03:30:22','2013-12-24 00:46:22','getting_started_with_hello_world_application'),(48,'MVC Pattern','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activeweb\">ActiveWeb</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">MVC Pattern</li>\r\n</ul>\r\n\r\n<h1>MVC Pattern</h1>\r\n<div id=\"generated-toc\"></div>\r\n<h2>Introduction</h2>\r\nAt the heart of the ActiveWeb project there is an MVC pattern - Model-View-Controller. An ActiveWeb project is an implementation of a famous MVC pattern but adopted for the web. In this respect, the  ActiveWeb is not any different from a number of other web frameworks, such as Struts 1, Grails, Ruby on Rails, Spring MVC and others. \r\n\r\n<h2>Model</h2>\r\n\r\nA model in the  ActiveWeb application is represented by custom objects that contain data. These can be models as in <a href=\"http://code.google.com/p/activejdbc/ ActiveJDBC\">http://code.google.com/p/activejdbc/ ActiveJDBC</a>models, or any other custom objects which represent information specific to the business domain of the application.\r\n\r\n\r\n<h2>View</h2>\r\nView in the ActiveWeb project is represented by <a href=\"http://freemarker.sourceforge.net/ FreeMarker\">http://freemarker.sourceforge.net/ FreeMarker</a> templates. While ActiveWeb can be used with other templating frameworks, FreeMarker is currently the only implementation. For reasons why FreeMarker was selected,  please refer to [FAQ].<br />\r\nActiveWeb as a framework allows for better separation of controller and view partly because it is based on [http://freemarker.sourceforge.net/ FreeMarker], thus disallowing creeping scriptlets into views.\r\n\r\n\r\n<h2>Controller</h2>\r\n\r\nA controller in  ActiveWeb is a Java class which extends class `activeweb.AppController and provides one or more public void methods. An instance of such a class is used to process web requests <br />\r\n\r\nAt the heart of the ActiveWeb project there is an MVC pattern - Model-View-Controller.<br />\r\n\r\nFor better understanding of control flow of HTTP request from controllers to views, please refer to FiveMinuteGuideToActiveWeb <br />\r\n\r\nFor more information on controllers, navigate to ControllerExplained page <br />','2013-05-13 03:36:48','2013-12-24 00:47:39','mvc_pattern'),(49,'Structure of ActiveWeb project','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activeweb\">ActiveWeb</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Structure of ActiveWeb project</li>\r\n</ul>\r\n\r\n<h1>Structure of ActiveWeb project</h1>\r\n<div id=\"generated-toc\"></div>\r\n<h2> Introduction </h2>\r\n\r\n!ActiveWeb is a Maven project, and as such has all the usual Maven conventions. This allows developers to become productive quickly, since locations of artifacts are the same as for a typical Maven Web. <br />\r\n\r\nHowever, there are some specifics regarding !ActiveWeb, which are discussed below.<br />\r\n\r\n\r\n<a href=\"http://activeweb.googlecode.com/files/aw-structure.png\">http://activeweb.googlecode.com/files/aw-structure.png</a>\r\n\r\n\r\n\r\n<h2>Configuration</h2>\r\n\r\nIn the image above, you can see that the there is a package `app.config`. This package contains 2 - 3 classes responsible for configuration of your project. !ActiveWeb does not have property files, XML or any other text based files for configuration. In fact, it barely has any configuration. Most configuration of the application is dealing with configuring database connections.For more on configuration, see here: [Configuration]<br />\r\n\r\n\r\n<h2>Location of controllers </h2>\r\n\r\nControllers are _always_ located in a package `app.controllers` (and sub-packages). At first this looks strange, and uncomfortable, but this is a requirement of the framework and a general convention. Developers after a while get used to and start to appreciate it.  A controller is a Web component, and as such is not a subject of sharing across multiple applications. This means that controllers of one web applications will not intermingle with controllers of another. <br />\r\nThis approach yields the following benefits:\r\n<ul>\r\n  <li>!ActiveWeb application structure is identical from one project to another, making it easier to onboard new developers</li>\r\n  <li>Controllers are compiled on the fly and reloaded on every request in development mode. This provides for unprecedented speed of development</li>\r\n</ul>\r\n<h2> Location of models</h2>\r\n\r\n!ActiveWeb has a good integration with <a href=\"http://code.google.com/p/activejdbc/>ActiveJDBC</a>, and the `app.models` package is for ActiveJDBC models. However, while this is a convention and a recommendation, there is no hard requirement on the part of framework to keep models in this package or even in this module. \r\nFor instance, in some of our projects, we keep models in a different shared module so that we can share a DB layer access across multiple projects. \r\n\r\n<h2>Location of services</h2>\r\nThe package `app.services` is a mere suggestion where they need to be located. If a service is not shared across many projects, it makes sense to place it into this package. If a service is used in other places, it migth actually be in a completely different module.<br />\r\n\r\n!ActiveWeb also provides automatic dependency injection of services into controllers and filters. The chosen DI container for !ActiveWeb is <a href=\"http://code.google.com/p/google-guice/\"> Google Guice</a>. For more information, please refer to [DependencyInjection Dependency injection].\r\n\r\n<h2>Location of views</h2>\r\n!ActiveWeb uses (currently) <a href=\"http://freemarker.sourceforge.net/\"> FreeMarker</a> for rendering and does not use JSPs. For reasons on this decision, please refer to  the [FAQ].<br />\r\nThe !FreeMarker templates are located in directory `src/main/webapp/WEB-INF/views`. <br />\r\nThe subdirectories indicate controller names. <br />\r\n\r\nIn an example above, there are three directories under `WEB-INF/views`: books, layouts and system<br />\r\n<ul>\r\n    <li>`books` is a directory specific to this small example project. It hosts templates for `app.controllers.BooksController`</li>\r\n    <li> `system` is a directory provided by !ActiveWeb. It contains two templates which are used by framework. Application developers are free to customize these according to the look and feel of the website.</li>\r\n    <li> The `404.ftl` is rendered when a resource not found (no controller, or action, or template)</li>\r\n    <li> the `system.ftl` is used when there is an internal system error (exceptions in controllers, etc.).</li>\r\n    <li> `layouts` is a directory to hold default and other layouts. The default layout is called `default_layout.ftl` and is invoked automatically by default (wraps every page into a layout)</li>\r\n</ul>\r\n\r\n<h2>!RequestDispatcher configuration</h2>\r\n\r\nActiveWeb framework is really a Servlet filter. As a result it is easy to set it up in a file `web.xml`. Below is a configuration file from a real commercial project. Usually these file do not get any more complicated as the one below:\r\n\r\n<pre name=\"code\" class=\"brush:xml;\">\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" version=\"2.5\"\r\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\nxsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\">\r\n\r\n    <display-name>activeweb</display-name>\r\n\r\n    <session-config>\r\n        <session-timeout>30</session-timeout>\r\n    </session-config>\r\n\r\n    <filter>\r\n        <filter-name>dispatcher</filter-name>\r\n        <filter-class>org.javalite.activeweb.RequestDispatcher</filter-class>\r\n        <init-param>\r\n            <param-name>encoding</param-name>\r\n            <param-value>UTF-8</param-value>\r\n        </init-param>\r\n        <init-param>\r\n            <param-name>exclusions</param-name>\r\n            <param-value>css,images,js,html,ico,png</param-value>\r\n        </init-param>\r\n        <init-param>\r\n            <param-name>root_controller</param-name>\r\n            <param-value>home</param-value>\r\n        </init-param>\r\n    </filter>\r\n\r\n    <filter-mapping>\r\n        <filter-name>dispatcher</filter-name>\r\n        <url-pattern>/*</url-pattern>\r\n    </filter-mapping>\r\n\r\n    <welcome-file-list>\r\n        <welcome-file>index.jsp</welcome-file>\r\n    </welcome-file-list>\r\n\r\n</web-app>\r\n</pre>\r\n\r\nThere are three parameters you can use to configure the framework:<br />\r\n<ul>\r\n  <li> <b>encoding</b> - this is what encoding to set on HTTP request and response just before using either. We recommend to always set it to UTF-8 to avoid issues with internationalization</li>\r\n  <li> <b>exclusions</b> -  this is a comma-separated list of strings on URI  which  the framework should ignore (not attempt to process are requests to controllers). These are static files, like images, HTML, CSS, JavaScript, PDF downloads, etc.</li>\r\n  <li> <b>root_controller</b> - this is a name if a controller that the framework will automatically call if no path is provided, such as: http://yourdomain.com. For this specific example, the controller called will be <code>app.controllers.HomeController</code> with default action <code>index</code>. This is equivalent to calling this URL: 1http://yourdomain.com/home1.</li>\r\n</ul>','2013-05-13 03:54:18','2013-11-13 09:13:40','activeweb_project_structure'),(50,'Controllers Explained','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activeweb\">ActiveWeb</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Controllers Explained</li>\r\n</ul>\r\n\r\n<h1>Controllers Explained</h1>\r\n<div id=\"generated-toc\"></div>\r\n<h2>Introduction</h2>\r\n\r\n\r\nControllers are at the heart of an !ActiveWeb application. These are classes wich designed to process an HTTP request. They are somewhat similar to Java Servlets, but even more similar to Ruby on Rails, Grails anall sind SpringMVC controllers. A simplest controller looks like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GreetingController extends AppController {\r\n    public void index() {}\r\n}\r\n</pre>\r\n\r\nA controller above is a working controller, even though it does not have any code in it. Such a controller is automatically mapped to a URL\r\n<pre name=\"code\" class=\"brush:java;\">\r\nhttp://host:port/context/greeting\r\n</pre>\r\n\r\n<h2>Controller actions</h2>\r\n\r\nA controller action is a method that is designed to process an HTTP request. For example, in the example above, the URL will be mapped to the \"action\" index by default. However, if the URL looked like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nhttp://host:port/context/greeting/hello\r\n</pre>\r\nthen it would map to action \"hello\":\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GreetingController extends AppController {\r\n    public void hello() {}\r\n}\r\n</pre>\r\n\r\n\r\n<h2>Controllers and HTTP methods</h2>\r\n\r\nThe HTTP specification defines methods: GET, POST, DELETE, PUT, CONNECT and HEAD. Currently ActiveWeb supports  GET, POST, DELETE, PUT and HEAD as the most used methods. \r\n\r\nAn HTTP request is not only mapped to an action, but also its HTTP method must correspond to an action\'s HTTP method. Action HTTP methods are configured with annotations, <pre name=\"code\" class=\"brush:java;\">@GET, @POST, @PUT, and @DELETE, @HEAD</pre>\r\n<hr style=\"#ccc;\">\r\n<font color=\"navy\">\r\nHowever, if annotation is missing, an action is mapped to HTTP GET method by default\r\n</font>\r\n<hr style=\"#ccc;\">\r\nThis makes it unnecessary to use annotations except cases when you need so-called \"destructive\" action. A destructive action is the one that is designed to change a state of a resource (in REST style of web programming). <br />\r\n\r\nHere is an example of a destructive action is:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class BooksController extends AppController {\r\n   @PUT\r\n   public void updateBook() {}\r\n}\r\n</pre>\r\n\r\n!ActiveWeb promotes REST-style web programming and will not allow to access an action that is configured for one HTTP method with another. For instance, if you try to access the `GreetingController#index` with HTTP method POST, you would get an exception:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nactiveweb.ControllerException: Cannot access action \r\napp.controllers.GreetingController.index with HTTP method: \'POST\' because it is \r\nconfigured for method: \'GET\'\r\n</pre>\r\n\r\n<h2>RESTful controllers</h2>\r\n\r\nA restful controller is almost the same as a regular controller. The difference is that in a standard controller you can define any number of actions and configure them with annotations to accept any HTTP methods. RESTful controllers by contrast have a fixed set of actions and these actions will accept certain HTTP methods. In order to create a RESTful controller, you need to do two things:<br />\r\n\r\n  # Add `@RESTful` annotation to the controller class <br />\r\n  # Provide a fixed set of action methods in the body of controller<br />\r\n\r\nHere is an example of a RESTful controller taken from Kitchensink application:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n@RESTful\r\npublic class RpostsController extends AppController {\r\n\r\n    public void index(){...}\r\n\r\n    public void newForm() {...}\r\n\r\n    public void create() {...}\r\n\r\n    public void show() {...}\r\n\r\n    public void destroy() {...}\r\n</pre>\r\nA RESTful controller is allowed to have 7 methods, and they all are automatically mapped to the following URSs and HTTP methods:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n==========================================================================================\r\nverb    path                   action          used for\r\n==========================================================================================\r\nGET     /books                 index 	       display a list of all books\r\nGET     /books/new_form        new_form        return an HTML form for creating a new book\r\nPOST    /books                 create 	       create a new book\r\nGET     /books/id              show            display a specific book\r\nGET     /books/id/edit_form    edit_form       return an HTML form for editing a books\r\nPUT     /books/id              update          update a specific book\r\nDELETE 	/books/id              destroy         delete a specific book\r\n</pre>\r\n\r\nThere is no need to add any other annotations to RESTful controllers.<br />\r\n\r\nIf you examine the table above, you will see that a combination of a path and HTTP method is mapped to an action. For instance, a path \'/books\' is mapped twice, with GET HTTP method to action `index`, an with POST to action `create`. This makes for elegant, REST-style URLs and leads ultimately to better user experience. \r\n\r\n<h2>Location of controllers in project</h2>\r\n\r\nThe page [StructureOfActiveWebProject Structure of a web project] states that controllers are located in a package:\r\n<pre name=\"code\" class=\"brush:java;\">\r\napp.controllers\r\n</pre>\r\n\r\n!ActiveWeb specifies that all controllers are located in this package or sub-packages. \r\n\r\n<h2>Controller paths</h2>\r\nA controller path is made of a sub-package and a controller name. A controller name is _not_ a class name, but rather underscored, flattened name part of a class simple name. <br />\r\n\r\nExample 1\r\n<pre name=\"code\" class=\"brush:java;\">\r\npackage app.controllers;\r\nclass BooksController{..} // ===> controller path: /books\r\n</pre>\r\n\r\n\r\nExample 2:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npackage app.controllers;\r\nclass UniversityBooksController{..} // ===> controller path: /university_books\r\n</pre>\r\n\r\nExample 3\r\n<pre name=\"code\" class=\"brush:java;\">\r\npackage app.controllers.depaul;\r\nclass UniversityBooksController{..} // ===> controller path: /depaul/university_books\r\n</pre>\r\n\r\n\r\nExample 4\r\n<pre name=\"code\" class=\"brush:java;\">\r\npackage app.controllers.depaul.chicago;\r\nclass UniversityBooksController{..} // ===> controller path: /depaul/chicago/university_books\r\n</pre>\r\n\r\n\r\n\r\n<h2>V in MVC</h2>\r\n\r\n!ActiveWeb does not use JSPs. Period. Instead it uses <a href=\"http://freemarker.sourceforge.net/\"> FreeMarker (FM).</a> The FM templates are located in this directory:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nsrc/main/webapp/WEB-INF/views\r\n</pre>\r\n\r\n\r\n<h2>Mapping to views</h2>\r\n\r\nThe directory: `src/main/webapp/WEB-INF/views` has subdirectories. These subdirectories are named after controller paths. This makes it easy to find FM templates (views)  associated with controllers. \r\n\r\n<h3>Default mapping to views</h3>\r\n\r\nUnder normal circumstances, the HTTP request is applied to an action, and then the framework passes control to a view. Under these conditions, there is no need for any configuration or code. <br />\r\n\r\nExample: if a HTTP GET request is sent to this URL: `http://hostname/context/greeting`, then the framework will invoke a GreetingControoller, and by default action `index`:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GreetingController extends AppController {\r\n    public void index() {}\r\n}\r\n</pre>\r\n\r\nAfter execution of action, the !ActiveWeb will find a template: \r\n<pre name=\"code\" class=\"brush:java;\">\r\nsrc/main/webapp/WEB-INF/views/greeting/index.ftl\r\n</pre>\r\nwill render it, and send results to the browser. <br />\r\n\r\n!ActiveWeb in the same spirit as ActiveJDBC does not have any configuration files. Most actions are based on conventions. <br />\r\n\r\n<h3>Override mapping to relative views</h3>\r\n\r\nIn some cases, you need to override default mapping to views. You will use a `render()` method for this: \r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GreetingController extends AppController {\r\n    public void index() {\r\n        //some code here\r\n        render(\"show\");\r\n   }\r\n}\r\n</pre>\r\n\r\nThe `render(\"show\");` will signal to !ActiveWeb  that instead of \"index\", you want to render \"show\".\r\nSince you did not provide any other information, !ActiveWeb will assume that this view will be found at the same location:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nsrc/main/webapp/WEB-INF/views/greeting/show.ftl\r\n</pre>\r\n\r\n<h3>Override mapping to absolute views</h3>\r\n\r\nSometimes you need to call a view that \"belongs\" to a different controller, or even some shared view. In that case, you can specify an \"absolute\" path to a view like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GreetingController extends AppController {\r\n    public void index() {\r\n         //some code here\r\n         render(\"/shared/show\");\r\n   }\r\n}\r\n</pre>\r\n!ActiveWeb will use the following view to render:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nsrc/main/webapp/WEB-INF/views/shared/show.ftl\r\n</pre>\r\n\r\n<h2>Passing data to views</h2>\r\n\r\nPassing data to views is done with two methods:\r\n<ul>\r\n  <li> assign(name, value)</li>\r\n  <li>view(name, value)</li>\r\n</ul>\r\nThere is no difference between these methods, they are aliases. <br />\r\n\r\nExample:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GreetingController extends AppController {\r\n    public void index() {\r\n        view(\"name\", \"John Doe\");\r\n   }\r\n}\r\n</pre>\r\n\r\nThe corresponding view can look like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nHello, my name is: ${name}\r\n</pre>\r\n\r\nYou could have guessed that the output will look like:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n\"Hello, my name is: John Doe\"\r\n</pre>\r\n\r\n<h2>Getting request parameters</h2>\r\nGetting request parameters is the most important part of any web application. !ActiveWeb provides a few methods to achieve this goal:\r\n\r\n<h3>getting a single parameter</h3>\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GreetingController extends AppController {\r\n    public void index() {\r\n        String name = param(\"name\");\r\n   }\r\n}\r\n</pre>\r\n\r\n<h3>getting all parameters</h3>\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GreetingController extends AppController {\r\n    public void index() {\r\n        Map<String, String[]> allParams = params();\r\n   }\r\n}\r\n</pre>\r\n\r\n\r\n<h3>getting all values for a single parameter</h3>\r\n\r\nThis is in cases for submit parameters with multiple values, such as selects:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GreetingController extends AppController {\r\n    public void index() {\r\n        List<String> states = params(\"states\");\r\n   }\r\n}\r\n</pre>\r\n\r\n\r\n<h3>getting a first value from each submitted parameter</h3>\r\n\r\nThis is in cases for submit parameters with multiple values, such as selects:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GreetingController extends AppController {\r\n    public void index() {\r\n        Map<String, String> firstValues = params1st()\r\n   }\r\n}\r\n</pre>\r\nThe return value is a map where keys are names of all parameters, while values are first value for each parameter, even if such parameter has more than one value submitted.\r\n\r\n<h2>Ajax APIs</h2>\r\n\r\n<h3>detecting if a request is Ajax</h3>\r\n\r\nControllers (and filters alike) provide a simple way to detect if a request is a from an XmlHttpRequest in browser:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GreetingController extends AppController {\r\n   public void index() {\r\n      if(xhr()){\r\n         ...\r\n      }else{\r\n         ...\r\n      }\r\n   }\r\n}\r\n</pre>\r\nThe `xhr();` method also has an alias: `isXhr();`.\r\n\r\n<h3>Responding to Ajax call directly</h3>\r\n\r\n!ActiveWeb provides a simple method `respond(..)`:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GreetingController extends AppController {\r\n    public void index() {\r\n        respond(\"<message>hello</message>\").contentType(\"text/xml\").status(200);\r\n   }\r\n}\r\n</pre>\r\n\r\nIt is easy to use this method to send plain text, XML, JSON, or any other text format as a response to Ajax call.\r\n\r\n<h3>Responding to Ajax call with a view</h3>\r\nMethod `respond()` is usually used to respond with quick HTML snippet, or generated JSON or other format. However, if you need to respond with a more complex structure, and potentially generate it with a view and use a full power of a view expression language for condition, iteration, etc, you can use a regular `render()` method, the one that is also used for rendering HTML pages. However, for Ajax calls, layouts are not necessary, so the call will look like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class AjaxController extends AppController {\r\n    public void index() {\r\n        //some code here\r\n        render().noLayout();\r\n   }\r\n}\r\n</pre>\r\n\r\nThe URL for this call will look like this: `http://host/context/ajax`. The Ajax actions act just like any other actions, they support all HTTP methods and annotations.\r\n\r\n\r\n\r\n<h2>Downloading of files</h2>\r\n\r\nThere are a few calls you can use for file download:\r\n<ul>\r\n  <li> sending files to a client:</li>\r\n</ul>\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GetPdfController extends AppController {\r\n   public void index() {   \r\n       File f;\r\n       //... obtain file\r\n       sendFile(f).contentType(\"application/pdf\").status(200);\r\n   }\r\n}\r\n</pre>\r\n\r\n<ul>\r\n  <li>Streaming bytes to a client:</li>\r\n</ul>\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GetPdfController extends AppController {\r\n    public void index() {   \r\n        byte[] bytes;\r\n        //... obtain data\r\n        outputStream(\"application/pdf\").write(bytes);\r\n   }\r\n}\r\n</pre>\r\n<ul>\r\n  <li>Reading from InputStream and sending to client:</li>\r\n</ul>\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GetPdfController extends AppController {\r\n    public void index() {   \r\n        InputStream in;\r\n        //... point input stream to data\r\n        streamOut(in).contentType(\"applicaiton/pdf\");\r\n   }\r\n}\r\n</pre>\r\n\r\n<h2>Uploading files</h2>\r\n\r\nControllers have a built-in facility for uploading data:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class UploadController extends AppController {\r\n    public void index() {   \r\n\r\n         Iterator<FormItem> iterator = uploadedFiles();\r\n        \r\n         if (iterator.hasNext()){\r\n             FormItem item = iterator.next();\r\n             String name = item.getFileName();\r\n          if(item.isFile()) {\r\n              InputStream in = item.getInputStream();\r\n              ///process data\r\n            }               \r\n      }\r\n}\r\n</pre>\r\n\r\n\r\n<h2>Session management</h2>\r\nA session object is accessed with a `session()` call inside controllers:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class HomeController extends AppController {\r\n   public void index() {   \r\n       // get a value\r\n       session().put(\"name\", value);\r\n   }\r\n</pre>\r\n\r\nOther methods available on a session object are:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n  session().get(String);            // to get a single value\r\n  session().remove(name);           // remove object by name\r\n  session().names();                // to get a list of all objects in session\r\n  session().getCreationTime();      // obvious\r\n  session().invalidate();           // invalidate session\r\n  session().setTimeToLive(seconds); // set time to live\r\n</pre>\r\n\r\n<h2>Cookies management</h2>\r\n<h3>Sending cookies to a client</h3>\r\n<pre name=\"code\" class=\"brush:java;\">\r\nsendCookie(Cookie);               //sends a cookie to client\r\nsendCookie(name, value);          //simple short cut to do the same as above \r\nsendPermanentCookie(name, value); //will send a cookie with time to live == 20 years\r\n</pre>\r\n\r\n<h3>Getting cookies from request</h3>\r\n<pre name=\"code\" class=\"brush:java;\">\r\nList<Cookie> cookies();//gets a list of all cookies sent in request\r\nCookie cookie(name);   //retrieve an individual cookie\r\ncookieValue(name);     //retrieve a cookie value by name of cookie\r\n</pre>\r\n\r\n<h2>Logging</h2>\r\n\r\nControllers already have a way to log information to a log system. These methods are available for logging:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nlogDebug(..);\r\nlogWarning(..);\r\nlogError(..);\r\nlogInfo(..);\r\n</pre>\r\n\r\n<h2>Threading issues</h2>\r\nControllers are thread safe. An instance of a controller is created to process each and every request, and then discarded. This means that if you create instance variables in controller, this variable will not interfere with another value form another request. <br />\r\n\r\nHowever, creation of instance variables in controller classes is considered a bad coding practice in general, because it is vulnerable to side effects. While controllers are objects in OO language (Java), they need to be treated as procedural devices when it comes to processing HTTP requests. This means that every action should be completely self-sufficient and not rely on some instance variable set by another action or that a method invoked from an action should not depend on an instance variable set higher up the stack.','2013-05-13 04:52:36','2013-05-14 04:56:21','controllers_explained'),(51,'Dependency Injection','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activeweb\">ActiveWeb</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Dependency Injection</li>\r\n</ul>\r\n\r\n<h1>Dependency Injection</h1>\r\n<div id=\"generated-toc\"></div>\r\n<h2> Introduction </h2>\r\n\r\nDependency injection is an integral part of a typical Java application. !ActiveWeb supports seamless integration with <a href=\"http://code.google.com/p/google-guice/\"> Google Guice</a>. \r\n\r\nAt the heart of a Google Guice DI, there is a concept of a module. \r\n\r\n<h2>Creation of Guice module</h2>\r\n\r\nLets say we have a simple interface Greeter:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic interface Greeter {\r\n    String greet();\r\n}\r\n</pre>\r\nand implementation of this interface: \r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GreeterImpl implements Greeter {    \r\n    public String greet() {\r\n        return \"Hello from real greeter\";        \r\n    }\r\n}\r\n</pre>\r\n\r\nWe can then create a new Guice module:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GreeterModule extends AbstractModule {\r\n    protected void configure() {\r\n        bind(Greeter.class).to(GreeterImpl.class).asEagerSingleton();\r\n    }\r\n}\r\n</pre>\r\n\r\nIn this module, we are binding a `GreeterImpl` to `Greater` interface as a singleton. You can call `bind()` method many times, setting up your object graph, but for this primitive example, we are using it only once.\r\n\r\n<h2>Injection of module into the application</h2>\r\n\r\nThe injection of a Guice module is executed as one line of code inside `AppBootstrap` class, like so:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class AppBootstrap extends Bootstrap {\r\n    public void init(AppContext context) {       \r\n        setInjector(Guice.createInjector(new GreeterModule()));\r\n    }\r\n}\r\n</pre>\r\n\r\nThe `Guice.createInjector(..)` takes a varargs, meaning you can inject multiple modules at once. \r\n\r\n<h2>Consumption of injected dependencies</h2>\r\n\r\nWhenever you need a service inside a controller, you will use an `@Inject` annotation provided by Google Guice:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class HelloController extends AppController {\r\n    @Inject\r\n    private Greeter greeter;\r\n    public void index() {\r\n        view(\"message\", greeter.greet());\r\n    }\r\n}\r\n</pre>\r\nThe `greeter` (line 3) method is set by the framework and injected an instance of a `GreeterImpl` onto the `HelloController` controller just before it executes an action. Once the controller has a reference to the service, it can consume it (line 6).<br />\r\n\r\nWhere can you inject dependencies this way? There are three general application components that are injected dependencies:\r\n<ul>\r\n  <li><b>Controllers</b></li>\r\n  <li><b>Controller Filters</b></li>\r\n  <li><b>Custom Tags</b></li>\r\n</ul>\r\nThe technique is exactly the same, just add @Inject annotation that requires a service from a Guice module, and you can use it in code inside the component\r\n\r\n\r\n<h2>Mocking and testing</h2>\r\n\r\nIn testing, it is typical to replace real implementation of services with mocks. For explanation of mocks and stubs, follow this link <a href=\"http://martinfowler.com/articles/mocksArentStubs.html\">http://martinfowler.com/articles/mocksArentStubs.html</a>.\r\n\r\nWhy would someone want to use a mock instead of a real implementation? Here are some reasons:\r\n<ul>\r\n  <li> Real implementation submits a sensitive transaction (you do not want that during a build!)</li>\r\n  <li>Real implementation requires a network connection to external resource</li>\r\n  <li> Real implementation is really... slow.</li>\r\n  <li>Real implementation does not always cover all conditions in your code at a given time</li>\r\n  <li>many others </li>\r\n</ul>\r\nThe bottom line, is this: when you use a real implementation, your test is not only testing your code, but also the implementation of a service, mushing everything  together. <br />\r\n\r\nNow, lets create an mock service:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GreeterMock implements Greeter {\r\n    public String greet() {\r\n        return \"Hello from \" + this.getClass().toString();  \r\n    }\r\n}\r\n</pre>\r\n\r\nand a new mock module we will use in tests:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class GreeterMockModule extends AbstractModule {\r\n    @Override\r\n    protected void configure() {\r\n        bind(Greeter.class).to(GreeterMock.class).asEagerSingleton();\r\n    }\r\n}\r\n</pre>\r\n\r\nOnce we have this done, we can inject the mock module during the test and test our controller\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class HelloControllerSpec extends ControllerSpec {\r\n    @Before\r\n    public void before() {\r\n        setInjector(Guice.createInjector(new GreeterMockModule()));\r\n    }\r\n    @Test\r\n     public void shouldInjectMockService() {\r\n         request().get(\"index\");\r\n         a(assigns().get(\"message\")).shouldBeEqual(\"Hello from class app.services.GreeterMock\");\r\n     }\r\n }\r\n</pre>\r\n\r\nLets examine this test line by line:\r\n<ul>\r\n  <li>Line 4 - this is where we tell the test scaffolding which module to use, and we choose a mock module</li>\r\n  <li>Line 9 - we construct a GET request for !HelloController, action \"index\" and execute the controller.</li>\r\n  <li>Line 10 - we inspect that the controller did in fact send `message` to a view, but the value of this message will be generated</li>\r\n</ul>','2013-05-13 07:52:58','2013-05-13 08:31:05','dependency_injection'),(52,'Database Configuration','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activeweb\">ActiveWeb</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Database Configuration</li>\r\n</ul>\r\n\r\n<h1>Database Configuration</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\n<h2>Introduction </h2>\r\n\r\n!ActiveWeb _does not use_ property files, XML, Yaml or any other text files for configuration. The amount of configuration in !ActiveWeb project in general is condenced to absolute minimum, and whatever configuration still needs to be done is done in Java code. There are a few advantages of this approach: auto-suggestions by IDE, documentation at finger tips, and some level of comfort from Java compiler.<br />\r\n\r\n!ActiveWeb uses two application classes for configuration: `app.config.AppControllerConfig` and `app.config.DbConfig`. Both of these classes are initialized from a third application level class called `app.config.AppBootstrap`.<br />\r\n\r\n\r\n<h2>Database connections configuration</h2>\r\nIn order to configure database connection, an application needs to provide a class called `app.config.DbConfig`. \r\nIt is used to configure database connections for various <strong>environments and modes</strong>.\r\n\r\n<h3>What is an environment?</h3>\r\nAn !ActiveWeb environment is a computer where a  project executes. In the process of software development there can be a number of environments where a project gets executed, such as development, continuous integration, QA, staging, production and more. The number of environments for !ActiveWeb is custom for every project.<br />\r\n \r\n<h3>How to specify an environment</h3>\r\nAn environment is specified by an environment variable: <code>ACTIVE_ENV</code> Every computer where an !ActiveWeb project gets executed, needs to have this variable specified. This value is used to determine which DB connections need to be initialized.\r\n\r\n<h3>Default environment</h3>\r\nIn case an environment variable <code>ACTIVE_ENV</code> is not provided, the framework defaults to \"development\". \r\n\r\n<h3>What is a mode?</h3>\r\n!ActiveWeb defines two modes of operation: \"standard\", which is also implicit, and \"testing\". Standard mode is used during regular run of the program, and testing used during the build when tests are executed.\r\n!ActiveWeb promotes a style of development where one database used for testing, but a different one used under normal execution.<br />\r\nWhen tests are executed, a \"test\" database is used, and when a project is run in a normal mode, a \"development\" database is used. Having a separate database for testing ensures safety of data in the development database.\r\n\r\n<h3>Example configuration</h3>\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class DbConfig extends AbstractDBConfig {\r\n    public void init(AppContext context) {\r\n        environment(\"development\").jndi(\"jdbc/kitchensink_development\");\r\n        environment(\"development\").testing().jdbc(\"com.mysql.jdbc.Driver\", \"jdbc:mysql://localhost/kitchensink_development\", \"root\", \"****\");\r\n        environment(\"hudson\").testing().jdbc(\"com.mysql.jdbc.Driver\", \"jdbc:mysql://172.30.64.31/kitchensink_hudson\", \"root\", \"****\");\r\n        environment(\"production\").jndi(\"jdbc/kitchensink_production\");\r\n     }\r\n}\r\n</pre>\r\nThe code above is an example from Kitchensink project. Lets examine it line by line.\r\n<ul>\r\n<li> Line 3: here we provide configuration for a \"standard\" mode in \"development\" environment. This DB connection will be used when the application is running under normal conditions in development environment.</li>\r\n <li> Line 4: This is a configuration of DB connection for \"development\" environment, but for \"testing\" mode. This connection will be used by unit and integration tests during the build.</li>\r\n <li> Line 5: This is a configuration of DB connection for \"hudson\" environment, but for \"testing\" mode. The \"hudson\" environment is a computer where this project is built by Hudson - the continuous integration server. Since Hudson  computer is fully automated, and this project is not running there in \"standard\" mode, there is no standard configuration for hudson environment, just one for testing.</li>\r\n <li> Line 6: This is configuration similar to one on line 3, but for \"production\" environment.</li>\r\n</ul>\r\n<hr style=\"#ccc;\">\r\n<font color=\"navy\">Configuration of a database connection is just that - configuration. This code only configures a connection, but does not open it. To open a connection, you need to use DBConnectionFilter, for more, see [ControllerFilters]</font>\r\n<hr style=\"#ccc;\">','2013-05-13 08:28:19','2013-05-14 04:57:13','database_configuration'),(53,'DB Migrations','<h2> Database Migrations </h2>\r\n\r\nActiveWeb projects databases evolve similar to how this is done in Ruby on Rails projects. However, there are some differences too. <br />\r\n\r\nPlease, see <a href=\"dbmigrations\"> DBMigrations</a> on to understand the migration process. This process would be the same whether you use ActiveJDBC or any other database  technology.<br />\r\n\r\nThis process is our recommendation based on experience. There is no hard dependency of ActiveWeb on this process. ','2013-05-13 08:34:18','2013-12-08 22:06:12','database_migrations'),(54,'Controller Filters','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activeweb\">ActiveWeb</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Controller Filters</li>\r\n</ul>\r\n\r\n<h1>Controller Filters</h1>\r\n<div id=\"generated-toc\"></div>\r\n<h2> Introduction </h2>\r\nController filters are similar to that of Servlet filters, but designed to wrap execution of controllers. They can be used for many tasks that need to trigger before and after execution of a controller, such as login in, loggin, opening a DB connection, timing, etc. Controller filters are implementation of a <a href=\"http://en.wikipedia.org/wiki/Chain-of-responsibility_pattern\"> Chain of responsibility design pattern.</a><br />\r\n\r\n\r\nFilters are almost as powerful as controllers. They can inspect any aspects of a request, including request parameters, headers, etc. They can also pre-empt controllers and send different responses than a controller (think of a permission access filter for example, which will redirect to a login screen in case there is an attempt to access a protected resource).<br />\r\n\r\n\r\nAll filters implement this interface:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npackage activeweb;\r\npublic interface ControllerFilter {\r\n    void before();\r\n    void after();\r\n    void onException(Exception e);\r\n}\r\n</pre>\r\n\r\n<h2>Filter configuration</h2>\r\n\r\nConfiguration of filters is done in a class called `app.config.AppControllerConfig`, which needs to extend `activeweb.AbstractControllerConfig`. This class provides ways to bind filters to controllers. It has coarse grain methods for binding as well as\r\nfine grained.\r\n<hr style=\"#ccc;\">\r\n<font color=\"navy\">Filters before() methods are executed in the same order as filters are registered.</font>\r\n<hr style=\"#ccc;\"\r\n<h3>Adding global filters</h3>\r\n\r\nAdding a global filter adds it to all controllers. It makes sense to use this to add timing filters, logging filters, etc.\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class AppControllerConfig {\r\n    public void init(AppContext context) {\r\n        addGlobalFilters(new TimingFilter());\r\n  }\r\n}\r\n</pre>\r\n\r\n\r\n<h3>Adding global filters to all controllers, except some</h3>\r\n\r\nIn some cases,  you need to add filters to all controllers, except a few. \r\nFor example, you might have a security filter, and there is no point to add it to non-secure controllers, or you have a DBConnectionFilter, and you do not want to open connections for controllers which you know will not use a DB connection (expensive resource). Then you can exclude some controllers from global filters:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class AppControllerConfig {\r\n    public void init(AppContext context) {\r\n        addGlobalFilters(new TimingFilter());\r\n        addGlobalFilters(new DBConnectionFilter()).exceptFor(HomeController.class);\r\n  }\r\n}\r\n</pre>\r\n\r\nThe `exceptFor` method, takes a vararg, so you can pass multiple controllers there. \r\n\r\n\r\n<h3>Adding controller filters to specific controllers</h3>\r\n\r\nTo add filters to specific controllers:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class AppControllerConfig {\r\n    public void init(AppContext context) {\r\n        add(new TimingFilter()).to(HomeController.class);\r\n  }\r\n}\r\n</pre>\r\n\r\nBoth the \"add()\" an the \"to()\" methods take in varargs, allowing to bind multiple filters to multiple controllers in one line of code.\r\n<hr style=\"#ccc;\">\r\n<font color=\"navy\">Filters\' after() methods are executed in the opposite order as filters are registered.</font>\r\n<hr style=\"#ccc;\">>\r\n<h3>Adding filters to specific actions</h3>\r\n \r\nHere is an example of adding a filter to specific actions:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class AppControllerConfig {\r\n    public void init(AppContext context) {\r\n        add(new TimingFilter(), new DBConnectionFilter()).to(PostsController.class).forActions(\"index\", \"show\");\r\n  }\r\n}\r\n</pre>\r\n\r\n<h2>Exception handling</h2>\r\n\r\nThe `void onException(Exception e);` method can be used to handle exceptions occurred during execution of a controller of other (inner) filters. It is typical on a project to register a \"catch all filter\" as a global top-most filter. You probably saw default error page coming from the application server in cases when there is a failure in the application. If you declare a \"catch all \" filter, this can be avoided, and users would see a friendly page with a message.<br />\r\n\r\nHere is an example:\r\n \r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class CatchAllFilter extends HttpSupportFilter {\r\n    public void onException(Exception e) {\r\n        logError(e.toString(), e);\r\n        render(\"/system/error\", Collections.map(\"message\", \"Apologies for inconvenience\");\r\n    }\r\n}\r\n</pre>\r\n\r\nIn the code snippet above, the `CatchAllFilter` will be given a chance to log an exception to a log system, but then also to display a friendly styled error page in layout.\r\n\r\n<h2>Out of the box filters</h2>\r\n\r\n!ActiveWeb provides a number of filters for easy configuration of projects. \r\n\r\n<h3>DBConnectionFilter</h3>\r\nDBConnectionFilter opens a connection before execution of a controller and closes it after execution. \r\nHere is an example of usage of this filter from Kitchensink project:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class AppControllerConfig extends AbstractControllerConfig {\r\n    public void init(AppContext context) {\r\n        add(new DBConnectionFilter()).to(PostsController.class, RpostsController.class);\r\n    }\r\n}\r\n</pre>\r\nIn the example above, this filter is attached only to controllers !PostsController and !RpostsController, presumably other controllers do not require a DB connection. If you use <a href=\"http://code.google.com/p/activejdbc/\"> ActiveJDBC</a> for persistence layer, you do not need to do anything else. If you just want to get access to the underlying DB connection, you can do this inside a controller or inner filter:\r\n<pre name=\"code\" class=\"brush:java;\">\r\njava.sql.Connection connection = Base.connection();\r\n</pre>\r\nwhich gives you a full control over this connection.\r\n\r\n<h3>!TimingFilter</h3>\r\n\r\nTiming filter times how long a request takes to process and logs this to a logging system inside its `after()` method. <br />\r\n\r\nIt is best to have a timing filter to be registered as a global filter:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class AppControllerConfig extends AbstractControllerConfig {\r\n    public void init(AppContext context) {\r\n        addGlobalFilters(new TimingFilter());\r\n        //..register other filters\r\n    }\r\n}\r\n</pre>\r\nExample output from `TimingFilter`:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n52248 [920503681@qtp-1457284258-3] INFO activeweb.controller_filters.TimingFilter - Processed request in: 14 milliseconds\r\n</pre>\r\n\r\n<h3>!RequestPropertiesLogFilter</h3>\r\nThis filter will log properties of a request to a log system. It is useful for debugging. \r\nExample output of this filter:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n32644 [2132827533@qtp-1457284258-0] INFO activeweb.controller_filters.RequestPropertiesLogFilter - \r\nRequest URL: http://localhost:8080/kitchensink/\r\nContextPath: /kitchensink\r\nQuery String: null\r\nURI Full Path: /kitchensink/\r\nURI Path: /\r\nMethod: GET\r\n</pre>\r\n\r\n<h3>!RequestParamsLogFilter</h3>\r\nThis filter will log parameters of the request, here is an example:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n176575 [2090322800@qtp-1699024671-2] INFO activeweb.controller_filters.RequestParamsLogFilter - \r\nParam: content=content to be determined...\r\nParam: id=3\r\nParam: author=Igor Polevoy\r\nParam: title=What good for Ruby is good for Java: JSpec\r\n</pre>\r\n\r\n<h3>!HeadersLogFilter</h3>\r\nThis filter will dump all HTTP request headers: \r\n<pre name=\"code\" class=\"brush:java;\">\r\n176576 [2090322800@qtp-1699024671-2] INFO activeweb.controller_filters.HeadersLogFilter - \r\nHeader: Accept-Language=en-us,en;q=0.5\r\nHeader: Cookie=JSESSIONID=6trloxem6xib; remember_me=3f654b9f-8abd-4693-bf62-43ccc7c6\r\nHeader: Host=localhost:8080\r\nHeader: Content-Length=106\r\nHeader: Accept-Charset=ISO-8859-1,utf-8;q=0.7,*;q=0.7\r\nHeader: Referer=http://localhost:8080/kitchensink/posts/edit_post/3\r\nHeader: Accept-Encoding=gzip,deflate\r\nHeader: Keep-Alive=115\r\nHeader: User-Agent=Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.16) Gecko/20110323 Ubuntu/10.10 (maverick) Firefox/3.6.16\r\nHeader: Content-Type=application/x-www-form-urlencoded\r\nHeader: Connection=keep-alive\r\nHeader: Accept=text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n</pre>\r\n\r\n<h3>How to change log level of provided filters on the fly</h3>\r\n\r\nYou can add a filter to !AppContext before registration:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class AppControllerConfig extends AbstractControllerConfig {\r\n\r\n    public void init(AppContext context) {\r\n\r\n        HeadersLogFilter headersLogger = new HeadersLogFilter();\r\n        context.set(\"headersLogger\", headersLogger);\r\n        \r\n        addGlobalFilters(new TimingFilter(), new RequestPropertiesLogFilter(), new RequestParamsLogFilter(),\r\n                headersLogger);\r\n    }\r\n}\r\n</pre>\r\nThis will ensure that you can get to this filter from any controller: \r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class AdminController extends AppController {\r\n\r\n    public void setHeadersLogLevel() {\r\n        //how to disable logging of headers at run time:\r\n        appContext().get(\"headersLogger\", HeadersLogFilter.class).logAtLevel(Level.valueOf(param(\"log_level\")));\r\n    }\r\n}\r\n</pre>\r\n\r\nMoving log level of these filters above or below current log system log level is easy and very useful. In production you might want to have these at DEBUG level, but you might want to temporarily enable logging to trace some problem, then turn it off again, all without having to redeploy or restart a server.','2013-05-13 08:55:23','2013-05-14 04:59:44','controller_filters'),(55,'Testing','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activeweb\">ActiveWeb</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Testing</li>\r\n</ul>\r\n\r\n<h1>Testing</h1>\r\n<div id=\"generated-toc\"></div>\r\n<h2> TDD/BDD with !ActiveWeb </h2>\r\n\r\n!ActiveWeb shines when it comes to testing. Specifically, it promotes TDD/BDD approach to testing of wen applications. At the heart, it uses <a href=\"http://www.junit.org/\"> JUnit</a> as a testing framework, but it provides a number of test classes to be sub-classed for  various purposes. !ActiveWeb allows to do a full test of any web functionality during a regular build. !ActiveWeb provides a number of classes for testing.\r\n\r\n!ActiveWeb classes that make it easy to test all have a suffix \"Spec\". This is a nod to RSpec, but also a good practice - think of these not as tests that assert values, as is usually done in Java projects, but as specs, or specifications of behavior. The more you think of them as specifications/blueprints, the more you will think of writing them before writing actual implementations. \r\n\r\n<hr style=\"#ccc;\">\r\n<b>This page is not an exhaustive list of test APIs, just a directional guide and a how-to.</b>\r\n<hr style=\"#ccc;\">\r\n<h2>JSpec </h2>\r\n\r\nWhile !ActiveWeb tests are written with the popular JUnit testing framework, traditionally expectations are written with <a href=\"http://code.google.com/p/activejdbc/wiki/JSpec\"> JSpec</a>.<br />\r\n\r\n<b> <a href=\"http://code.google.com/p/activejdbc/wiki/JSpec\"> Please, follow this link to learn more about JSpec</a>. </b>\r\n\r\n\r\n\r\n<h2>DBSpec for database tests</h2>\r\n\r\n`activeweb.DBSpec`  is a super class for tests that require a database connection. It is integrated with !ActiveWeb configuration and will automatically open and close a database connection before and after a test respectively. <br />\r\nIt is customary for !ActiveWeb projects to use a database for testing that is different than the one that is used for running the project live even on a developers workstation. This makers it easy to preserve data in place in the \"development\" database, and still use the full power of database CRUD access to your test database. \r\n<br />\r\nFor example, you could have some user data in a development database which will allow you to log in, and perform other operations, and yet you can run test logic against your test database, destroy and re-create any data in it, without having to destroy your development database.<br />\r\n\r\nWhile DBSpec is usually used to test models, it can be used to test any code that require a database connection. If you need to get a hold of that connection, you can use class Base from ActiveJDBC:\r\n<pre name=\"code\" class=\"brush:java;\">\r\njava.sql.Connection connection = Base.connection();\r\n</pre>\r\n\r\n<h4>Configuration</h4>\r\nDatabase configuration is described on DatabaseConfiguration page. DBSpec class will look for connections configured with a method `testing()`. Example taken from DatabaseConfiguration page:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class DbConfig extends AbstractDBConfig {\r\n    public void init(AppContext context) {\r\n        environment(\"development\").jndi(\"jdbc/kitchensink_development\");\r\n        environment(\"development\").testing().jdbc(\"com.mysql.jdbc.Driver\", \"jdbc:mysql://localhost/kitchensink_development\", \"root\", \"****\");\r\n        environment(\"hudson\").testing().jdbc(\"com.mysql.jdbc.Driver\", \"jdbc:mysql://172.30.64.31/kitchensink_hudson\", \"root\", \"****\");\r\n        environment(\"production\").jndi(\"jdbc/kitchensink_production\");\r\n    }\r\n}\r\n</pre>\r\n\r\nSpecifically, line 4 configures a test connection to be used during the test.\r\nIn case you work with multiple databases, you can configure more than one test connection. DBSpec will open all connections marked for tests.\r\n\r\n<h3>Transaction management</h3>\r\n\r\nDBSpec will  start a transaction before the test and roll it back after the test, ensuring integrity of data in a test database, and also that different tests would not affect one another by modifying data in the database. \r\n\r\n<h3> Example of a DBSpec test </h3>\r\n\r\nLets say we are developing a blog, and we need to persist a post. A post will have title, content and author. All these attributes are required. A test will look like this then:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class PostSpec extends DBSpec {\r\n    @Test\r\n    public void shouldValidateRequiredAttributes() {\r\n        Post post = new Post();\r\n        a(post).shouldNotBe(\"valid\");\r\n        a(post.errors().get(\"author\")).shouldBeEqual(\"Author must be provided\");\r\n        post.set(\"title\", \"fake title\", \"author\", \"fake author\", \"content\", \"fake content\");\r\n        a(post).shouldBe(\"valid\");\r\n        post.save();\r\n        a(Post.count()).shouldBeEqual(1);\r\n    }\r\n}\r\n</pre>\r\n\r\n\r\ntechnically speaking you can use it for any test requiring a connection, but it also easy to use for Model tests. Model tests are tests for ActiveJDBC models. In case you use Hibernate or another persistence framework, you will have to setup connections in a different way.<br />\r\n\r\n\r\nHere is an example of a model we are testing:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class Post extends Model {\r\n    static {\r\n        validatePresenceOf(\"title\", \"content\");\r\n        validatePresenceOf(\"author\").message(\"Author must be provided\");\r\n    }\r\n}\r\n</pre>\r\n\r\n\r\n<h2> !ControllerSpec - test your controllers</h2>\r\n\r\n`activeweb.ControllerSpec` is a super class for controller tests. This class is used by unit tests that test a single controller. Controllers are tested by simulating a web request to a controller (no physical network is involved, and no container initialized).\r\n<hr style=\"#ccc;\">\r\n<b>All APIs available to controllers in !ControllerSpec are also available to all other controller and integration specs</b>\r\n<hr style=\"#ccc;\">\r\n\r\n<h3>Naming convention</h3>\r\nSubclasses must follow a simple naming convention: subclass name must be made of two words: controller short class name and word \"Spec\". Example, if there is a controller:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npackage app.controllers;\r\npublic class GreeterController extends AppController {\r\n   ...\r\n }\r\n</pre>\r\n\r\nthen the test will look like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npackage app.controllers;\r\npublic class GreeterControllerSpec extends ControllerSpec {\r\n ...\r\n }\r\n</pre>\r\n<hr style=\"#ccc;\">\r\nNote that the package is the same for test as it is for controller, since !ActiveWeb will use reflection to determine the controller to be tested\r\n<hr style=\"#ccc;\">\r\n<h3>Simulating different HTTP requests</h3>\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class HelloControllerSpec extends ControllerSpec {\r\n    @Test\r\n    public void shouldSendGetToIndex() {\r\n        request().get(\"index\");\r\n     }\r\n }\r\n</pre>\r\n\r\nIn a snippet above on line 4, the method `request()` allows to simulate a call to a controller !HomeController. This line reads like this:<br />\r\n\r\nSend GET request to `HomeController`, action `index`. There are other methods for sending different HTTP methods:\r\n<ul>\r\n  <li> post(action)</li>\r\n  <li> put(action)</li>\r\n  <li> delete(action)</li>\r\n</ul>\r\n<h3>Simulating parameters with HTTP requests</h3>\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class HelloControllerSpec extends ControllerSpec {\r\n    @Test\r\n    public void shouldSendParamsToIndex() {\r\n        request().param(\"first_name\", \"John\").param(\"last_name\", \"Deere\").get(\"index\");\r\n        a(assigns().get(\"message\")).shouldBeEqual(\"Hello, John Deere, welcome back!\");\r\n    }\r\n}\r\n</pre>\r\n\r\nThis test is a little more complex, we are sending two parameters with the request, and also checking the value controller assigned to a view.  <br />\r\n\r\nThe above example can be simplified to use a` params()` form that takes an even number of names an values for parameters:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class HelloControllerSpec extends ControllerSpec {\r\n    @Test\r\n    public void shouldSendParamsToIndex() {\r\n         request().params(\"first_name\", \"John\", \"last_name\", \"Deere\").get(\"index\");\r\n         a(assigns().get(\"message\")).shouldBeEqual(\"Hello, John Deere, welcome back!\");\r\n    }\r\n}\r\n</pre>\r\n\r\nThis makes it a bit easier to read. \r\n\r\n\r\n<h3> Integrating views</h3>\r\nHow many times you wished developing a web application in Java to be able to generate a full HTML from the application in test, as if the application was running?<br />\r\nWell, with !ActiveWeb you can finally do this by using the `integrateViews()` method.<br />\r\n\r\nHere is a modification on the previous example, but with the `integrateViews()`\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class HelloControllerSpec extends ControllerSpec {\r\n    @Test\r\n    public void shouldSendParamsToIndexAndGenerateHTML() {\r\n        request().params(\"first_name\", \"John\", \"last_name\", \"Deere\").integrateViews().get(\"index\");\r\n        a(assigns().get(\"message\")).shouldBeEqual(\"Hello, John Deere, welcome back!\");\r\n        a(responseContent().contains(\"<span class=\'greeting\'>Hello, John Deere, welcome back!</span>\")).shouldBeTrue();\r\n    }\r\n}\r\n</pre>\r\n\r\nLine 4 causes the framework to execute the controller, and pass all data from it to the view and the generate HTML as in a normal application flow. <br />\r\n\r\nMethod `responseContent()` simply returns entire HTML generated by the view. At which point, you can use variety of technologies in Java to test its structure (easier if you stick to XHTML in your templates), as well as content.\r\n<br />\r\nWe simply test on line 6 that there exists a span with specific content merged by template from data passed in from controller.\r\n\r\n<h3>Mocking and testing</h3>\r\nMocking and testing of services is related to the concept of Dependency Injection and is described in [DependencyInjection#Mocking_and_testing] section.\r\n\r\n\r\n<h3>Posting binary content</h3>\r\n\r\nSometimes you need to test a case when binary data is POSTed to a web application. This can be easily tested with the content() method:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n public class HelloControllerSpec extends ControllerSpec {\r\n     @Test\r\n     public void shouldSendBytes() {\r\n         byte[] mybytes = ...\r\n         request().content(mybytes).post(\"index\");\r\n         a(responseContent().contains(\"<message>success</message>\")).shouldBeTrue();\r\n     }\r\n }\r\n</pre>\r\n\r\n<h3>Uploading files</h3>\r\n\r\nSimulating file upload can be done with the formItem() method:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n public class HelloControllerSpec extends ControllerSpec {\r\n     @Test\r\n     public void shouldUploadImageFile() {\r\n         byte[] imagebytes = ...\r\n         request().contentType(\"multipart/form-data\").formItem(\"file.png\", \"image\", true,  \"applicaiton/png\", imagebytes).post(\"upload\");\r\n         a(responseContent().contains(\"<message>success</message>\")).shouldBeTrue();\r\n     }\r\n }\r\n</pre>\r\n<hr style=\"#ccc;\">\r\nMost methods chained after method `request()` are chained because they all return a special instance of `RequestBuilder`. This allows to call the same method more than once, including formItem() to simulate uploading of multiple files. \r\n<hr style=\"#ccc;\">\r\n\r\n<h3>Working with sessions</h3>\r\n\r\nThere is a `session()` method available in controller specs. This method allows to put objects into session before a test and then also allows to verify values if it is expected that a controller should place something into a session during execution.\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n public class LoginControllerSpec extends ControllerSpec {\r\n    @Test\r\n    public void shouldLoginByIdAndPassword() {\r\n         request().params(\"id\", \"mmonroe\", \"password\", \"kennedy\").post(\"index\");\r\n         a(session().get(\"user\")).shouldNotBeNull();\r\n   }\r\n }\r\n</pre>\r\n\r\nConversely, if you want to test another controller, you could \"login\" inside a @Before metod by placing a User object into a session.\r\n\r\n\r\n<h3>Working with cookies</h3>\r\nCookies can be sent with a response using a `cookie()` method:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class HelloControllerSpec extends ControllerSpec {\r\n    @Test\r\n    public void shouldCookie() {\r\n        request().cookie(new Cookie(\"app_id\", \"12345\")).get(\"index\");\r\n        a(cookie(\"last_access\")).shouldNotBeNull();\r\n    }\r\n}\r\n</pre>\r\n\r\nIn this spec, we are sending one cookie with the request on line 4., but also are checking that \"HelloController\" sent another cookie to the client. \r\n\r\n\r\n<h3>Great for TDD</h3>\r\n\r\n!ActiveWeb controller specs allow for true TDD, since they do not have a compiler dependency on controllers. You can describe full behavior of your controller before a controller class even exists. Simplest example:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic GreeterControllerSpec extends ControllerSpec {\r\n    @Test\r\n    public void shouldRespondWithGreetingMessage() {\r\n        request().get(\"index\");\r\n        a(responseCode()).shouldBeEqual(200);\r\n        a(assigns().get(\"message\")).shouldBeEqual(\"Hello, earthlings!\");\r\n    }\r\n}\r\n</pre>\r\n\r\nIn a code snippet above, a request with HTTP GET method is simulated to the GreeterController, index() action.<br />\r\n\r\nController is expected to assign an object called \"message\" with value \"Hello, earthlings!\" to a view. <br />\r\n\r\nIt is easy to describe a controller behavior in a !ControllerSpec, making it trivial and pleasurable to practice real TDD.<br />\r\n\r\n\r\n\r\n<h2>DBControllerSpec - test controllers with DB connection</h2>\r\n\r\n`activeweb.DBCOntrollerSpec` class serves as a super class for controller tests requiring database connections. In effect, this class combines the logic of !ControllerSpec and DBSpec. When it comes to naming convention of a controller to be tested, the functionality is identical that of !ControllerSpec, but at the same time it will open a connection to DB before test and close after (will also roll back transaction) \r\n\r\n<h2> !IntegrationSpec - test multiple controllers together </h2>\r\n\r\nWhile ControllerSpec and DBControllerSpec allow to test a single controller, the class IntegrationSpec allows to write entire scenarios for testing multiple controllers.<br />\r\n\r\nExample:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class SimpleSpec extends IntegrationSpec {\r\n    @Test\r\n    public void shouldNavigateToTwoControllers() {\r\n        controller(\"home\").get(\"index\");        \r\n        a(statusCode()).shouldBeEqual(200);        \r\n        controller(\"greeter\").param(\"name\", \"Bob\").integrateViews().get(\"index\");        \r\n        a(responseContent().contains(\"Our special greeting is extended to Bob\")).shouldBeTrue();        \r\n    }\r\n}\r\n</pre>\r\n\r\n\r\nLets decompose code snippet:\r\n<ul>\r\n  <li> Line 3: a controller !HomeController is executed with HTTP GET  request which is dispatched to its action index()</li>\r\n  <li> Line 4: we verify that the response code of execution was 200</li>\r\n  <li> Line 5: controller !GreeterController\'s index() action is executed with HTTP GET and parameter name=Bob. Additionally, we call method `integrateViews()` which will require the framework to execute the corresponding view after controller, which will provide us with that view\'s output - usually HTML, but can be XML, Json, whatever  that view is producing.</li>\r\n  <li> Line 6; we examine the content of the produced view output. </li>\r\n</ul>\r\nNote that we can run this code even in the absence of both controllers, but of course it will fail. Now, we can actually write controller classes to satisfy the tests, lets write a !GreetingController (as being the most \"complicated\" of the two):\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic void GreeterController extends AppController {\r\n    public void index() {\r\n        view(\"name\", param(\"name\"));\r\n    }\r\n}\r\n</pre>\r\n\r\nThe corresponding view might look like:<br />\r\n<code language=\"html\">\r\n<span>Our special greeting is extended to ${name}</span>\r\n</code><br />\r\nand will be located in file:<br />\r\n<pre name=\"code\" class=\"brush:java;\">\r\n/views/greeter/index.ftl\r\n</pre>\r\n\r\n\r\n<h2>DBIntegrationSpec - combines !IntegrationSpec and DBSpec </h2>\r\n\r\n`activeweb.DBIntegrationSpec` class serves as a super class for controller tests requiring database connections. In effect, this class combines the logic of IntegrationSpec and DBSpec. It will allow to write scenarios to test multiple controllers, but at the same time it will open a connection to DB before test and close after (will also roll back transaction), as DBSpec would. \r\n\r\n<h2> !AppIntegrationSpec - bootstraps !ControllerFilters into test</h2>\r\n\r\n`activeweb.AppIntegrationSpec` is a class that will bootstrap entire application, complete with ControllerFilters. The only difference of running your application under AppIntegrationSpec and running it live, is that the DBConnectionFilter is disabled, and instead database connection is provided exactly the same way as in DBSpec, DBControllerSpec or DBIntegrationSpec.<br />\r\n\r\nIn other words, think of AppIntegrationSpec as the same with DBIntegrationSpec, but all filters will trigger as in a real application. \r\n\r\n<hr style=\"#ccc;\">\r\n<b>None of the !IntegrationSpecs require  the same naming convention as !ControllerSpec or DBCOntrollerSpec.</b>\r\n<hr style=\"#ccc;\">\r\n<h2> Testing Views</h2>\r\nIt is possible to test just a view template with !ActiveWeb. There is a special class for that called !ViewSpec. Here is an example of a template to be tested:\r\n\r\nTemplate file name `/person/show.ftl`:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nName: ${name}\r\n</pre>\r\n\r\nThe view test might look something like this:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n\r\npublic class PersonSpec extends ViewSpec {\r\n    @Test\r\n    public void shouldRenderShow() {\r\n        a(render(\"/person/show\", \"name\", \"John\").shouldEqual(\"Name: John\");\r\n     }\r\n}\r\n</pre>\r\n\r\nThere is also a way to test for `<@content for` output, inject mock or real services into custom tags, etc. In other words, one can write very stringent tests for views independent of the rest of the application. just as if views were first grade application components.\r\n\r\n\r\n<h2>Conclusion</h2>\r\nThis collection of super classes allows to write very thorough set of tests covering application functionality','2013-05-13 09:50:51','2013-05-14 05:12:27','testing'),(56,'Views','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activeweb\">ActiveWeb</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Views</li>\r\n</ul>\r\n\r\n<h1>Views</h1>\r\n<div id=\"generated-toc\"></div>\r\n<h2> Introduction </h2>\r\n\r\nViews in !ActiveWeb are also called templates. They are located in the following directory:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n ..src/main/webapp/WEB-INF/views\r\n</pre>\r\n\r\n<h2>No JSPs</h2>\r\n\r\nActiveWeb does not use JSPs. The main reason for not using JSPs is inability to test generated HTML with JSPs in a unit test. While the first implementation of !ActiveWeb used JSPs as the rendering engine, as soon as we started implementing the [Testing] framework, we quickly realized that this is simply impossible with JSPs. Generating HTML from a JUnit test is complex and impractical and would also be time consuming. Besides, the number of problems with different versions of JSP and JSTL specifications would be a nightmare to maintain. Thus we made a hard choice early on in 2010 to not use JSPs all together. In the long run this has proven to be a good decision, since it is possible to write very thorough tests with !ActiveWeb.\r\n\r\n<h2>ActiveWeb uses FreeMarker</h2>\r\nActiveWeb uses FreeMarker as a templating engine. Please see [FAQ#Why_FreeMarker_? Why FreeMarker?] for more information. <br />\r\n\r\nActiveWeb has a pluggable architecture that allows to integrate any other engine, such as Velocity, as long as they can implement <a href=\"http://code.google.com/p/activeweb/source/browse/trunk/activeweb/src/main/java/activeweb/TemplateManager.java\"> TempalteManager</a> interface. \r\n\r\n<h2>FreeMarker configuration</h2>\r\n\r\nFreeMarker configuration is done programmatically. !ActiveWeb applications need to have a class:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npackage app.config;\r\n\r\nimport activeweb.freemarker.AbstractFreeMarkerConfig;\r\nimport freemarker.template.TemplateExceptionHandler;\r\n\r\npublic class FreeMarkerConfig extends AbstractFreeMarkerConfig {\r\n    @Override\r\n    public void init() {\r\n        //this is to override a strange FreeMarker default processing of numbers \r\n        getConfiguration().setNumberFormat(\"0.##\");\r\n        getConfiguration().setTemplateExceptionHandler( TemplateExceptionHandler.RETHROW_HANDLER);\r\n     }\r\n}\r\n</pre>\r\n\r\nThis class extends `AbstractFreeMarkerConfig`, which provides an instance `freemarker.template.Configuration` class, allowing to perform configuration on !FreeMarker.\r\nThe line of code presented above are recommended default configuration. \r\nThe second line will configure !FreeMarker to throw an exception instead of writing it to a browser. This will ensure that the users will not see details of internal system error conditions. \r\n\r\n\r\n\r\n<h2>Templates</h2>\r\nActiveWeb templates are in fact !FreeMarker templates. However, there are a number of !ActiveWeb conventions for template naming and placement. Templates are located in sub-directories of this top view directory:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nsrc/main/webapp/WEB-INF/views\r\n</pre>\r\n\r\nThe sub-directories are usually named after controllers. Controller name would loose suffix \"Controller\", and the remainder would be transformed from !CamelCase to underscore, for example, `HomeController` templates are located in sub-directory \r\n<pre name=\"code\" class=\"brush:java;\">\r\nsrc/main/webapp/WEB-INF/views/home\r\n</pre>\r\nand `OuterSpaceController` templates are located in:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nsrc/main/webapp/WEB-INF/views/outer_space\r\n</pre>\r\n\r\nController package is not considered in search of templates. Usually templates belong to a controller, but there can also be template that are shared. In that case, you can create any arbitrary directory under template top directory and place your shared templates there:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nsrc/main/webapp/WEB-INF/views/shared\r\n</pre>\r\n\r\n\r\n<h2>Layouts</h2>\r\nLayouts are a way to decorate a page with additional HTML. !ActiveWeb layouts serve exactly the same purpose as Java technologies such as Apache Tiles and Sitemesh.<br />\r\nUsing a layout you decorate every page with the same header,footer, and other common elements for your application.<br />\r\nLayouts are !FreeMarker templates like any other.\r\n\r\n<h3>Default layout</h3>\r\nA default layout is called default_layout.ftl and located in the layouts directory along with other tempalte directories:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nsrc/main/webapp/WEB-INF/views/layouts/default_layout.ftl\r\n</pre>\r\n\r\nThe content of the default_layout from a startup project looks like this (few lines omitted for clarity):\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<html>\r\n    <head>\r\n        <title>ActiveWeb - <@yield to=\"title\"/></title>\r\n     </head>\r\n     <body>\r\n        <div class=\"main\">\r\n            <#include \"header.ftl\" >\r\n        <div class=\"content\">\r\n            ${page_content}\r\n        </div>\r\n            <#include \"footer.ftl\" >\r\n        </div>\r\n    </body>\r\n</html>\r\n</pre>\r\n\r\nLine 3 has a `yield` tag, for explanation, please see section below. \r\nLine 7 includes a header.ftl, which is another template with code for the top portion of your site. It is not strictly necessary, since you can copy all code\r\nfrom header directly into layout, but it is a good practice to keep it in a separate file. \r\nLine 11 serves the same purpose for footer, as line 7 for header.<br />\r\n\r\nLine 9 is where entire page generated from rendering a controller response is inserted. \r\n\r\n<h3>`content for` and `yield` tags </h3>\r\n\r\nWhen using layout, you quite often need to pass information from a rendered page up to a layout. Examples are: page title. as in the example of a layout above,\r\non line 3, there is a `title` tag, but the information for title of a page is of course in the page itself. The tags `content for` abd `yield` work together \r\nto allow to pass information from page up to a layout.\r\n\r\n<h4>Simple `content for`  and `yield` case</h4>\r\nHere is an example of passing a  page title from a page template to layout:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<@content for=\"title\">Books List</@content>\r\n</pre>\r\n\r\nWhen the entire page with layout is rendered, the  line 3 will read like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<title>ActiveWeb - Books List</title>\r\n</pre>\r\n\r\nThink of `content for` as setting some content for a location in layout, and `yield` as yielding to that content. \r\n\r\ncontent for and yeld are not limited to sending plain text, you can send arbitrary HTML chunks, including `<script>` tags, CSS, links to various resources, etc.<br />\r\n\r\nThis feature is useful to inject a JavaScript library into a layout from a page in cases you only need this library on this one page. This way loading a library will be avoided for all other pages, where it is not used. \r\n\r\n<h4>Multiple chunks of `content for`  for single `yield`</h4>\r\n\r\nSometimes you need to send multiple chunks of text from a page to layout. You can declare more than one `content for` with the same yield target:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<@content for=\"js\">\r\n<script type=\"text/javascript\">\r\n    Window.alert(\"hello1\");\r\n</script>\r\n</@>\r\n\r\n<@content for=\"js\">\r\n<script type=\"text/javascript\">\r\n    Window.alert(\"hello2\");\r\n</script>\r\n</@>\r\n... declare more if needed\r\n</pre>\r\n\r\n\r\nThe yield tag in layout looking like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<@yield to=\"js\"/>\r\n</pre>\r\nwill generate the following output in its place:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<script type=\"text/javascript\">\r\n    Window.alert(\"hello1\");\r\n</script>\r\n<script type=\"text/javascript\">\r\n    Window.alert(\"hello2\");\r\n</script>\r\n</pre>\r\n\r\n<h3>Rendering without layout</h3>\r\n\r\nBy default !ActiveWeb will use a `/views/layouts/default_layout.ftl`. However, in some cases you do not need a layout. You can turn a layout rendering programmaticaly from controller:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class HomeController extends AppController {\r\n    public void index() {\r\n      render().noLayout();\r\n    }\r\n}\r\n</pre>\r\nIn this case, the template will be rendered, but no layout will be used.\r\n\r\n<h3>Override default layout</h3>\r\n\r\nIf you wonder how default layout is set, the answer is simple: the class !AppController has a method `String getLayout()` which returns a string with value `/layouts/default_layout`. The easiest way to change a layout for a controller is to override  this method to return a different value. <br />\r\n\r\nIf you have 2 - 3 super classes for controllers that override this method, you can have different areas of the site decorated by different layouts, based on which child controller is rendering.\r\n\r\n\r\n<h2>Partials</h2>\r\n\r\nPartials are snippets of HTML pages, hence the word. Usually they host chunks of code repeating in a few places. In much the same way that a regular programming language allows develpers to refactor and keep repeating patterns of code in one place, partials a used to keep HTML code that is repeated. It is not to say though that you cannot put any arbitrary HTML code, you can.<br />\r\n\r\nThe main power of partials is in their ability to iterate HTML snippets over data collections, as well as ability to \"widgetize\" HTML snippets.<br />\r\n\r\nPartials are somewhat similar to JSP includes, but they have some special characteristics that JSPs do not.\r\n\r\n<h3>Partials naming and location</h3>\r\nPartials are !FreeMarker templates as any other, but the name of file must start with underscore:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nsrc/main/webapp/WEB-INF/views/greeting/_hello.ftl\r\n</pre>\r\n\r\nLocation of partials is the same as for regular templates, that is they are located in sub-directories of the top view directory.\r\n\r\n<h3>Include partials with Render tag</h3>\r\nPartials are included into a host page with a Render tag. Lets say there is a template called `index.ftl` located in directory `market` and partial `_fruit.ftl` located in the same diretory:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nsrc/main/webapp/WEB-INF/views/market/index.ftl\r\nsrc/main/webapp/WEB-INF/views/market/_fruit.ftl\r\n</pre>\r\n\r\nthen you can render `_fruit.ftl` inside `index.ftl` like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<html>\r\n...\r\n<@render partial=\"fruit\"/>\r\n...\r\n</html>\r\n</pre>\r\n\r\nAs you can see, when you are referring to a partial, you _specify name without underscore_.\r\n<hr style=\"#ccc;\">\r\nThe Render tag requires at least one attribute present: \"partial\" which refers to a local or shared partial by name.\r\n<hr style=\"#ccc;\">\r\n<h3>Rendering shared partials</h3>\r\nIn a previous example, you can see that a partial was co-located with the host template. Sometimes you need to render a partial in a number of templates. To accomplish this, you can place a partial into a new view directory and refer to a partial with \"absolute\" path, such as:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<html>\r\n...\r\n<@render partial=\"/shared/fruit\"/>\r\n...\r\n</html>\r\n</pre>\r\nThis assumes that you have a partial fruit at this location:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nsrc/main/webapp/WEB-INF/views/shared/_fruit.ftl\r\n</pre>\r\nUse this technique to include a common widget across multiple templates. \r\n\r\n<h3>Iterating with partials</h3>\r\nIt is quite common to iterate over collections in a web application. Sometimes  you need to build a `<table>`, a list `<ul>` or repeating pattern of HTML code. Usually developers resort to loops inside templates, and although !FreeMarker provides this functionality, using partials provides a cleaner solution, as partials can iterate automatically.\r\n\r\nLets say we have a partial called `_fruit.ftl`:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nFruit name: ${fruit}<hr>\r\n</pre>\r\nIf we have a collection in context (java.util.List, for instance) with these values: [\"apple\", \"prune\", \"pear\"], and named fruits, then we can render this partial as a collection from host page like this:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<@render partial=\"fruit\" collection=fruits/>\r\n</pre>\r\nRendering will result in this output:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nFruit name: apple<hr>Fruit name: prune<hr>Fruit name: pear<hr>\r\n</pre>\r\nAs you can see, iteration is easier with partials compared to loops. The partial will take care ot iterating automatically.\r\n\r\n<h3>Implicit counter in partial</h3>\r\nPartials interating over a collection have a built-in implicit variable maintaining an index of a collection. The name of this variable is made up of a name of a partial and word \"counter\". This means that for the above example, the name will be \"fruit_counter\". You can use this value inside a partial like any other context value. The above example with the counter modification:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nFruit name: ${fruit}, index: ${fruit_counter}<hr>\r\n</pre>\r\nwill yield:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nFruit name: apple, index: 0<hr>Fruit name: prune, index: 1<hr>Fruit name: pear, index: 2<hr>\r\n</pre>\r\n\r\n<h3>Partials with collections and spacers</h3>\r\nNotice in above examples  that the horizontal line `<hr>` is rendered at the bottom of each iteration of a partial. This is because it is really a part of a partial. It is quite common that you need to space the iterating snippets of HTML with some sort of a spacer made up of arbitrary HTML. Partials provide this capability with the use of a \"spacer\" partial. Lets say we use this partial as a spacer (located in `src/main/webapp/WEB-INF/views/shared/_divider.ftl`):\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<div class=\'spacer\'/>\r\n\r\n</pre>\r\nif we then render our fruits with this spacer such that\"\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<@render partial=\"fruit\" collection=fruits spacer=\"divider\"/>\r\n</pre>\r\nwe will get the following output:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nFruit name: apple<hr><div class=\"spacer\"/>\r\nFruit name: prune<hr><div class=\"spacer\"/>\r\nFruit name: pear<hr>\r\n</pre>\r\nAs you can see, the content of the spacer was inserted between the contents of the iterating partial, and the good thing is that it was not appended after the last iteration.<br />\r\nThe reason for a new line is because we have it in a \"divider\" partial.\r\n\r\n\r\n<h3>Passing arguments to partials</h3>\r\nYou can pass an argument value to a partial in much the same way as you can to a method. \r\n\r\nLets say we have a host template:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<@render partial=\"fruit_name\" a_fruit=fruit_name/>\r\n</pre>\r\nand a partial (`_fruit_name.ftl`) with content:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nFruit name is: ${a_fruit}\r\n</pre>\r\nThen the output of a partial will be:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nFruit name is: apple\r\n</pre>\r\nconsidering that there is a variable `fruit_name` in context. This variable could be passed in by controller, or created inside the template. The types of values passed in like this are not limited to strings.\r\n\r\n\r\n<h3>Boundary indicators for collection partials</h3>\r\nIf you have a partial that iterates over a collection and you need to render special content conditionally if this is a first or last time in the iteration, you can use special variables set by the framework called `first` and `last`:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<#if first>\r\nI\'m the first in line!\r\n</#>\r\n<#if last>\r\nI\'m the last in line!\r\n</#>\r\n\r\nmore content...\r\n</pre>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h2>Message tag</h2>\r\n\r\n\r\nThe message tag is designed to display messages in view templates. Message values are defined in resource bundle called \"activeweb_messages\". This means that this tag will be looking for file called activeweb_messages.properties as default name and others, such as activeweb_messages_fr_FR.properties in case French locale was specified.\r\nExamples:\r\n\r\n<h3>Simple usage</h3>\r\nGiven that there is a file activeweb_messages.properties with content: \r\n<pre name=\"code\" class=\"brush:java;\">\r\ngreeting=Hello!\r\n</pre>\r\n    \r\nand tag code:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<@message key=\"greeting\"/>   \r\n</pre>\r\n\r\nthen the output will be:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nHello!\r\n</pre>\r\n    \r\n<h3>Message with parameters</h3>\r\nLets say a message in resource bundle is declared like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nmeeting=Meeting will take place on {0} at {1}\r\n</pre>\r\n   \r\nYou can then specify the tag with parameters:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<@message key=\"meeting\" param0=\"Wednesday\" param1=\"2:00 PM\"/>\r\n</pre>\r\n   \r\nWhen a view template renders, the outcome will be:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nMeeting will take place on Wednesday at 2:00 PM\r\n</pre>\r\n   \r\n<h3>Defaulting to key if value not found</h3>\r\nIn case a resource bundle does not have a key specified, the key is rendered as value verbatim:<br />\r\n<@message key=\"greeting\"/><br />\r\n    \r\nThe output:\r\n<pre name=\"code\" class=\"brush:java;\">\r\ngreeting\r\n</pre>\r\n    \r\n<h3>Detection of locale from request</h3>\r\nIf there is a locale on the request supplied by the agent, then this locale is automatically picked up by this tag. For instance, if a browser supplies locale \"fr_FR\" and there is a corresponding resource bundle: \"activeweb_messages_fr_FR.properties\", with this property:\r\n<pre name=\"code\" class=\"brush:java;\">\r\ngreeting=Bonjour!\r\n</pre>\r\n   \r\nthen this tag:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<@message key=\"greeting\"/>   \r\n</pre>\r\nwill produce:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nBonjour!\r\n</pre>\r\n   \r\n<h3>Overriding request locale</h3>\r\nThere is a \"locale\" argument you can pass to the tag to override the locale from request:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<@message key=\"greeting\" locale=\"de_DE\"/>\r\n</pre>\r\n\r\n\r\n<h2>link_to tag and unobtrusibe !JavaScript</h2>\r\n\r\n!ActiveWeb provides a<@link_to/>. This tag generates an HTML anchor tag and is capable of regular HTML links, as well as Ajax capability.\r\n \r\n<h3>Attributes for configuration</h3>\r\n<ul>\r\n  <li> `controller` : path to controller, such as: `/admin/permissions` where \"admin\" is a sub-package and \"permissions\" is a name of a controller. In this example, the controller class name would be: `app.controllers.admin.PermissionsController`. If a controller path is specified, the preceding slash is mandatory. Optionally this could be a name of a controller from a default package: \"permissions\", and in this case, the controller class name is expected to be `app.controllers.PermissionsController`. If a name of controller is specified, the preceding slash can be omitted. This attribute is optional. If this attribute is omitted, the tag will use the controller which was used to generate the current page. This makes it convenient to write links on pages for the same controller.</li>\r\n  <li> `action` : name of a controller action, not HTML form action. Optional. If this attribute is omitted, the action will default to \"index\".</li>\r\n  <li> `id`: id, as in a route: /controller/action/id. Optional.</li>\r\n  <li> `html_id` : value of this attribute will be used to set the HTML ID of the Anchor element. Optional.</li>\r\n  <li> `query_string`: query string as is usually used in GET HTTP calls - the part of a URL after the question mark. Optional. Either query_string or query_params allowed, but not both.</li>\r\n  <li> `query_params` : java.util.Map with key/value pairs to be converted to query string. Optional. Either query_string or query_params allowed, but not both.</li>\r\n  <li> destination : id of an element on page whose content will be set with a result of an Ajax call. Optional.</li>\r\n  <li> `form` : id of a form element on the page, whose content will be serialized into the Ajax call. This content will be submitted to the server controller/action as input. Optional.</li>\r\n  <li> `method` : HTTP method to use. Acceptable values: GET (default), POST, PUT, DELETE. Optional.</li>\r\n  <li> `before` : Name of a !JavaScript function to call before making Ajax call. Optional. This function does not receive any arguments.</li>\r\n  <li> `before_arg` : Value for the JS function argument provided in \"before\" attribute. This could be an ID of an element, string, or any other arbitrary parameter. Any object will be converted to string. Optional.</li>\r\n  <li> `after` : Name of a !JavaScript function to call after making Ajax call. This function receives the value of a \"after_arg\" attribute as a first argument and result of the Ajax call as a second argument. Optional.</li>\r\n  <li> `after_arg` : Value for the JS function argument provided in \"after\" attribute. This could be an ID of an element, string, or any other arbitrary parameter. Any object will be converted to string. Optional.</li>\r\n  <li> `confirm` :  Presents a !JavaScript confirmation dialog before making an Ajax call. The dialog will present the text with content from the attribute value.  If No or Cancel was selected on the dialog, the Ajax call is not made. Optional.</li>\r\n  <li> `error` : Name of a JS function which will be called in case there was an Ajax error of some sort. The first parameter is HTTP status code, the second is response text sent from server.</li>\r\n \r\n \r\n<h3>Example 1: Non-Ajax link</h3>\r\n<pre name=\"code\" class=\"brush:java;\">\r\n <@link_to controller=\"books\" action=\"fetch\">Get Books</@>\r\n</pre>\r\n \r\nThis will generate a simple non-Ajax link, such as: \"..books/fetch\"\r\n \r\n<h3>Example 2: Ajax link, sets data to destination element</h3>\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<@link_to controller=\"books\" action=\"fetch\" destination=\"result\" >Get Books</@>\r\n</pre>\r\n\r\nThis will generate a simple Ajax link. The method by default is GET. After Ajax call, the result will be inserted into an element with ID: \"result\", similar to: `<div id=\"result\"></div>`\r\n\r\n\r\n<h3>Example 3: Confirmation and before/after callbacks</h3>\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<@link_to controller=\"books\"  id=\"123\"\r\n         method=\"delete\" before=\"beforeDelete\" after=\"afterDelete\"\r\n         confirm=\"Are you really sure you want to delete this book?\">Delete Book</@>\r\n\r\n\r\n   function beforeDelete(beforeArg) {\r\n      ...\r\n   }\r\n\r\n   function afterDelete(afterArg, data) {\r\n      ...\r\n   }\r\n</pre>\r\n\r\nHere, the JS confirmation dialog will present the message before posting an Ajax call, then function \"beforeDelete\" will be called. After that, it will make an Ajax call, and will execute function \"afterDelete\", passing it the result of Ajax invocation as an argument. In the JS code above, the \"beforeArg\" and \"afterArg\" arguments have values null since the \"before_arg\" and \"after_arg\" attributes were not used.\r\n\r\n<h3>Example 4: Before/after callback arguments</h3>\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<@link_to controller=\"books\" action=\"fetch\" before=\"doBeforeWithArg\" before_arg=\"books_result\"                               \r\n    after=\"doAfterWithArg\" after_arg=\"books_result\">Get Books</@>\r\n</pre>\r\n\r\nThis code expects to find JS functions similar to these:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nfunction doBeforeWithArg(elm) {\r\n    $(\"#\" + elm).html(\"wait...\");\r\n}\r\n \r\nfunction doAfterWithArg(elm, data) {\r\n    $(\"#\" + elm).html(data);\r\n}\r\n</pre>\r\n\r\nThis is presuming that there is an element like this on the page:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<div id=\"books_result\"></div>\r\n</pre>\r\nIn this example, the \"books_result\" string is passed as argument to \"doBeforeWithArg\" as only one argument and the same is passed as a first argument to function \"doAfterWithArg\". The second argument to the \"doAfterWithArg\" is a result of Ajax invocation (presumably HTML representing books generated from some partial).\r\n\r\n<h3>Example 5 - Error handling</h3>\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<@link_to controller=\"books\" action=\"doesnotexist\" error=\"onError\" destination=\"callbacks_result\">Will cause error</@>\r\n\r\n...\r\nfunction onError(status, responseText) {\r\n    alert(\"Got error, status: \" + status + \", Response: \" + responseText);\r\n }\r\n </pre>\r\n \r\n In this example, the link is making an Ajax call to a controlled action which does not exists. This causes onError() function to be triggered.\r\n\r\n<h2>flash tag</h2>\r\n\r\nPlease, see: [FlashTag]\r\n\r\n\r\n<h2>select tag</h2>\r\nSelect tag is to generate the `<select>` HTML tag based on data passed in dynamically into a view.\r\nParameters:\r\n<ul>\r\n <li><b>list</b> - this is a mandatory parameter, and it needs to be type of java.util.List filled with instances of SelectOption</li>\r\n</ul>\r\nIn addition to the collection, you can also add body to the tag. For instance, if you write the tag like this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n   <@select list=books>\r\n       <option value=\"3\">A Tale of Two Cities</option>\r\n   </@>\r\n</pre>  \r\nAnd pass this data from controller:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n       view(\"books\", list(new SelectOption(1, \"The Hitchhiker\'s Guide to the Galaxy\"), new SelectOption(2, \"All Quiet on Western Front\", true)));\r\n</pre>\r\n   \r\nthen the output from the tag will be:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<select><option value=\"3\">A Tale of Two Cities</option>\r\n<option value=\"1\">The Hitchhiker&aposs Guide to the Galaxy</option><option value=\"2\" selected=\"true\">All Quiet on Western Front</option></select><option value=\"3\">A Tale of Two Cities</option>\r\n</pre>\r\n  \r\nWhich means that the generated code is appended to hand-written body.\r\n\r\n\r\n<h2>form tag</h2>\r\n\r\n`<@form/>` tag generates an HTML form tag and has functionality specific for !ActiveWeb.<br />\r\nLike any other !ActiveWeb tag, it has ability to pass through any non - !ActiveWeb attributes. This means that if you\r\nspecify any attribute that is not mentioned here, it will be passed through as a regular HTML attribute.\r\n\r\n\r\nAttributes:\r\n<ul>\r\n  <li> `controller` - name of a controller to post this form to. Optional. If this attribute is not provided, the tag will find a current controller in context which was used to generate a data for the current view and uses it.  It makes it convenient to write many views for the same controller.</li>\r\n  <li> `action` - name of an action to post this form to.This is different from  regular HTML form@action attribute, as controller, action and id attributes will be used to form an appropriate HTML form action value.  Optional. </li>\r\n  <li> `id` - value of URI \"id\". Used as URI \"id\" in forming an HTML Form action attribute, such as: `<form action=\"controller/action/id\"`. Do not confuse with HTML element ID. Optional.</li>\r\n  <li> `html_id` - value of HTML Form element ID, as in `<form id=\"123...\"`. Optoinal.</li>\r\n  <li> `method` - this is an HTTP method. Allowed values: GET (default), POST, PUT, DELETE.</li>\r\n</ul>\r\nIn case the values are \"put\" or \"delete\", additional hidden input names `_method` will be generated, and the actual HTML method will be set to \"post\". This workaround is necessary because browsers still do not support PUT and DELETE. Optional. <br />\r\n\r\n\r\nExamples (given that the current context is \"simple_context\"):\r\n<h3>Simple form</h3>\r\ncode:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<@form controller=\"simple\" action=\"index\" method=\"get\"/>\r\n</pre>\r\nwill generate this HMTL:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<form action=\"/simple_context/simple/index\" method=\"get\"/>\r\n</pre>\r\n\r\n<h3>POST form with ID</h3>\r\ncode:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<@form controller=\"simple\" action=\"index\" id=\"123\" method=\"post\" html_id=\"formA\"/>\r\n</pre>\r\nwill generate:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<form action=\"/simple_context/simple/index/123\" method=\"post\" id=\"formA\"/>\r\n</pre>\r\n\r\n<h3>PUT form</h3>\r\ncode:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n <@form controller=\"simple\" action=\"index\" method=\"put\">\r\n      <input type=\"hidden\" name=\"blah\">\r\n </@form>\r\n</pre>\r\nwill generate this HMTL:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<form action=\"/simple_context/simple/index\" method=\"post\">\r\n      <input type=\'hidden\' name=\'_method\' value=\'put\' />\r\n      <input type=\"hidden\" name=\"blah\">\r\n</form>\r\n</pre>\r\n\r\n<h3>PUT form for RESTful controller</h3>\r\n\r\nThis tag also is REST-aware, and will generate appropriate formats for HTML Form tag action value depending if the controller is RESTful or not.<br />\r\n\r\ncode:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<@form controller=\"photos\"  id=\"x123\" method=\"put\" html_id=\"formA\">\r\n      <input type=\"hidden\" name=\"blah\">\r\n</@form>\r\n</pre>\r\nwill generate:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<form action=\"/simple_context/photos/x123\" method=\"post\" id=\"formA\">\r\n     <input type=\'hidden\' name=\'_method\' value=\'put\' />\r\n     <input type=\"hidden\" name=\"blah\"> \r\n\r\n</form>\r\n </pre>\r\n \r\n<h2>Debug tag</h2>\r\nDebug tag is for printing an arbitrary object from page context. !FreeMarker special handling of types sometimes makes it hard to see the value(s) of an object when debugging, but this tag makes it easy:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<@debug print=objectname/>;\r\n</pre>\r\n\r\nFor instance, for a `java,util.Map` object it will print this:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n     {key1=value1, key2=value2}\r\n</pre>\r\n\r\n<wiki:comment><br />\r\nTo be completed:\r\n<ul>\r\n  <li> ActiveWeb objects in context</li>\r\n  <li> confirmation</li>\r\n  <li> Custom tag development</li>\r\n</ul>\r\n</wiki:comment>\r\n\r\n\r\n<h2>System error pages</h2>\r\n\r\n<h3>General</h3>\r\n\r\n!ActiveWeb will render two system error pages under typical error conditions:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n/views/system/404.ftl\r\nand:\r\n/views/system/error.ftl\r\n</pre>\r\nThe 404.ftl is rendered in cases resources are not found:\r\n<ul>\r\n  <li> Controller is missing </li>\r\n  <li> Controller has a compilation problem (development mode )</li>\r\n  <li> Action method is missing</li>\r\n  <li> View template is missing</li>\r\n</ul>\r\nThe error.ftl will be rendered in cases:\r\n<ul>\r\n  <li> Template has a problem rendering</li>\r\n  <li> Any internal application problem</li>\r\n  <li> Internal framework exception</li>\r\n</ul>\r\nIn all these cases, the definitive exception will be printed to the log. \r\n\r\n<h3>Use custom layouts with system error pages</h3>\r\n\r\nBy default, error pages are displayed in default layout (/views/layouts/default_layout.ftl). In some cases, you want to conditionally display error pages in different layouts. This can be achieved by turning the default layout for error pages off:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class AppBootstrap extends Bootstrap {\r\n    public void init(AppContext context) {\r\n        Configuration.setUseDefaultLayoutForErrors(false);\r\n    }\r\n}\r\n</pre>\r\nand then using a `<@wrap ..>` tag inside pages:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<@wrap with=\"/layouts/system_error_layout\">\r\n    <h1>404 - Resource Not Found</h1>\r\n</@wrap>\r\n</pre>\r\n\r\n<h3>Exception parameters passed into error views</h3>\r\nThere are two parameters that the framework passes into error views:\r\n<ul>\r\n  <li> message</li>\r\n  <li> stack_trace</li>\r\n</ul>\r\nThese can be rendered on a page as any other parameters:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nError message: <span>${message}</span> <br>\r\nStack trace:\r\n<pre>\r\n${stack_trace}\r\n</pre>\r\n</pre>\r\n\r\nHowever, this information is only interesting to developers, and usually not displayed to end users. ','2013-05-13 12:58:01','2013-06-03 03:49:35','views'),(57,'Running in development mode','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activeweb\">ActiveWeb</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Running in development mode</li>\r\n</ul>\r\n\r\n<h1>Running in development mode</h1>\r\n<div id=\"generated-toc\"></div>\r\n<h2>Introduction</h2>\r\n','2013-05-14 03:23:05','2013-05-14 03:23:05','running_in_development_mode'),(58,'Routing','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activeweb\">ActiveWeb</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Routing</li>\r\n</ul>\r\n\r\n<h1>Routing</h1>\r\n<div id=\"generated-toc\"></div>\r\n<h2>Introduction</h2>\r\n\r\n<h3>Introduction </h3>\r\n\r\nRouting in !ActiveWeb is an act of matching an incoming request URL to a controller and action. Current implementation supports built-in standard routing, built-in REST - based routing as well as custom routing.\r\n\r\n<h3>Standard routing</h3>\r\n\r\nNOTE: the \"context\" in all URIs is a web application context, which is usually a WAR file name.\r\n\r\n<table>\r\n    <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"><b>path</b></td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"><b>controller</b></td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"><b>action</b></td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"><b>id</b></td>\r\n    </tr>\r\n    <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"> /context/books   </td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"> app.controllers.!BooksController</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">index</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"></td>\r\n    </tr>\r\n    <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">/context/books/save</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"> aapp.controllers.!BooksController </td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">save  </td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"></td>\r\n    </tr>\r\n    <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"> /context/books/save/123</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"> app.controllers.!BooksController </td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">save  </td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">123</td>\r\n    </tr>\r\n</table>\r\n\r\n\r\nIn standard routing, the HTTP method is not considered, but you might get an exception of you send an HTTP method to an action that is configured for a different HTTP method. Routing and action HTTP methods are independent in case of standard routing.<br />\r\nFor standard routing, there is no need to do anything, it works by default\r\n\r\n\r\n<h3>RESTful routing</h3>\r\nIn case of restful routing, the actions are pre-configured. RESTful routing is configured by placing a @RESTfull annotation on a controller. For more informaiton, see: [ControllerExplained#RESTful_controllers]\r\n\r\n<table>\r\n    <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"><b>HTTP method</b></td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"><b>path</b></td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"><b>controller</b></td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"><b>action</b></td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"><b>used for</b></td>\r\n    </tr>\r\n    <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"> GET</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"> /books</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">app.controllers.!BooksController</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">index</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">display a list of all books</td>\r\n    </tr>\r\n    <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">GET</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">/books/new_form</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">app.controllers.!BooksController  </td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">new_form</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">return an HTML form for creating a new book</td>\r\n    </tr>\r\n    <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"> POST</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"> /books</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"> app.controllers.!BooksController </td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">create  </td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">create a new book</td>\r\n    </tr>\r\n      <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">GET</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">/books/id</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">app.controllers.!BooksController  </td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">show</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">display a specific book</td>\r\n    </tr>\r\n    <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">GET</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">/books/id/edit_form</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">app.controllers.!BooksController  </td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">edit_form</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">return an HTML form for editing a books</td>\r\n    </tr>\r\n    <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">PUT</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">/books/id</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">app.controllers.!BooksController  </td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">update</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">update a specific book</td>\r\n    </tr>\r\n    <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">DELETE</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">/books/id</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">app.controllers.!BooksController  </td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">destroy</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">delete a specific book</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>Routing with packages</h3>\r\n\r\nWhile `app.controllers` is a default package for controllers, you might want to organize them into sub-packages. These sub-packages can only be children of `app.controllers` package though. In case a controller is located in a sub-packages, the path mapping would also include sub-package names:\r\n<br />\r\nStandard routing\r\n<br />\r\n\r\n<table>\r\n    <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"><b>path</b></td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"><b>controller</b></td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"><b>action</b></td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"><b>id</b></td>\r\n    </tr>\r\n    <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"> /context/package1/books</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">app.controllers.package1.BooksController</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">index</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"></td>\r\n\r\n    </tr>\r\n    <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">/context/package1/books/save</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">app.controllers.package1.BooksController</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">save  </td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"></td>\r\n    </tr>\r\n    <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">/context/package1/books/save/123</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">app.controllers.package1.BooksController</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"> save </td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">123  </td>\r\n    </tr>\r\n      <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">/context/package1/package2/books</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">app.controllers.package1.package2.BooksController</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">index </td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"></td>\r\n    </tr>\r\n    <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">/context/package1/package2/books/save</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">app.controllers.package1.package2.BooksController</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">save</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"></td>\r\n        \r\n    </tr>\r\n    <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">/context/package1/package2/books/save/123</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">app.controllers.package1.package2.BooksController</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">save </td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">123</td>\r\n    </tr>\r\n\r\n</table>\r\n\r\n\r\n<br />\r\nRESTful routing supports sub-packaging exactly the same as standard. \r\n\r\n<h3>Mapping paths to controller names</h3>\r\n\r\nWhen matching a path to a controller class, !ActiveWeb converts a name of a controller from underscore or hyphenated format to !CamelCase:\r\n\r\n<table>\r\n    <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"><b>path</b></td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"><b>controller</b></td>\r\n    </tr>\r\n    <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\"> /context/books</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">app.controllers.package1.BooksController</td>\r\n    </tr>\r\n    <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">/context/student_books</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">app.controllers.package1.StudentBooksController</td>\r\n    </tr>\r\n        <tr>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">/context/student-books</td>\r\n        <td style=\"border: 1px solid #ccc; padding: 5px;\">app.controllers.package1.StudentBooksController</td>\r\n    </tr>\r\n</table>\r\n\r\n\r\n<h3>Custom routing</h3>\r\n\r\nBesides standard and RESTful, !ActiveWeb also offers custom routing. Custom routing provides ability to configure custom URIs to be forwarded to specific controllers and actions. \r\n\r\n\r\n<h4>Custom routing configuration</h4>\r\nAs with any other types of configuration, !ActiveWeb route configuration is done in code, rather that property or XML files:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class RouteConfig extends AbstractRouteConfig {\r\n    public void init(AppContext appContext) {\r\n        route(\"/myposts\").to(PostsController.class);\r\n        route(\"/{action}/{controller}/{id}\");\r\n        route(\"/{action}/greeting/{name}\").to(HelloController.class);\r\n    }\r\n}\r\n</pre>\r\n\r\nCustom routing is based on URI segments, which are chunks of URIs submitted in the request separated by slashes. \r\nFor example the following URI has three segments:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n/greeting/show/bob\r\n</pre>\r\n\r\nThe above URI has three segments: \"greeting\", \"show\", \"bob\".\r\n\r\n!ActiveWeb defines three types of segments:\r\n<ul>\r\n  <li> Built in</li>\r\n  <li> Static </li>\r\n  <li> User (or dynamic)</li>\r\n</ul>\r\n<h4>Built-in segments</h4>\r\n\r\n!ActiveWeb defines three built-in segments:\r\n<ul>\r\n  <li> `{controller}`</li>\r\n  <li> `{action}` </li>\r\n  <li> `{id}`</li>\r\n</ul>\r\n\r\nUsing built-in segments, you can reorder where controller, action and Id appear on the URI:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n/(action)/{controller}/{id}\r\n</pre>\r\nWhen such a route is specified, this URI:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n/show/photo/123\r\n</pre>\r\nWill be routed to: `app.controllers.PhotoController#show` with ID ==123.\r\n\r\n<h4>Static segments </h4>\r\nStatic segments are simply plain text without the braces. The are matched one to one with the incoming request. Example:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nroute(\"/{action}/greeting/{name}\").to(HelloController.class);\r\n</pre>\r\nIn the snippet above, \"greeting\" is a static segment. \r\n\r\n<h4>User/dynamic segments</h4>\r\n\r\nUser segments are any text in braces in configuration which are then converted to parameters that can be retrieved inside controllers and filters. Here is an example:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nroute(\"/{action}/greeting/{name}\").to(HelloController.class);\r\n</pre>\r\n\r\nwhere \"name\" is a placeholder whose value will be available in controller:\r\n<br />\r\nURL submitted: \r\n<pre name=\"code\" class=\"brush:java;\">\r\n/show/greeting/alex\r\n</pre>\r\nwill be routed to controller `app.controllers.HelloController#show` and value `name` will be available:\r\n<pre name=\"code\" class=\"brush:java;\">\r\npublic class HelloController extends AppController {\r\n    public void show() {\r\n        String name = param(\"name\");\r\n  }\r\n}\r\n</pre>\r\n\r\n<h4>Http method - based routing</h4>\r\nYou can include an Http method used in the request into the routing rule:\r\n<pre name=\"code\" class=\"brush:java;\">\r\nroute(\"/{action}/greeting/{name}\").to(HelloController.class).get();\r\n</pre>\r\n\r\nIn this example, this route will only match the incoming request if the Http method of the request is GET. There are four corresponding methods: get(), post(), put() and delete(). They can be used in isolation or in combination. For instance, this route:\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nroute(\"/{action}/greeting\").to(HelloController.class).get().post();\r\n</pre>\r\n\r\nwill match these requests:<br />\r\n\r\nGET:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n/show/greeting\r\n</pre>\r\n\r\nPOST:\r\n<pre name=\"code\" class=\"brush:java;\">\r\n/save/greeting\r\n</pre>\r\n\r\nOf course the action \"save\" needs to have a @POST annotation for this to work. Annotations are independent of routing rules. \r\n\r\n<hr style=\"#ccc;\">\r\nDefault Http method used in routing rules is get().\r\n<hr style=\"#ccc;\">\r\n\r\n<h4> !RouteConfig reloaded</h4>\r\n<br/>\r\nThe class `app.config.RouteConfig` is recompiled and reloaded in development environment in case a system property \"active_reload\" is set to true.  This makes it easy and fun to play with the routes during development. ','2013-05-14 03:27:09','2013-05-14 04:33:01','routing'),(59,'EclipseIntegration','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">EclipseIntegration</li>\r\n</ul>\r\n<h1>ActiveJDBC</h1>\r\n<h2>EclipseIntegration</h2>\r\n\r\nPlease, see:\r\n<ul>\r\n    <li>\r\n        <a href=\"https://groups.google.com/forum/?fromgroups=#!searchin/activejdbc-group/eclipse/activejdbc-group/xQ5gUSnCalc/ZuuPrHsriuAJ\"\r\n           target=\"_blank\">https://groups.google.com/forum/?fromgroups=#!searchin/activejdbc-group/eclipse/activejdbc-group/xQ5gUSnCalc/ZuuPrHsriuAJ</a>\r\n    </li>\r\n    <li><a href=\"https://groups.google.com/forum/?fromgroups=#!topic/activejdbc-group/h4xRn-p9Bbw\" target=\"_blank\">https://groups.google.com/forum/?fromgroups=#!topic/activejdbc-group/h4xRn-p9Bbw</a>\r\n    </li>\r\n    <li><a href=\"https://groups.google.com/forum/?fromgroups=#!topic/activejdbc-group/dMg47VNN64E\">https://groups.google.com/forum/?fromgroups=#!topic/activejdbc-group/dMg47VNN64E</a>\r\n    </li>\r\n</ul>','2013-11-14 08:33:36','2013-11-14 09:16:35','eclipseIntegration'),(60,'NetbeansIntegration','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">NetbeansIntegration</li>\r\n</ul>\r\n<h1>ActiveJDBC</h1>\r\n<h2>NetbeansIntegration</h2>\r\n\r\nFor general questions, refer to  <a href=\"/p/instrumentation\">Instrumentation</a> page.\r\n\r\nThere were some questions posted on ActiveJDBC Google Group regarding integrating Netbeans and ActiveJDBC.\r\n\r\nI will try to describe the process and bottlenecks for such goal\r\n\r\n<h2> Details </h2>\r\n<ul>\r\n    <li> Create new Netbeans project</li>\r\n    <li> Add dependent libraries:</li>\r\n    <li> Right click on the newly created project -> Properties -> Libraries</li>\r\n    <li> Add \"Compile\" libraries from <a href=\"https://activejdbc.googlecode.com/svn/trunk/examples/ant-example/lib/\"\r\n                                         target=\"_blank\">https://activejdbc.googlecode.com/svn/trunk/examples/ant-example/lib/</a>\r\n    </li>\r\n    <li> Add \"Processor\" libraries from <a\r\n            href=\"https://activejdbc.googlecode.com/svn/trunk/examples/ant-example/build_time_libs/\">https://activejdbc.googlecode.com/svn/trunk/examples/ant-example/build_time_libs/</a>\r\n    </li>\r\n    <li> Close</li>\r\n    <li> Click \"Files\" tab and open build.xml</li>\r\n    <li> Add <code>-post-compile</code> target :\r\n<pre name=\"code\" class=\"brush:xml;\">\r\n<target name=\"-post-compile\">\r\n    <java classname=\"org.javalite.instrumentation.Main\" failonerror=\"true\">\r\n        &lt;sysproperty key=\"outputDirectory\" value=\"${build.classes.dir}\"/&gt;\r\n        <classpath>\r\n            &lt;pathelement path=\"${build.classes.dir}\"/&gt;\r\n            &lt;pathelement path=\"${javac.classpath}\"/&gt;\r\n            &lt;pathelement path=\"${javac.processorpath}\"/&gt;\r\n        </classpath>\r\n    </java>\r\n</target>\r\n</pre>\r\n    </li>\r\n    <li> Save and close the file</li>\r\n</ul>\r\nIf you are running project from Netbeans you need to perform additional step:\r\n<ul>\r\n    <li> Right click on the project -> Properties -> Compiling and uncheck \"Compile on save\"</li>\r\n</ul>','2013-11-14 08:58:56','2013-11-14 09:45:35','netbeansIntegration'),(61,'IDE Integrations','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">IDE Integrations</li>\r\n</ul>\r\n<h1>ActiveJDBC</h1>\r\n<h2>IDE Integrations</h2>\r\n\r\nPlease, see:\r\n<ul>\r\n    <li>\r\n        <a href=\"/p/eclipseIntegration/\" target=\"_blank\">Eclipse Integration</a>\r\n    </li>\r\n    <li>\r\n        <a href=\"/p/netbeansIntegration\" target=\"_blank\">Netbeans Integration</a>\r\n    </li>\r\n</ul>','2013-12-05 07:14:02','2013-12-05 07:14:02','ide_integrations'),(62,'FAQ','<ul class=\"breadcrumb\">\r\n<li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">FAQ</li>\r\n</ul>\r\n<h1>ActiveJDBC</h1>\r\n<div id=\"generated-toc\"></div>\r\n<h2>FAQ</h2>\r\n\r\n<h2>What the heck is instrumentation?</h2>\r\n\r\n<p>See this page: <a href=\"/p/instrumentation\">Instrumentation</a>\r\n</p>\r\n<h2>How to integrate AJ projects into\r\n    Netbeans?</h2>\r\n<p>Look here: <a href=\"/p/netbeansIntegration\">NetbeansIntegration</a>\r\n</p>\r\n<h2>Does it support database pools?</h2>\r\n<p>YES, please see here: <a\r\n        href=\"http://code.google.com/p/activejdbc/wiki/DatabaseConnectionManagement#Database_connection_pools\"\r\n        rel=\"nofollow\">Database connection pools</a>, and also see example of pool usage: <a\r\n        href=\"http://code.google.com/p/activejdbc/source/browse/trunk/activejdbc/src/test/java/activejdbc/C3P0PoolTest.java\"\r\n        rel=\"nofollow\">C3P0PoolTest</a></p>\r\n<h2>How to use Instrumentation\r\n    plugin with Eclipse?</h2>\r\n<p>Please, take a look at this thread: <a\r\n        href=\"https://groups.google.com/forum/?fromgroups=#%21searchin/activejdbc-group/eclipse/activejdbc-group/xQ5gUSnCalc/ZuuPrHsriuAJ\"\r\n        rel=\"nofollow\">https://groups.google.com/forum/?fromgroups=#!searchin/activejdbc-group/eclipse/activejdbc-group/xQ5gUSnCalc/ZuuPrHsriuAJ</a>\r\n</p>\r\n<h2>Does ActiveJDBC support SQL IN\r\n    statement?\r\n</h2>\r\n<p>This is one not supported by JDBC: <a\r\n        href=\"http://stackoverflow.com/questions/178479/preparedstatement-in-clause-alternatives\"\r\n        rel=\"nofollow\">http://stackoverflow.com/questions/178479/preparedstatement-in-clause-alternatives</a>\r\n</p>\r\n<p>However,\r\n    there are workaround alternatives, most of them centered around\r\n    concatenating strings. Basically you need to construct a full query as\r\n    string: </p>\r\n<pre class=\"prettyprint brush:java;\"  name=\"code\"> String sql = \"name IN (\'John\', \'Hellen\', \'Henry\')\";</pre>\r\n<p>To make this, you can do: </p>\r\n<pre class=\"prettyprint brush:java;\"  name=\"code\">\r\nString sql = String.format(\"name IN (\'%s\')\", join(list(\"John\", \"Hellen\", \"Henry\"), \"\', \'\");\r\nlong  count = Person.count(sql);\r\n </pre>\r\n<p>where <tt>join()</tt> method can be statically imported from: <a\r\n        href=\"http://ipsolutionsdev.com/activejdbc/org/javalite/common/Util.html#join%28java.util.Collection,%20java.lang.String%29\"\r\n        rel=\"nofollow\">http://ipsolutionsdev.com/activejdbc/org/javalite/common/Util.html#join%28java.util.Collection,%20java.lang.String%29</a>\r\n</p>\r\n<p>and <tt>list()</tt> method can be statically imported from: <a\r\n        href=\"http://ipsolutionsdev.com/activejdbc/org/javalite/common/Collections.html#list%28T...%29\"\r\n        rel=\"nofollow\">http://ipsolutionsdev.com/activejdbc/org/javalite/common/Collections.html#list%28T...%29</a>\r\n    both of these classes are already on your classpath. </p>\r\n','2013-12-05 07:33:30','2013-12-05 07:38:21','faq'),(63,'Getting Started','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Getting Started</li>\r\n</ul>\r\n<h1>ActiveJDBC</h1>\r\n\r\n<div id=\"generated-toc\"></div>\r\n\r\n<h2>Getting Started</h2>\r\n\r\n                        <p>Although\r\n                            ActiveJDBC has advanced features, simple things are very easy. This\r\n                            page shows simplest cases of DB access with ActiveJDBC. </p>\r\n                        <h2>Pre-requisite</h2>\r\n                        <ul>\r\n                            <li>Java (obvious)</li>\r\n                            <li>Maven</li>\r\n                        </ul>\r\n                        <h2>Create a standard Maven project\r\n                            structure\r\n                        </h2>\r\n                        <p>While\r\n                            ActiveJDBC does not have to be used with Maven, this example (as well\r\n                            as ActiveJDBC itself) was built with Maven. To see the project itself,\r\n                            you can check it out from SVN: </p>\r\n                        <pre name=\"code\" class=\"brush:java;\">svn co https://activejdbc.googlecode.com/svn/trunk/examples/simple-example/</pre>\r\n                        <p>The best way is to check out this project and start playing with it. Take a look at the <tt>run.sh</tt>\r\n                            script at the root of this example project. </p>\r\n                        <h2>Create a table</h2>\r\n                        <p>This is an SQL statement to create a table (MySQL used for this example): </p>\r\n                        <pre name=\"code\" class=\"brush:java;\">\r\n                            CREATE TABLE employees (\r\n                                  id  int(11) DEFAULT NULL auto_increment PRIMARY KEY,\r\n                                  first_name VARCHAR(56),\r\n                                  last_name VARCHAR(56)\r\n                              );</pre>\r\n                        <h2>Maven configuration</h2>\r\n                        <h2>Add ActiveJDBC dependency</h2>\r\n                        <pre name=\"code\" class=\"brush:xml;\">\r\n                            <dependency>\r\n                                <groupId>org.javalite</groupId>\r\n                                <artifactId>activejdbc</artifactId>\r\n                                <version>1.4.1</version>\r\n                            </dependency></pre>\r\n                        <h3>Add ActiveJDBC Instrumentation plugin</h3>\r\n                        <p>In the plugins section of the POM, add this: </p>\r\n                        <pre name=\"code\" class=\"brush:xml;\">\r\n                            <plugin>\r\n                                <groupId>org.javalite</groupId>\r\n                                <artifactId>activejdbc-instrumentation</artifactId>\r\n                                <version>1.4.1</version>\r\n                                <executions>\r\n                                    <execution>\r\n                                        <phase>process-classes</phase>\r\n                                        <goals>\r\n                                            <goal>instrument</goal>\r\n                                        </goals>\r\n                                    </execution>\r\n                                </executions>\r\n                            </plugin></pre>\r\n                        <h2>Write a model</h2>\r\n                        <p>This is the easiest thing - writing a simple model is usually done with one line of\r\n                            code: </p>\r\n                        <pre name=\"code\" class=\"brush:java;\">\r\n                            import activejdbc.Model;\r\n                            public class Employee extends Model {}</pre>\r\n                        <p>Please, note that the\r\n                            name of a table is \"employees\" - plural, and the name of a model is\r\n                            \"Employee\" - singular. ActiveJDBC uses inflections of English language\r\n                            to do conversion of plural and singular forms of words. This of course\r\n                            can be overridden by @Table annotation. </p>\r\n                        <h2>Open a connection</h2>\r\n                        <pre name=\"code\" class=\"brush:java;\">Base.open(\"com.mysql.jdbc.Driver\", \"jdbc:mysql://localhost/test\", \"user1\", \"xxxxx\");</pre>\r\n                        <p>Replace\r\n                            the values for the ones that make sense for your environment. Base is a\r\n                            utility class that allows to perform some basic (hence the name) JDBC\r\n                            operations, one of them is opening a connection. The connection object\r\n                            is then attached to the current thread, and can be consumed by any\r\n                            ActiveJDBC API. </p>\r\n                        <h2>Create a new record</h2>\r\n                        <pre name=\"code\" class=\"brush:java;\">\r\n                            Employee e = new Employee();\r\n                            e.set(\"first_name\", \"John\");\r\n                            e.set(\"last_name\", \"Doe\");\r\n                            e.saveIt();</pre>\r\n                        <p>I hope this is self-explanatory. ActiveJDBC models\r\n                            somewhat behave like maps. There are no setters or getters. You can\r\n                            still write them if you like. </p>\r\n                        <h2>Finding a single record</h2>\r\n                        <pre name=\"code\" class=\"brush:java;\">Employee e = Employee.findFirst(\"first_name = ?\", \"John\");</pre>\r\n                        <p>This line will find an instance of Employee (conditionally), if one exists, or null if one\r\n                            does not exist. </p>\r\n                        <h2>Finding some records</h2>\r\n                        <pre name=\"code\" class=\"brush:java;\">List&lt;Employee&gt; employees = Employee.where(\"first_name = ?\", \"John\");</pre>\r\n                        <h2>Updating a record</h2>\r\n                        <p>This snippet should also be self-explanatory: </p>\r\n                        <pre name=\"code\" class=\"brush:java;\">\r\n                            Employee e = Employee.findFirst(\"first_name = ?\", \"John\");\r\n                            e.set(\"last_name\", \"Steinbeck\").saveIt();</pre>\r\n                        <h2>Deleting a record</h2>\r\n                        <pre name=\"code\" class=\"brush:java;\">\r\n                        Employee e = Employee.findFirst(\"first_name = ?\", \"John\");\r\n                        e.delete();</pre>\r\n                        <h2>Deleting all records</h2>\r\n                        <pre name=\"code\" class=\"brush:java;\">Employee.deleteAll();</pre>\r\n                        <h2>Selecting all records</h2>\r\n                        <pre name=\"code\" class=\"brush:java;\">List&lt;Employee&gt; employees = Employee.findAll();</pre>\r\n                        <h2>Sample project using Ant</h2>\r\n                        <p>If\r\n                            you are not using Maven, you can use Ant. Example of exactly the same\r\n                            project with all necessary dependencies can be found here: <a\r\n                                    href=\"https://activejdbc.googlecode.com/svn/trunk/examples/ant-example/\"\r\n                                    rel=\"nofollow\">https://activejdbc.googlecode.com/svn/trunk/examples/ant-example/</a>\r\n                            Please see README file there. </p>\r\n                        <h2>Conclusion</h2>\r\n                        <p>I\r\n                            hope this quick introduction provides enough information to get\r\n                            started. It also shows how simple ActiveJDBC APIs are. The project has\r\n                            many advanced features, such as automatic recognition of associations,\r\n                            caching, validations, polymorphic associations, etc. The examples on\r\n                            this page can be found and executed in the included Maven project here: <a\r\n                                    href=\"https://activejdbc.googlecode.com/svn/trunk/examples/simple-example/\"\r\n                                    rel=\"nofollow\">https://activejdbc.googlecode.com/svn/trunk/examples/simple-example/</a>\r\n                        </p>\r\n                        <!--p>Read the <a href=\"https://code.google.com/p/activejdbc/wiki/Features\">Features</a> section\r\n                            for a more in depth information on the framework. </p-->\r\n\r\n                        <p>Enjoy </p>\r\n','2013-12-05 07:51:24','2013-12-05 07:55:19','getting_started'),(64,'Record Creation','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activejdbc\">ActiveJDBC</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Record Creation</li>\r\n</ul>\r\n<h1>ActiveJDBC</h1>\r\n\r\n<div id=\"generated-toc\"></div>\r\n\r\n<h2>Record Creation</h2>\r\n\r\n                        <h2>\r\n                            Create table\r\n                        </h2>\r\n                        <p>This is SQL for the DB table (for MySQL) </p>\r\n                        <pre name=\"code\" class=\"brush:java;\">CREATE TABLE people (\r\n                       id  int(11) DEFAULT NULL auto_increment PRIMARY KEY, \r\n                       name VARCHAR(56), \r\n                       last_name VARCHAR(56), \r\n                       dob DATE, \r\n                       graduation_date DATE, \r\n                       created_at DATETIME, \r\n                       updated_at DATETIME\r\n                       );</pre>\r\n                        <h2>Writing a Model\r\n                        </h2>\r\n                        <p>Simple models are written in one line of code. No need for setters or getters. </p>\r\n                        <pre name=\"code\" class=\"brush:java;\">public class Person extends Model {}</pre>\r\n                        <p>ActiveJDBC\r\n                            models feel similar to Map interface (although they do not implement\r\n                            it). In order to access a model attributes, you usually use built-in\r\n                            setters and getters: </p>\r\n                        <pre name=\"code\" class=\"brush:java;\">\r\n                        person.get(\"first_name\");\r\n                        ...\r\n                        person.set(\"first_name\", \"John\");</pre>\r\n                        <h2>Simple Search</a>\r\n                        </h2>\r\n                        <pre name=\"code\" class=\"brush:java;\">List&lt;Person&gt; list = Person.where(\"name = \'John\'\");</pre>\r\n                        <p>This will search a table PEOPLE. The framework will generate a SQL similar to this one: </p>\r\n                        <pre name=\"code\" class=\"brush:java;\">SELECT * FROM PEOPLE WHERE name = \'John\'</pre>\r\n                        <p>As\r\n                            you can see, the framework generates the query from SELECT to the\r\n                            WHERE. The only part that the developer is required to provide is the\r\n                            actual criteria. This is just plain SQL, albeit only a portion. </p>\r\n                        <h2>\r\n                            Parametrized search\r\n                        </h2>\r\n                        <pre name=\"code\" class=\"brush:java;\">List&lt;Person&gt; list = Person.where(\"name = ?\", \"John\");</pre>\r\n                        <p>In\r\n                            this case, the value \"John\" will be substituted for a question mark.\r\n                            The number of question marks and substitute values is flexible, but must\r\n                            be the same.\r\n                        </p>\r\n                        <h2>\r\n                            Processing large result sets\r\n                        </h2>\r\n                        <p>In\r\n                            all previous results, the entire result set was loaded into memory.\r\n                            This approach is fine in case of relatively small results, but might\r\n                            prove a performance bottleneck for very large data sets. The approach\r\n                            below is somewhat reminiscent of SAX approach, where a super large data\r\n                            set from a DB is read, and for every one record found, it produces a\r\n                            callback. Within that callback, you perform whatever operation that\r\n                            makes sense for the application. The advantage of this approach is not\r\n                            needing to allocate a ton of memory. This is usually a preferred method\r\n                            for batch processes. </p>\r\n                        <pre name=\"code\" class=\"brush:java;\">\r\n                            Person.find(\"name=\'John\'\", new ModelListener&lt;Person&gt;() {\r\n                            public void onModel(Person person) {\r\n                            System.out.println(\"Found person: \" + person);\r\n                            }\r\n                            });</pre>\r\n                        <h2>Finding one record</h2>\r\n                        <p>Finding just one record can be achieved with <tt>findFirst</tt> method. As name suggests,\r\n                            even if the query can result in multiple records, only the first one is returned. </p>\r\n<pre name=\"code\" class=\"brush:java;\">Person person = Person.findFirst(\"id = 2\");\r\n//parametrized:\r\nperson = Person.findFirst(\"id = ?\", 2);\r\n...</pre>\r\n                        <h2>Finding all records</h2>\r\n                        <p>This\r\n                            is a method or returning all records from a table, use carefully as\r\n                            this will load them all into memory (when you start processing the\r\n                            result, not when this method is called) </p>\r\n                        <pre name=\"code\" class=\"brush:java;\">List&lt;Person&gt; list = Person.findAll();\r\n                            for(Person p: list){   //<==== this line of code will initiate the actual query to DB\r\n                            System.out.println(p);\r\n                            }</pre>\r\n                        <h2>Create and save</h2>\r\n                        <p>There are many (more concise) methods of creation of models, this is being the most simple\r\n                            and self-explanatory: </p>\r\n                        <pre name=\"code\" class=\"brush:java;\">\r\n                            Person p = new Person();\r\n                            p.set(\"name\", \"Marilyn\");\r\n                            p.set(\"last_name\", \"Monroe\");\r\n                            p.set(\"dob\", \"1935-12-06\");\r\n                            p.saveIt();\r\n\r\n                            System.out.println(p.getId());// <== this will print an ID assigned by DB.\r\n                        </pre>\r\n                        <h2>Metadata used to check valid\r\n                            attributes\r\n                        </h2>\r\n                        <p>If\r\n                            you look at the SQL at the top of this page, you will see that the\r\n                            table backing up the model doe snot have a column \"name1\". Since the\r\n                            framework will interrogate the DB at the startup and retrieve all\r\n                            metadata information for each table, it will know which model has which\r\n                            attributes. As such, setting a wrong attribute will generate a runtime\r\n                            exception. </p>\r\n                        <pre name=\"code\" class=\"brush:java;\">\r\n                            Person p = new Person();\r\n                            p.set(\"name1\", \"Igor\"); //<=== this will throw exception\r\n                        </pre>\r\n                        <p>Here is an example exception (generated from code snippet above): </p>\r\n                        <pre name=\"code\" class=\"brush:java;\">\r\n                            java.lang.IllegalArgumentException: Attribute: \'name1\' is not defined in model: \'class activejdbc.test_models.Person\', available attributes: [id, updated_at, graduation_date, dob, name, last_name, created_at]\r\n                            ...</pre>\r\n                        <p>As you can see, the message is very descriptive. </p>\r\n                        <h2>\r\n                            Lookup and save\r\n                        </h2>\r\n                        <p>Putting it together, it is trivial to look up data from DB, modify it, and then save. </p>\r\n                        <pre name=\"code\" class=\"brush:java;\">\r\n                            List<Person> list = Person.find(\"id = 1\");\r\n                            Person p = list.get(0);\r\n                            p.set(\"name\", \"Igor\");\r\n                            p.saveIt();</pre>\r\n                        <h2>Get by id</h2>\r\n                        <p>This is self-explanatory. If you know the ID, it is easy to get the model that represents\r\n                            this record. </p>\r\n                        <pre name=\"code\" class=\"brush:java;\">Person p = Person.findById(1);</pre>\r\n                        <h2>Count all records</h2>\r\n                        <p>Counting all records is as simple as calling the \"count()\" method </p>\r\n                        <pre name=\"code\" class=\"brush:java;\">long personCount = Person.count();</pre>\r\n                        <h2>Conditional count</h2>\r\n                        <p>Counting some records is equally easy, all you have to do is to provide criteria. </p>\r\n                        <pre name=\"code\" class=\"brush:java;\">long johnCount = Person.count(\"name = ? \", \"John\");</pre>\r\n                        <h2>Use raw SQL</h2>\r\n                        <p>In case, a query is really complicated, you can always resort to raw SQL like this: </p>\r\n                        <pre name=\"code\" class=\"brush:java;\">\r\n                            List&lt;Book&gt; books = Book.findBySQL(\"select books.*, address from books, libraries where books.lib_id = libraries.id order by address\");</pre>\r\n                        <p>The\r\n                            only requirement to this method is that your select statement should\r\n                            select all columns from a table that this model represents. Since model\r\n                            knows which attributes belong to it, it will pluck them from the result\r\n                            set, and you will have a normal list of models (Book in this case) that\r\n                            are initialized from your query. </p>\r\n                        <!--p>Back to <a href=\"http://code.google.com/p/activejdbc/wiki/Features\">Features</a>. </p-->','2013-12-05 08:07:22','2013-12-05 08:07:22','record_creation'),(65,'Deploying To Heroku  ','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activeweb\">ActiveWeb</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Deploying To Heroku</li>\r\n</ul>\r\n\r\n<h1>ActiveWeb</h1>\r\n<div id=\"generated-toc\"></div>\r\n<h2> Deploying To Heroku </h2>\r\n\r\n\r\n<p>#How to deploy and ActiveWeb app to Heroku </p>\r\n<h2>Introduction</h2>\r\n<p>This guide uses the ClearDB mysql service, but it could easily be adapted to the Heroku Postgres service. </p>\r\n<p>FYI:\r\n    its completely possible that I forgot something in this guide and that\r\n    it will need to be updated by the very first person that tries to use\r\n    it. Post something on the GoogleGroup if you need help. </p>\r\n\r\n<p>The basic\r\n    idea is that Heroku puts a specific environment variables in your apps\r\n    config that you need to be able to read at runtime to setup your db\r\n    connections. Try this command in your Heroku toolbelt to see your\r\n    current config vars. You might see something like this: </p>\r\n<pre name=\"code\" class=\"brush:java;\">~> heroku config\r\n            === your app Config Vars\r\n            CLEARDB_DATABASE_URL: mysql://zzzzzz@us-cdbr-east-03.cleardb.com/heroku_yyyyyy?reconnect=true\r\n            DATABASE_URL:         mysql://zzzzzz@us-cdbr-east-03.cleardb.com/heroku_yyyyyy?reconnect=true\r\n            SENDGRID_PASSWORD:    PPPPPPP\r\n            SENDGRID_USERNAME:    UUUUUU@heroku.com\r\n     </pre>\r\n<h2>DATABASE_URL</h2>\r\n<p>The\r\n    recommended practice by Heroku is to have the full database url in an\r\n    environment variable named DATABASE_URL. By default ClearDB puts the URL\r\n    in a different var (shown above) and you have to copy the value into a\r\n    new var with this name. Try this to learn about setting up config vars </p>\r\n<pre name=\"code\" class=\"brush:java;\">heroku help config</pre>\r\n<h2>At runtime</h2>\r\n<p>Your next task is to be able to read this variable at runtime. Here\'s a class and its spec for the Utility that I use\r\n    to do so </p>\r\n<pre name=\"code\" class=\"brush:java;\">package app.utils;\r\n\r\nimport org.junit.Test;\r\n\r\nimport java.net.URISyntaxException;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Properties;\r\n\r\nimport static org.javalite.test.jspec.JSpec.the;\r\n\r\n/**\r\n * Created By\r\n * User: Evan Leonard\r\n * Date: 3/30/13\r\n */\r\npublic class HerokuDbUrlParserSpec {\r\n\r\n    private static String clear_db_url = \"mysql://THE_USERNAME:THE_PASSWORD@us-cdbr-east-03.cleardb.com/heroku_759ea2a30074fe9?reconnect=true\";\r\n    //private static String test_db_url = \"mysql://aw:awawaw@localhost/ayah_test?reconnect=true\";\r\n\r\n    @Test\r\n    public void shouldParseUrl() throws URISyntaxException {\r\n\r\n        Map&lt;String, String&gt; mockEnv = mockEnv();\r\n        HerokuDbUrlParser herokuDbUrlParser = new HerokuDbUrlParser(mockEnv);\r\n\r\n        Properties jdbcProperties = herokuDbUrlParser.getJdbcProperties();\r\n        the(jdbcProperties.getProperty(\"driver\")).shouldEqual(\"com.mysql.jdbc.Driver\");\r\n        the(jdbcProperties.getProperty(\"url\")).shouldEqual(\"jdbc:mysql://us-cdbr-east-03.cleardb.com/heroku_759ea2a30074fe9?reconnect=true\");\r\n        the(jdbcProperties.getProperty(\"user\")).shouldEqual(\"THE_USERNAME\");\r\n        the(jdbcProperties.getProperty(\"password\")).shouldEqual(\"THE_PASSWORD\");\r\n\r\n        the(herokuDbUrlParser.getDriver()).shouldEqual(\"com.mysql.jdbc.Driver\");\r\n        the(herokuDbUrlParser.getUrl()).shouldEqual(\"jdbc:mysql://us-cdbr-east-03.cleardb.com/heroku_759ea2a30074fe9?reconnect=true\");\r\n        the(herokuDbUrlParser.getUser()).shouldEqual(\"THE_USERNAME\");\r\n        the(herokuDbUrlParser.getPassword()).shouldEqual(\"THE_PASSWORD\");\r\n\r\n    }\r\n\r\n    private Map&lt;String, String&gt; mockEnv() {\r\n        Map&lt;String, String&gt; mockEnv = new HashMap&lt;String, String&gt;();\r\n        mockEnv.put(\"DATABASE_URL\", clear_db_url);\r\n        return mockEnv;\r\n    }\r\n}</pre>\r\n<p>And the implementation: </p>\r\n<pre name=\"code\" class=\"brush:java;\">package app.utils;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport sun.reflect.generics.reflectiveObjects.NotImplementedException;\r\n\r\nimport java.net.URI;\r\nimport java.net.URISyntaxException;\r\nimport java.util.Map;\r\nimport java.util.Properties;\r\n\r\n/**\r\n * Created By\r\n * User: evan\r\n * Date: 3/27/13\r\n *\r\n * Heroku sets the production database url into an environment variable named DATABASE_URL.\r\n *\r\n * This class is parses that at runtime for ActiveWeb to use in DbConfig.java\r\n */\r\npublic class HerokuDbUrlParser {\r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(HerokuDbUrlParser.class);\r\n\r\n    public static final String DATABASE_URL = \"DATABASE_URL\";\r\n\r\n    private boolean databaseUrlFound = false;\r\n    private String driver;\r\n    private String user;\r\n    private String password;\r\n    private String url;\r\n\r\n    public HerokuDbUrlParser(Map&lt;String, String&gt; environmentVariables) {\r\n        String database_url = getHerokuDatabaseUrl(environmentVariables);\r\n        if(database_url != null) {\r\n            databaseUrlFound = true;\r\n            if (logger.isInfoEnabled()) logger.info(\"Found DATABASE_URL: \"+database_url);\r\n            parseDatabaseUrl(database_url);\r\n        }\r\n        else {\r\n            if (logger.isInfoEnabled()) logger.info(\"DID NOT FIND DATABASE_URL ENV VARIABLE!\");\r\n        }\r\n    }\r\n\r\n    private void parseDatabaseUrl(String database_url) {\r\n        try {\r\n            URI dbUri = new URI(database_url);\r\n            driver = inferDriverClass(database_url);\r\n            user = dbUri.getUserInfo().split(\":\")[0];\r\n            password = dbUri.getUserInfo().split(\":\")[1];\r\n\r\n            String authPart = user + \":\" + password + \"@\";\r\n            url = \"jdbc:\"+database_url.replace(authPart, \"\");\r\n        } catch (URISyntaxException e) {\r\n            logger.error(\"Failed to parse Heroku DB Url\", e);\r\n            driver = url = user = password = null;\r\n            throw new RuntimeException(\"Failed to parse Heroku DB Url\",e);\r\n        }\r\n    }\r\n\r\n    private static String getHerokuDatabaseUrl(Map&lt;String, String&gt; environmentVariables) {\r\n        String database_url = environmentVariables.get(DATABASE_URL);\r\n        if(database_url != null) {\r\n            logger.error(\"FOUND DB URL IN ENVIRONMENT VARIABLES\");\r\n        }\r\n        else {\r\n            database_url = System.getProperty(DATABASE_URL);\r\n            if(database_url != null){\r\n                logger.error(\"FOUND DB URL IN SYSTEM PROPERTIES\");\r\n            }\r\n        }\r\n        return database_url;\r\n    }\r\n\r\n    private static String inferDriverClass(String database_url) {\r\n        String driver;\r\n        if(database_url.contains(\"mysql\")) {\r\n            driver = \"com.mysql.jdbc.Driver\";\r\n        }\r\n        else {\r\n            throw new NotImplementedException();\r\n        }\r\n        return driver;\r\n    }\r\n\r\n    public String getDriver() {\r\n        return driver;\r\n    }\r\n\r\n    public String getUrl() {\r\n        return url;\r\n    }\r\n\r\n    public String getUser() {\r\n        return user;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    /**\r\n     * @return Property set that contains: \'driver\', \'url\', \'user\', and \'password\' with no prefix\r\n     */\r\n    public Properties getJdbcProperties() {\r\n        if(!databaseUrlFound) {\r\n            return null;\r\n        }\r\n\r\n        String driver = getDriver();\r\n        String url = getUrl();\r\n        String user = getUser();\r\n        String password = getPassword();\r\n\r\n        Properties properties = new Properties();\r\n        properties.setProperty(\"driver\", driver);\r\n        properties.setProperty(\"url\", url);\r\n        properties.setProperty(\"user\", user);\r\n        properties.setProperty(\"password\", password);\r\n\r\n        return properties;\r\n    }\r\n}</pre>\r\n<p>With that in place you call this use this method in your\r\n    DbConfig with \"production\" and the jdbcProperties returned by the parser\r\n    above to setup your ActiveJdbc connection </p>\r\n<pre name=\"code\" class=\"brush:java;\"> private void createConnection(String env, Properties jdbcProperties) {\r\n        String driver = jdbcProperties.getProperty(\"driver\");\r\n        String url = jdbcProperties.getProperty(\"url\");\r\n        environment(env).jdbc(driver, url, jdbcProperties);\r\n        environment(env).testing().jdbc(driver, url, jdbcProperties);\r\n    }</pre>\r\n<h2>Building on Heroku</h2>\r\n<p>Heroku\r\n    of course will try to build your app as soon as you push its git repo.\r\n    It does a good job of detecting that its a java app and running maven.\r\n    Where I ran into trouble was that I had configured my POM to do\r\n    different things based on the value of the ACTIVE_ENV environment\r\n    variable. Even thought I could set a config var of that name, <strong>config vars are not available at build\r\n        time</strong>\r\n</p>\r\n<p>The\r\n    approach I found was to fork the heroku java build pack and hardcode\r\n    -DACTIVE_ENV=production into the java properties used to run maven. Here\r\n    is the location of my forked buildpack: </p>\r\n<pre name=\"code\" class=\"brush:java;\">https://github.com/evanleonard/heroku-buildpack-java</pre>\r\n<p>To have your app use it to if you want, you just set a config var like this: </p>\r\n<pre name=\"code\" class=\"brush:java;\">BUILDPACK_URL:        https://github.com/evanleonard/heroku-buildpack-java</pre>\r\n<p><strong>Note:\r\n    after my first successful build I noticed that these config vars\r\n    appeared. It may be possible to modify them to eliminate the need for\r\n    this custom build pack. But I haven\'t tried to do this yet: </strong></p>\r\n<pre name=\"code\" class=\"brush:java;\">JAVA_OPTS:            -Xmx384m -Xss512k -XX:+UseCompressedOops\r\nMAVEN_OPTS:           -Xmx384m -Xss512k -XX:+UseCompressedOops</pre>\r\n<h2>Disabling Tests</h2>\r\n<p>Also had to disable running of Selenium tests in my POM. </p>\r\n<p>TODO </p>\r\n<h2>Heroku SSL support</h2>\r\n<p>There\'s\r\n    two things you need to do after you\'ve enabled your SSL endpoint add-on\r\n    in heroku. The first is to force traffic from regular http to https.\r\n    This is easily done in a filter with methods like these </p>\r\n<pre name=\"code\" class=\"brush:java;\"> /**\r\n     * http://stackoverflow.com/questions/7185074/heroku-nodejs-http-to-https-ssl-forced-redirect\r\n     */\r\n    private boolean isHttpsRequest() {\r\n        String header = header(\"x-forwarded-proto\");\r\n        return header != null &amp;&amp; header.equals(\"https\");\r\n    }\r\n    private void redirectToHttps() {\r\n        flash(Constants.PJAX_FORCE_RELOAD, true);\r\n        StringBuilder newUrl = getHttpsUrl();\r\n        redirect(newUrl.toString());\r\n    }</pre>\r\n<p>The next is to rewrite incoming requests so they appear as\r\n    though they came straight from the client, eventhough they\'ve been\r\n    routed through the SSL endpoint. The best way I found to do this was\r\n    with the XForwardedFilter from Xebia. To enable put this in your pom: </p>\r\n<pre name=\"code\" class=\"brush:java;\">\r\n<dependency>\r\n    <groupId>fr.xebia.web</groupId>\r\n    <artifactId>xebia-servlet-extras</artifactId>\r\n    <version>1.0.8</version>\r\n</dependency></pre>\r\n<p>and then add this to your web.xml above the dispatcher\'s filter-mapping: </p>\r\n<pre name=\"code\" class=\"brush:xml;\"> <filter>\r\n    <filter-name>XForwardedFilter</filter-name>\r\n    <filter-class>fr.xebia.servlet.filter.XForwardedFilter</filter-class>\r\n    <init-param>\r\n        <param-name>protocolHeader</param-name>\r\n        <param-value>x-forwarded-proto</param-value>\r\n    </init-param>\r\n</filter>\r\n\r\n    <!-- This must be before the dispatcher so that it is executed first in the filter chain -->\r\n<filter-mapping>\r\n    <filter-name>XForwardedFilter</filter-name>\r\n    <url-pattern>/*</url-pattern>\r\n    <dispatcher>REQUEST</dispatcher>\r\n</filter-mapping></pre>\r\n<h2>Summary</h2>\r\n<p>That\r\n    should be it, go ahead and push to your git repo, let Heroku do its\r\n    thing and see if you get a new build live on the web. Then enjoy\r\n    continuous deployment! </p>\r\n\r\n<p>Oh, and please post something on the\r\n    GoogleGroup if (when?) you run into a problem. As I said at the start,\r\n    its very likely I missed something here. </p>\r\n<p>Best Evan </p>\r\n\r\n','2013-12-05 09:23:10','2013-12-05 09:26:34','deploying_to_heroku__'),(66,'MacOSX','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activeweb\">ActiveWeb</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">MacOSX</li>\r\n</ul>\r\n\r\n<h1>ActiveWeb</h1>\r\n<div id=\"generated-toc\"></div>\r\n<h2>MacOSX</h2>\r\n\r\n<h2>Introduction\r\n</h2>\r\n\r\n<p>The simple example app needs a few small modification to run on OS X. See below for\r\n    each. </p>\r\n\r\n<h2>Setting Tools Jar Path\r\n</h2>\r\n\r\n<p>On\r\n    OS X there is no \"tools.jar\", its instead named \"classes.jar\" and lives\r\n    in a different directory. Here\'s how to pick it up in your pom.xml </p>\r\n<pre name=\"code\" class=\"brush:xml;\">\r\n<profiles>\r\n   <profile>\r\n       <id>default-profile</id>\r\n       <activation>\r\n           <activeByDefault>true</activeByDefault>\r\n           <file>\r\n               <exists>${java.home}/../lib/tools.jar</exists>\r\n           </file>\r\n       </activation>\r\n       <properties>\r\n           <toolsjar>${java.home}/../lib/tools.jar</toolsjar>\r\n       </properties>\r\n   </profile>\r\n   <profile>\r\n       <id>mac-profile</id>\r\n       <activation>\r\n           <activeByDefault>false</activeByDefault>\r\n           <file>\r\n               <exists>${java.home}/../Classes/classes.jar</exists>\r\n           </file>\r\n       </activation>\r\n       <properties>\r\n           <toolsjar>${java.home}/../Classes/classes.jar</toolsjar>\r\n       </properties>\r\n   </profile>\r\n</profiles>\r\n</pre>\r\n<p>And then update this dependency to use the toolsjar variable: </p>\r\n<pre name=\"code\" class=\"brush:xml;\">\r\n   <dependency>\r\n       <groupId>com.sun</groupId>\r\n       <artifactId>tools</artifactId>\r\n       <version>1.5.0</version>\r\n       <scope>system</scope>\r\n       <systemPath>${toolsjar}</systemPath>\r\n   </dependency>\r\n</pre>\r\n<h2>Picking an App Server</h2>\r\n<p>You\r\n    have two choices here. You can either make a change to the\r\n    jetty-env.xml file to get jetty working, or you can switch to use the\r\n    tomcat plugin instead of jetty. Here\'s the details for both. </p>\r\n<h3>Jetty plugin\r\n</h3>\r\n<p>To get jetty to work update your jetty-env.xml file like this: </p>\r\n<pre name=\"code\" class=\"brush:xml;\">\r\n   <?xml version=\"1.0\"?>\r\n    <!DOCTYPE Configure PUBLIC \"-//Mort Bay Consulting//DTD Configure//EN\" \"http://jetty.mortbay.org/configure.dtd\">\r\n   <Configure class=\"org.mortbay.jetty.webapp.WebAppContext\">\r\n       <Set name=\"parentLoaderPriority\">true</Set>\r\n   </Configure>\r\n</pre>\r\n<h3>Tomcat plugin</h3>\r\n<p>Or\r\n    alternatively switch to the Tomcat plugin in pom.xml. The only oddity\r\n    about Tomcat plugin is that it is pinned to the \"compile\" phase, which\r\n    means that unlike Jetty it will not run instrumentation automatically.\r\n    Other then that, no issues with Tomcat plugin on MaxOS. Here is the\r\n    configuration: </p>\r\n<pre name=\"code\" class=\"brush:xml;\">\r\n<plugin>\r\n    <groupId>org.apache.tomcat.maven</groupId>\r\n    <artifactId>tomcat7-maven-plugin</artifactId>\r\n    <version>2.0-beta-1</version>\r\n    <configuration>\r\n        <path>/</path>\r\n        <systemProperties>\r\n            <activejdbc.log/>\r\n            <active_reload>true</active_reload>\r\n            <activeweb.log.request>true</activeweb.log.request>\r\n        </systemProperties>\r\n    </configuration>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>com.sun</groupId>\r\n            <artifactId>tools</artifactId>\r\n            <version>1.6.0</version>\r\n            <scope>system</scope>\r\n            <systemPath>${toolsjar}</systemPath>\r\n        </dependency>\r\n    </dependencies>\r\n</plugin>\r\n</pre>\r\n\r\n','2013-12-06 07:35:43','2013-12-06 07:36:59','macosx'),(67,'FAQ','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li><a href=\"/p/activeweb\">ActiveWeb</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">FAQ</li>\r\n</ul>\r\n\r\n<h1>ActiveWeb</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\n<h2>FAQ</h2>\r\n<h3>Why FreeMarker?</h3>\r\n<p>Because\r\n    FreeMarker is a great web templating engine for Java. It is mature, has\r\n    easy to understand syntax, makes it trivial to extend with tags, and\r\n    allows for end to end testing of a web application with <tt>integrateViews()</tt> method in\r\n    controller tests, something JSPs cannot do due to their\r\n    dependency on containers. FreeMarker templates are independent of JSTL\r\n    and JSP specification, and will work universally well in any container. </p>\r\n<h3>Why Guice?</h3>\r\n<p>Because\r\n    Google Guice feels right when it comes to dependency injection. While\r\n    Spring rules the world, we feel that binding components should be cone\r\n    in code, and not in XML or annotations. Besides, Google Guice has\r\n    excellent APIs, which allowed us to integrate it into the framework in\r\n    record time. It also lightweight and does not bring many transitive\r\n    dependencies into a project. </p>\r\n<h3>Why ActiveJDBC?</h3>\r\n<p>Because\r\n    ActiveJDBC was the firsts project in an effort to make Java development\r\n    productive, fast and fun. ActiveWeb is second such significant project.\r\n    Besides, there are a few web-friendly pieces baked directly into\r\n    ActiveJDBC, such as internationalization, validations, JSON and XML\r\n    generation. However, ActiveWeb does not have a dependency on ActiveJDBC,\r\n    and allows to use any database access technology available to Java\r\n    developers. </p>\r\n<h3>Why Maven?</h3>\r\n<p>Because\r\n    Maven has a typical structure, is popular with developers, has a huge\r\n    inventory of plugins, vast community and plethora of information on the\r\n    Internet </p>\r\n<h2>Why app.controllers?</h2>\r\n<p>ActiveWeb requires controllers to be in the package <tt>app/controllers</tt>. Please read\r\n    this: <a\r\n            href=\"http://code.google.com/p/activeweb/wiki/StructureOfActiveWebProject#Location_of_controllers\"\r\n            rel=\"nofollow\">Location of controllers</a></p>\r\n<h3>Why Carbon 5?</h3>\r\n<p>ActiveWeb suggests using <a href=\"http://code.google.com/p/c5-db-migration/\" rel=\"nofollow\">Carbon\r\n    5 Migration Tool</a> because developers of ActiveWeb have been enjoying it for significant\r\n    time. Carbon 5 is a Maven plugin, and will run migrations against\r\n    configured databases automatically during the build. This makes it super\r\n    easy to promote migrations to other members of the team. All you have\r\n    to do is create a migration, run the build locally (to migrate your\r\n    local databases), and then commit your changes. When another developer\r\n    updates a project with latest changes, he/she will get a new\r\n    migration(or a few), after running the build, this developer too will\r\n    have local databases migrated. </p>\r\n<p>Another plus is absence of a\r\n    special \"abstraction\" language as in Ruby on Rails. Migrations are\r\n    written in raw SQL, which is a huge plus. This allows for any\r\n    non-standard SQL for your specific database, and also helps DBAs get\r\n    involved if needed.\r\n</p>\r\n','2013-12-06 07:49:30','2013-12-06 07:50:32','faq_activeweb'),(68,'Http Client','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n\r\n    <li class=\"active\">JavaLite HTTP</li>\r\n</ul>\r\n<h1>JavaLite HTTP</h1>\r\n<div id=\"generated-toc\"></div>\r\n\r\nJavaLite HTTP is a tiny library for making HTTP requests and returning responses. It has no dependencies other than the JDK. \r\n\r\n<h2>How to GET</h2>\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nGet get = Http.get(\"http://yahoo.com\");\r\nSystem.out.println(get.text());\r\nSystem.out.println(get.headers());\r\nSystem.out.println(get.responseCode())\r\n</pre>\r\n\r\n\r\n<h2>How to POST</h2>\r\n\r\n<pre name=\"code\" class=\"brush:java;\">\r\nPost post = Http.post(\"http://yahoo.com\", content).header(headerName, headerValue);\r\nSystem.out.println(post.text());\r\nSystem.out.println(post.headers());\r\nSystem.out.println(post.responseCode())\r\n</pre>\r\n\r\n<h2>How to PUT and DELETE</h2>\r\n\r\nSimilar to the above.  You can find full JavaDoc here: <a href=\"http://javalite.github.io/activejdbc/org/javalite/http/package-summary.html\">JavaLite HTTP</a>\r\n\r\n<h2>How to get the dependency</h2>\r\n\r\n<pre name=\"code\" class=\"brush:xml;\">\r\n<dependency>\r\n    <groupId>org.javalite</groupId>\r\n    <artifactId>javalite-common</artifactId>\r\n    <version>1.4.8</version>\r\n</dependency>\r\n</pre>\r\n\r\nAlternatively you can download it here: <a href=\"http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22javalite-common%22\">Maven Central</a>','2013-12-30 16:59:45','2013-12-30 17:14:47','http'),(69,'Source Code','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Sources</li>\r\n</ul>\r\n<h1>Source code</h1>\r\n\r\n<ul>\r\n<li>\r\n<a href=\"https://github.com/javalite/activejdbc\">ActiveJDBC Github Repo</a>\r\n</li>\r\n\r\n<li>\r\n<a href=\"https://github.com/javalite/activeweb\">ActiveWeb Github Repo</a>\r\n</li>\r\n\r\n</ul','2013-12-30 17:22:07','2013-12-30 17:28:33','sources'),(70,'Support','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Support</li>\r\n</ul>\r\n<h2>Support Groups</h2>\r\n\r\n<ul>\r\n<li> <a href=\"https://groups.google.com/forum/#!forum/activejdbc-group\">ActiveJDBC Google Group</a></li>\r\n<li> <a href=\"https://groups.google.com/forum/?hl=en#!forum/activeweb\">ActiveWeb Google Group</a></li>\r\n</ul>\r\n\r\n','2013-12-30 17:33:04','2013-12-30 17:36:01','support'),(71,'Documentation','<ul class=\"breadcrumb\">\r\n    <li><a href=\"/\">Home</a> <span class=\"divider\">/</span></li>\r\n    <li class=\"active\">Documentation</li>\r\n</ul>\r\n\r\n<h2>Documentation</h2>\r\n\r\n<p>\r\n<a href=\"http://javalite.github.io/activejdbc/\">ActiveJDBC JavaDoc</a>\r\n</p>\r\n<p>\r\n<a href=\"http://javalite.github.io/activeweb/\">ActiveWeb JavaDoc</a>\r\n</p>','2013-12-30 17:37:02','2013-12-30 17:44:06','documentation');
INSERT INTO `users` VALUES (1,'igor','XntfDvPMz6ybkCJXbMpGbQ==','2013-04-26 13:47:57','2013-04-26 13:47:57'),(3,'tanya','XpCCc44ZCSS6GKHl7aOpCQ==','2013-11-12 07:24:40','2013-11-12 07:24:40');
