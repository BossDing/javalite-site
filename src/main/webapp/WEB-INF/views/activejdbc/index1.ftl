<@render partial="/common/highlighter_includes"/>
<@render partial="/common/breadcrumbs" leaf="ActiveJDBC"/>

<script type="text/javascript">
    function scrollTo(id){
          $('html,body').animate({scrollTop: $("#"+id).offset().top - 50},'slow');
    }

</script>

<h1>ActiveJDBC</h1>

<div id="generated-toc"></div>

<h2>Design principles</h2>

<ul>
    <li>Should infer metadata from DB (like ActiveRecord)</li>
    <li>Should be very easy to work with</li>
    <li>Should reduce amount of code to a minimum</li>
    <li>No configuration, just conventions</li>
    <li>Some conventions are overridable in code</li>
    <li>No need to learn another language</li>
    <li>No need to learn another QL - SQL is sufficient</li>
    <li>Code must be lightweight and intuitive, sholid read like English</li>
    <li>No sessions, no "attaching, re-attaching"</li>
    <li>No persistence managers.</li>
    <li>No classes outside your own models.</li>
    <li>Models are lightweight, no transient fields</li>
    <li>No proxy-ing. What you write is what you get (WYWIWYG :))</li>
    <li>No getters and setters. You can still write them if you like.</li>
    <li>No DAOs and DTOs - this is mostly junk code anyway</li>
</ul>





<h2>Documentation</h2>


<a href="javascript:void(0);" onclick="$('#documentation').show('slow')">Expand table of contents</a>

<div id="documentation" style="display: none;">

    <ul>
        <li><a href="setters_and_getters">Setters and getters</a></li>
        <li><a href="record_selections">Record selection</a></li>
        <li><a href="surrogate_primary_keys">Surrogate primary keys</a></li>
        <li><a href="limit_and_sort">Limit and Sort</a></li>
        <li><a href="record_creation">Record creation</a></li>
        <li><a href="batch_operations">Batch operations</a></li>
        <li><a href="validations">validations</a></li>
        <li><a href="converters">Converters</a></li>
        <li><a href="optimistic_locking">Optimistic locking</a></li>
        <li><a href="transactions">Transactions</a></li>
        <li><a href="one_to_many_association">One-To-Many Association</a></li>
        <li><a href="autogenerated_fields">Autogenerated Fields</a></li>
        <li><a href="Caching">Caching</a></li>
        <li><a href="clob_support_and_caching">Clob Support and caching</a></li>

        <li><a href="many_to_many_association">Many-To-Many Association</a></li>
        <li><a href="many_to_many_association">Many-To-Many Association</a></li>

    </ul>




    GenerationOfXml
    GenerationOfJson
    LifecycleCallbacks
    StatisticsReporting
    LazyAndEager
    Logging
    Instrumentation
    JSpec
    DBMigrations
    DataConversions
    WritingTests
    DatabaseConnectionManagement
    DeleteCascade
    Inheritance

</div>






<h2 id="prog_model">Programming model</h2>
For a simple example we will use a table called PEOPLE created with this MySQL DDL:

<pre name="code" class="brush:sql;">
    CREATE TABLE people (
      id  int(11) NOT NULL auto_increment PRIMARY KEY,
      name VARCHAR(56) NOT NULL,
      last_name VARCHAR(56),
      dob DATE,
      graduation_date DATE,
      created_at DATETIME,
      updated_at DATETIME
      );
</pre>
ActiveJDBC infers DB schema parameters from a database. This means you do not have to provide it in code,
the simplest example model looks like this:

<pre name="code" class="brush:java;">
public class Person extends Model {}
</pre>

Despite the fact that there is no code in it, it is fully functional and will map to a table called PEOPLE automatically.

Here is how to use it:

<h3 id="create">How to query</h3>
Querying is easy:

<pre name="code" class="brush:java;">
List&lt;Person&gt; people = Person.where(&quot;name = 'John'&quot;);
Person aJohn = people.get(0);
String johnsLastName = aJohn.get(&quot;last_name&quot;);
</pre>
As you can see, the amount of code is reduced to a level when it is actually readable. Finder methods can also be parametrized like this:

<pre name="code" class="brush:java;">
List&lt;Person&gt; people = Person.where(&quot;name = ?&quot;, &quot;John&quot;);
    Person aJohn = people.get(0);
    String johnsLastName = aJohn.get(&quot;last_name&quot;);
    Paging through data
    List&lt;Employee&gt; people = Employee.where(&quot;department = ? and hire_date &gt; ? &quot;, &quot;IT&quot;, hireDate)
        .offset(21)
        .limit(10)
        .orderBy(&quot;hire_date asc&quot;);

</pre>
This query will ensure that the returned result set will start at the 21st record and will return only 10 records,
according to the "orderBy". The ActiveJDBC has a built in facility for various database flavors and it will generate
appropriate SQL statement that is specific for a DB (Oracle, MySQL, etc) and is efficient. It will not fetch all records, starting with 1.

<h3>Creating new records</h3>
There are several ways to do this, and the simplest is:

<pre name="code" class="brush:java;">
Person p = new Person();
p.set("name", "Marilyn");
p.set("last_name", "Monroe");
p.set("dob", "1935-12-06");
p.saveIt();
</pre>
There is also a shorthand version of doing the same:

<pre name="code" class="brush:java;">
new Person().set("name", "Marilyn").set("last_name", "Monroe").set("dob", "1935-12-06").saveIt();
</pre>
and yet another one :
<pre name="code" class="brush:java;">
Person.createIt("name", "Marilyn", "last_name", "Monroe", "dob", "1935-12-06");
    </pre>

<h3 id="update">Updating a record</h3>
<pre name="code" class="brush:java;">
Employee e = Employee.findFirst("first_name = ?", "John");
e.set("last_name", "Steinbeck").saveIt();
</pre>

<h3 id="delete">Deleting a record</h3>
<pre name="code" class="brush:java;">
Employee e = Employee.findFirst("first_name = ?", "John");
e.delete();
</pre>


<h2>Getting the latest version</h2>
Latest version is 1.2.2 and it is deployed to Maven sentral repository. If you use Maven add this to your pom:

<pre name="code" class="brush:xml;">
    <dependency>
        <groupId>org.javalite</groupId>
        <artifactId>activejdbc</artifactId>
        <version>1.2.2</version>
    </dependency>
</pre>


For other technologies, or if you want to simply download it, use instructions provided here:

<a href="http://search.maven.org/#artifactdetails|org.javalite|activejdbc|1.2.2|jar"> ActiveJDBC on Maven Central </a>

<p>
Conversely, configure Instrumentation plugin:


<pre name="code" class="brush:xml;">
    <plugin>
        <groupId>org.javalite</groupId>
        <artifactId>activejdbc-instrumentation</artifactId>
        <version>1.2.2</version>
        <executions>
          <execution>
            <phase>process-classes</phase>
            <goals>
              <goal>instrument</goal>
            </goals>
          </execution>
        </executions>
    </plugin>
</pre>

Or download from: <a href="http://search.maven.org/#artifactdetails|org.javalite|activejdbc-instrumentation|1.2.2|maven-plugin">
    ActiveJDBC Instrumentation plugin on Maven Central
</a>

<h2>Getting latest snapshot versions</h2>

If you are using Maven, add these repositories to your pom:

<pre name="code" class="brush:xml;">
    <repositories>
        <repository>
            <id>sonatype-nexus-snapshots</id>
            <name>Sonatype Nexus Plugin Snapshots</name>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
            <releases>
                <enabled>false</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>sonatype-nexus-plugin-snapshots</id>
            <name>Sonatype Nexus Plugin Snapshots</name>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
            <releases>
                <enabled>false</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>
</pre>

If you are not using Maven, you can pull down the latest from here:
<a href="https://oss.sonatype.org/content/repositories/snapshots/org/javalite/">Sonatype Snapshots</a>

